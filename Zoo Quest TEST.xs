void code(string xs="") {
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/"+xs+"/*");}
void zshared() {
code("const float PI = 3.141592;");
code("rule context_change_always");
code("active");
code("highFrequency");
code("{");
code("xsSetContextPlayer(0);");
code("}");
code("const int mInt = 0;");
code("const int mFloat = 1;");
code("const int mString = 2;");
code("const int mVector = 3;");
code("const int mBool = 4;");
code("const int xMetadata = 0;");
code("const int xDirtyBit = 1;");
code("const int xNextBlock = 2;");
code("const int xPrevBlock = 3;");
code("const int xData = 3;");
code("const int xVarNames = 4;");
code("const int xVariables = 5;");
code("const int mPointer = 0;");
code("const int mCount = 1;");
code("const int mNextFree = 2;");
code("const int mNewestBlock = 3;");
code("const int mCacheHead = 4;");
code("const int mCacheCount = 5;");
code("const int mVariableTypes = 5;");
code("const int NEXTFREE = 0;");
code("int MALLOC = 0;");
code("int ARRAYS = 0;");
code("int mNumArrays = 0;");
code("void debugLog(string msg = \"\") {");
code("if (trCurrentPlayer() == 1) {");
code("trChatSend(0, \"<color=1,0,0>\" + msg);");
code("}");
code("}");
code("string datatypeName(int data = 0) {");
code("string name = \"void\";");
code("if (data >= 0 && data <= 4) {");
code("name = aiPlanGetUserVariableString(MALLOC,15,data);");
code("}");
code("return(name);");
code("}");
code("int zNewArray(int type = 0, int size = 1, string name = \"\") {");
code("int index = mNumArrays;");
code("mNumArrays = mNumArrays + 1;");
code("switch(type)");
code("{");
code("case mInt:");
code("{");
code("aiPlanAddUserVariableInt(ARRAYS,index,name,size);");
code("}");
code("case mFloat:");
code("{");
code("aiPlanAddUserVariableFloat(ARRAYS,index,name,size);");
code("}");
code("case mString:");
code("{");
code("aiPlanAddUserVariableString(ARRAYS,index,name,size);");
code("}");
code("case mVector:");
code("{");
code("aiPlanAddUserVariableVector(ARRAYS,index,name,size);");
code("}");
code("case mBool:");
code("{");
code("aiPlanAddUserVariableBool(ARRAYS,index,name,size);");
code("}");
code("}");
code("return(index);");
code("}");
code("bool free(int type = -1, int index = -1) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, type * 3 + xDirtyBit - 1, index)) {");
code("aiPlanSetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, index,");
code("aiPlanGetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE));");
code("aiPlanSetUserVariableBool(MALLOC, type * 3 + xDirtyBit - 1, index, false);");
code("aiPlanSetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE, index);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("int malloc(int type = -1) {");
code("int next = aiPlanGetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE);");
code("if (next == 0) {");
code("next = aiPlanGetNumberUserVariableValues(MALLOC,type * 3 + xNextBlock - 1);");
code("for(i=type * 3; < type * 3 + 3) {");
code("aiPlanSetNumberUserVariableValues(MALLOC,i,next + 1, false);");
code("}");
code("aiPlanSetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1, next, 0);");
code("} else {");
code("aiPlanSetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1,NEXTFREE,");
code("aiPlanGetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1,next));");
code("}");
code("aiPlanSetUserVariableBool(MALLOC,type * 3 + xDirtyBit - 1, next, true);");
code("return(next);");
code("}");
code("bool zGetBool(int index = 0) {");
code("bool val = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");
code("bool zSetBool(int index = 0, bool val = false) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableBool(MALLOC, mBool * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");
code("int zNewBool(bool val = false) {");
code("int index = malloc(mBool);");
code("zSetBool(index, val);");
code("return(index);");
code("}");
code("bool zFreeBool(int index = 0) {");
code("return(free(mBool, index));");
code("}");
code("string zGetString(int index = 0) {");
code("string val = \"\";");
code("if (aiPlanGetUserVariableBool(MALLOC, mString * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableString(MALLOC, mString * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");
code("bool zSetString(int index = 0, string val = \"\") {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mString * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableString(MALLOC, mString * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");
code("int zNewString(string val = \"\") {");
code("int index = malloc(mString);");
code("zSetString(index, val);");
code("return(index);");
code("}");
code("bool zFreeString(int index = 0) {");
code("return(free(mString, index));");
code("}");
code("int zGetInt(int index = 0) {");
code("int val = -1;");
code("if (aiPlanGetUserVariableBool(MALLOC, mInt * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableInt(MALLOC, mInt * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");
code("bool zSetInt(int index = 0, int val = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mInt * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableInt(MALLOC, mInt * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");
code("int zNewInt(int val = 0) {");
code("int index = malloc(mInt);");
code("zSetInt(index, val);");
code("return(index);");
code("}");
code("bool zFreeInt(int index = 0) {");
code("return(free(mInt, index));");
code("}");
code("float zGetFloat(int index = 0) {");
code("float val = -1;");
code("if (aiPlanGetUserVariableBool(MALLOC, mFloat * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableFloat(MALLOC, mFloat * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");
code("bool zSetFloat(int index = 0, float val = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mFloat * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableFloat(MALLOC, mFloat * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");
code("int zNewFloat(float val = 0) {");
code("int index = malloc(mFloat);");
code("zSetFloat(index, val);");
code("return(index);");
code("}");
code("bool zFreeFloat(int index = 0) {");
code("return(free(mFloat, index));");
code("}");
code("vector zGetVector(int index = 0) {");
code("vector val = vector(-1,-1,-1);");
code("if (aiPlanGetUserVariableBool(MALLOC, mVector * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableVector(MALLOC, mVector * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");
code("bool zSetVector(int index = 0, vector val = vector(0,0,0)) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mVector * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableVector(MALLOC, mVector * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");
code("int zNewVector(vector val = vector(0,0,0)) {");
code("int index = malloc(mVector);");
code("zSetVector(index, val);");
code("return(index);");
code("}");
code("bool zFreeVector(int index = 0) {");
code("return(free(mVector, index));");
code("}");
code("int xInitDatabase(string name = \"\", int size = 0) {");
code("int id = aiPlanCreate(name, 8);");
code("aiPlanAddUserVariableBool(id,xDirtyBit,\"DirtyBit\",size+1);");
code("aiPlanAddUserVariableInt(id,xNextBlock,\"NextBlock\",size+1);");
code("aiPlanAddUserVariableInt(id,xPrevBlock,\"PrevBlock\",size+1);");
code("aiPlanAddUserVariableInt(id,xMetadata,\"Metadata\",6);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,size);");
code("aiPlanSetUserVariableInt(id,xNextBlock,0,0);");
code("for(i=1; <= size) {");
code("aiPlanSetUserVariableBool(id,xDirtyBit,i,false);");
code("aiPlanSetUserVariableInt(id,xNextBlock,i,i-1);");
code("}");
code("aiPlanAddUserVariableString(id,xVarNames,\"VarNames\",1);");
code("aiPlanSetUserVariableString(id,xVarNames,0,\"none\");");
code("return(id);");
code("}");
code("int xInitAddVar(int id = 0, string name = \"\", int type = 0) {");
code("int count = aiPlanGetNumberUserVariableValues(id,xDirtyBit);");
code("int index = aiPlanGetNumberUserVariableValues(id,xMetadata);");
code("aiPlanSetNumberUserVariableValues(id,xMetadata,index + 1,false);");
code("aiPlanSetUserVariableInt(id,xMetadata,index,type);");
code("index = aiPlanGetNumberUserVariableValues(id,xVarNames);");
code("aiPlanSetNumberUserVariableValues(id,xVarNames,index+1,false);");
code("aiPlanSetUserVariableString(id,xVarNames,index,name);");
code("index = xVarNames + index;");
code("switch(type)");
code("{");
code("case mInt:");
code("{");
code("aiPlanAddUserVariableInt(id,index,name,count);");
code("}");
code("case mFloat:");
code("{");
code("aiPlanAddUserVariableFloat(id,index,name,count);");
code("}");
code("case mString:");
code("{");
code("aiPlanAddUserVariableString(id,index,name,count);");
code("}");
code("case mVector:");
code("{");
code("aiPlanAddUserVariableVector(id,index,name,count);");
code("}");
code("case mBool:");
code("{");
code("aiPlanAddUserVariableBool(id,index,name,count);");
code("}");
code("}");
code("return(index);");
code("}");
code("int xInitAddInt(int id = 0, string name = \"\", int defVal = 0) {");
code("int index = xInitAddVar(id,name,mInt);");
code("aiPlanSetUserVariableInt(id, index, 0, defVal);");
code("return(index);");
code("}");
code("int xInitAddFloat(int id = 0, string name = \"\", float defVal = 0) {");
code("int index = xInitAddVar(id, name, mFloat);");
code("aiPlanSetUserVariableFloat(id, index, 0, defVal);");
code("return(index);");
code("}");
code("int xInitAddString(int id = 0, string name = \"\", string defVal = \"\") {");
code("int index = xInitAddVar(id, name, mString);");
code("aiPlanSetUserVariableString(id, index, 0, defVal);");
code("return(index);");
code("}");
code("int xInitAddVector(int id = 0, string name = \"\", vector defVal = vector(0,0,0)) {");
code("int index = xInitAddVar(id, name, mVector);");
code("aiPlanSetUserVariableVector(id, index, 0, defVal);");
code("return(index);");
code("}");
code("int xInitAddBool(int id = 0, string name = \"\", bool defVal = false) {");
code("int index = xInitAddVar(id,name,mBool);");
code("aiPlanSetUserVariableBool(id, index, 0, defVal);");
code("return(index);");
code("}");
code("void xResetValues(int id = 0, int index = -1, int stopAt = -1) {");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("if (stopAt == -1) {");
code("stopAt = aiPlanGetNumberUserVariableValues(id, xVarNames);");
code("} else {");
code("stopAt = stopAt - mVariableTypes;");
code("}");
code("for(i = 1; < stopAt) {");
code("switch(aiPlanGetUserVariableInt(id,xMetadata,mVariableTypes + i))");
code("{");
code("case mInt:");
code("{");
code("aiPlanSetUserVariableInt(id,xVarNames + i,index,aiPlanGetUserVariableInt(id,xVarNames + i,0));");
code("}");
code("case mFloat:");
code("{");
code("aiPlanSetUserVariableFloat(id,xVarNames + i,index,aiPlanGetUserVariableFloat(id,xVarNames + i,0));");
code("}");
code("case mString:");
code("{");
code("aiPlanSetUserVariableString(id,xVarNames + i,index,aiPlanGetUserVariableString(id,xVarNames + i,0));");
code("}");
code("case mVector:");
code("{");
code("aiPlanSetUserVariableVector(id,xVarNames + i,index,aiPlanGetUserVariableVector(id,xVarNames + i,0));");
code("}");
code("case mBool:");
code("{");
code("aiPlanSetUserVariableBool(id,xVarNames + i,index,aiPlanGetUserVariableBool(id,xVarNames + i,0));");
code("}");
code("}");
code("}");
code("}");
code("bool xSetPointer(int id = 0, int index = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,index);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("int xAddDatabaseBlock(int id = 0, bool setPointer = false) {");
code("int next = aiPlanGetUserVariableInt(id,xMetadata,mNextFree);");
code("if (next == 0) {");
code("next = aiPlanGetNumberUserVariableValues(id,xDirtyBit);");
code("for(i=aiPlanGetNumberUserVariableValues(id,xVarNames) - 1; > 0) {");
code("aiPlanSetNumberUserVariableValues(id,i + xVarNames,next+1,false);");
code("}");
code("for(i=xPrevBlock; > xMetadata) {");
code("aiPlanSetNumberUserVariableValues(id,i,next+1,false);");
code("}");
code("} else {");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,aiPlanGetUserVariableInt(id,xNextBlock,next));");
code("}");
code("aiPlanSetUserVariableBool(id,xDirtyBit,next,true);");
code("if (aiPlanGetUserVariableInt(id,xMetadata,mCount) == 0) {");
code("aiPlanSetUserVariableInt(id,xNextBlock,next,next);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,next,next);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,next);");
code("} else {");
code("int before = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,next,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,next,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,next);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,next);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mNewestBlock,next);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount, 1 + aiPlanGetUserVariableInt(id,xMetadata,mCount));");
code("xResetValues(id,next);");
code("if (setPointer) {");
code("xSetPointer(id, next);");
code("}");
code("return(next);");
code("}");
code("bool xFreeDatabaseBlock(int id = 0, int index = -1) {");
code("bool success = false;");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,index);");
code("int before = aiPlanGetUserVariableInt(id,xPrevBlock,index);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,index,aiPlanGetUserVariableInt(id,xMetadata,mNextFree));");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,index);");
code("aiPlanSetUserVariableBool(id,xDirtyBit,index,false);");
code("if (index == aiPlanGetUserVariableInt(id,xMetadata,mPointer)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,aiPlanGetUserVariableInt(id,xPrevBlock,index));");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount, aiPlanGetUserVariableInt(id,xMetadata,mCount) - 1);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("bool xDetachDatabaseBlock(int id = 0, int index = -1) {");
code("bool success = false;");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,index);");
code("int before = aiPlanGetUserVariableInt(id,xPrevBlock,index);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,before);");
code("aiPlanSetUserVariableBool(id,xDirtyBit,index,false);");
code("if (index == aiPlanGetUserVariableInt(id,xMetadata,mPointer)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,before);");
code("}");
code("if (aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) == 0) {");
code("aiPlanSetUserVariableInt(id,xNextBlock,index,index);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,index,index);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,index);");
code("} else {");
code("before = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);");
code("after = aiPlanGetUserVariableInt(id,xNextBlock,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,index,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,index,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,index);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,index);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount, aiPlanGetUserVariableInt(id,xMetadata,mCount) - 1);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheCount, aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) + 1);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("bool xRestoreDatabaseBlock(int id = 0, int index = -1) {");
code("bool success = false;");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);");
code("}");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,index) == false) {");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,index);");
code("int before = aiPlanGetUserVariableInt(id,xPrevBlock,index);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,before);");
code("aiPlanSetUserVariableBool(id,xDirtyBit,index,true);");
code("if (index == aiPlanGetUserVariableInt(id,xMetadata,mCacheHead)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,aiPlanGetUserVariableInt(id,xPrevBlock,index));");
code("}");
code("if (aiPlanGetUserVariableInt(id,xMetadata,mCount) == 0) {");
code("aiPlanSetUserVariableInt(id,xNextBlock,index,index);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,index,index);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,index);");
code("} else {");
code("before = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("after = aiPlanGetUserVariableInt(id,xNextBlock,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,index,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,index,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,index);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,index);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount, aiPlanGetUserVariableInt(id,xMetadata,mCount) + 1);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheCount, aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) - 1);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("bool xRestoreCache(int id = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableInt(id,xMetadata,mCacheCount) > 0) {");
code("int pointer = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);");
code("for(i=aiPlanGetUserVariableInt(id,xMetadata,mCacheCount); >0) {");
code("aiPlanSetUserVariableBool(id,xDirtyBit,pointer,true);");
code("pointer = aiPlanGetUserVariableInt(id,xNextBlock,pointer);");
code("}");
code("if (aiPlanGetUserVariableInt(id,xMetadata,mCount) == 0) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,aiPlanGetUserVariableInt(id,xMetadata,mCacheHead));");
code("} else {");
code("int before = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,before);");
code("int index = aiPlanGetUserVariableInt(id,xMetadata,mCacheHead);");
code("int next = aiPlanGetUserVariableInt(id,xPrevBlock,index);");
code("aiPlanSetUserVariableInt(id,xNextBlock,next,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,next);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,index);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,index,before);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount,");
code("aiPlanGetUserVariableInt(id,xMetadata,mCount) + aiPlanGetUserVariableInt(id,xMetadata,mCacheCount));");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheCount,0);");
code("success = true;");
code("}");
code("return(success);");
code("}");
code("int xGetNewestPointer(int id = 0) {");
code("return(aiPlanGetUserVariableInt(id,xMetadata,mNewestBlock));");
code("}");
code("int xDatabaseNext(int id = 0, bool reverse = false) {");
code("int pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("if (reverse) {");
code("pointer = aiPlanGetUserVariableInt(id,xPrevBlock,pointer);");
code("} else {");
code("pointer = aiPlanGetUserVariableInt(id,xNextBlock,pointer);");
code("}");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,pointer) && (aiPlanGetUserVariableInt(id,xMetadata,mCount) > 0)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,pointer);");
code("} else {");
code("pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("debugLog(\"xDatabaseNext: \" + aiPlanGetName(id) + \" pointer is incorrect!\");");
code("debugLog(\"xNextBlock: \" + aiPlanGetUserVariableInt(id,xNextBlock,pointer));");
code("debugLog(\"Me: \" + pointer);");
code("debugLog(\"xPrevblock: \" + aiPlanGetUserVariableInt(id,xPrevBlock,pointer));");
code("}");
code("return(pointer);");
code("}");
code("void xClearDatabase(int id = 0) {");
code("int next = aiPlanGetUserVariableInt(id,xMetadata,mNextFree);");
code("int pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,aiPlanGetUserVariableInt(id,xNextBlock,pointer));");
code("aiPlanSetUserVariableInt(id,xNextBlock,pointer,next);");
code("for(i=0; < aiPlanGetNumberUserVariableValues(id,xDirtyBit)) {");
code("aiPlanSetUserVariableBool(id,xDirtyBit,i,false);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);");
code("}");
code("void xResetDatabase(int id = 0) {");
code("int size = aiPlanGetNumberUserVariableValues(id,xDirtyBit);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheHead,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCacheCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,size - 1);");
code("aiPlanSetUserVariableInt(id,xNextBlock,0,0);");
code("for(i=1; < size) {");
code("aiPlanSetUserVariableBool(id,xDirtyBit,i,false);");
code("aiPlanSetUserVariableInt(id,xNextBlock,i,i-1);");
code("}");
code("}");
code("int xGetInt(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mInt) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetInt: \" + aiPlanGetName(id) + \" variable \" + name + \" is not an int! Type: \" + type);");
code("return(-1);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableInt(id,data,index));");
code("}");
code("bool xSetInt(int id = 0, int data = 0, int val = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mInt) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetInt: \" + aiPlanGetName(id) + \" variable \" + name + \" is not an int! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("bool success = aiPlanSetUserVariableInt(id,data,index,val);");
code("if (success == false) {");
code("string err = \": Could not assign value: \" + val;");
code("debugLog(\"xSetInt: \" + aiPlanGetName(id) + aiPlanGetUserVariableString(id,xVarNames,data - xVarNames) + err);");
code("}");
code("return(success);");
code("}");
code("float xGetFloat(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mFloat) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetFloat: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a float! Type: \" + type);");
code("return(-1.0);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableFloat(id,data,index));");
code("}");
code("bool xSetFloat(int id = 0, int data = 0, float val = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mFloat) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetFloat: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a float! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("bool success = aiPlanSetUserVariableFloat(id,data,index,val);");
code("if (success == false) {");
code("string err = \": Could not assign value: \" + val;");
code("debugLog(\"xSetFloat: \" + aiPlanGetName(id) + aiPlanGetUserVariableString(id,xVarNames,data - xVarNames) + err);");
code("}");
code("return(success);");
code("}");
code("string xGetString(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mString) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetString: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a string! Type: \" + type);");
code("return(\"\");");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableString(id,data,index));");
code("}");
code("bool xSetString(int id = 0, int data = 0, string val = \"\", int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mString) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetString: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a string! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanSetUserVariableString(id,data,index,val));");
code("}");
code("vector xGetVector(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mVector) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetVector: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a vector! Type: \" + type);");
code("return(vector(0,0,0));");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableVector(id,data,index));");
code("}");
code("bool xSetVector(int id = 0, int data = 0, vector val = vector(0,0,0), int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mVector) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetVector: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a vector! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanSetUserVariableVector(id,data,index,val));");
code("}");
code("bool xGetBool(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mBool) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetBool: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a bool! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableBool(id,data,index));");
code("}");
code("bool xSetBool(int id = 0, int data = 0, bool val = false, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mBool) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetBool: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a bool! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanSetUserVariableBool(id,data,index,val));");
code("}");
code("int xGetDatabaseCount(int id = 0) {");
code("return(aiPlanGetUserVariableInt(id,xMetadata,mCount));");
code("}");
code("int xGetPointer(int id = 0) {");
code("return(aiPlanGetUserVariableInt(id,xMetadata,mPointer));");
code("}");
code("void xPrintAll(int id = 0, int index = 0) {");
code("trChatSend(0, \"<u>\" + aiPlanGetName(id) + \"</u>\");");
code("trChatSend(0, \"size: \" + xGetDatabaseCount(id));");
code("trChatSend(0, \"pointer: \" + index);");
code("for(i=1; < aiPlanGetNumberUserVariableValues(id,xVarNames)) {");
code("string name = aiPlanGetUserVariableString(id,xVarNames,i);");
code("int type = aiPlanGetUserVariableInt(id,xMetadata,mVariableTypes + i);");
code("switch(type)");
code("{");
code("case mInt:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableInt(id,xVarNames + i,index));");
code("}");
code("case mFloat:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableFloat(id,xVarNames + i,index));");
code("}");
code("case mString:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableString(id,xVarNames + i,index));");
code("}");
code("case mVector:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableVector(id,xVarNames + i,index));");
code("}");
code("case mBool:");
code("{");
code("if (aiPlanGetUserVariableBool(id,xVarNames + i,index)) {");
code("trChatSend(0, name + \": true\");");
code("} else {");
code("trChatSend(0, name + \": false\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void xUnitSelect(int id = 0, int varn = 0, bool reverse = true) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(id,varn), reverse);");
code("}");
code("void xUnitSelectByID(int db = 0, int varn = 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(xGetInt(db,varn));");
code("}");
code("rule mInitializeMemory");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("aiSet(\"NoAI\", 0);");
code("MALLOC = aiPlanCreate(\"memory\",8);");
code("ARRAYS = aiPlanCreate(\"arrays\",8);");
code("for(i=0; < 5) {");
code("aiPlanAddUserVariableBool(MALLOC,i * 3 + xDirtyBit - 1,\"DirtyBit\"+i,1);");
code("aiPlanAddUserVariableInt(MALLOC,i * 3 + xNextBlock - 1,\"NextBlock\"+i,1);");
code("aiPlanSetUserVariableBool(MALLOC,i * 3 + xDirtyBit - 1, NEXTFREE, true);");
code("aiPlanSetUserVariableInt(MALLOC,i * 3 + xNextBlock - 1, NEXTFREE, 0);");
code("}");
code("aiPlanAddUserVariableInt(MALLOC,mInt * 3 + xData - 1, \"intData\",1);");
code("aiPlanAddUserVariableFloat(MALLOC,mFloat * 3 + xData - 1, \"floatData\",1);");
code("aiPlanAddUserVariableString(MALLOC,mString * 3 + xData - 1, \"stringData\",1);");
code("aiPlanAddUserVariableVector(MALLOC,mVector * 3 + xData - 1, \"vectorData\",1);");
code("aiPlanAddUserVariableBool(MALLOC,mBool * 3 + xData - 1, \"boolData\",1);");
code("aiPlanAddUserVariableString(MALLOC,15,\"datatypes\",5);");
code("aiPlanSetUserVariableString(MALLOC,15,mInt,\"Integer\");");
code("aiPlanSetUserVariableString(MALLOC,15,mFloat,\"Float\");");
code("aiPlanSetUserVariableString(MALLOC,15,mString,\"String\");");
code("aiPlanSetUserVariableString(MALLOC,15,mVector,\"Vector\");");
code("aiPlanSetUserVariableString(MALLOC,15,mBool,\"Bool\");");
code("}");
code("void trVectorQuestVarSet(string name = \"\", vector QVv = vector(-1,-1,-1)) {");
code("if (name == \"\") return;");
code("if (trQuestVarGet(\"vector\"+name) == 0) {");
code("trQuestVarSet(\"vector\"+name, zNewVector(QVv));");
code("} else {");
code("zSetVector(1*trQuestVarGet(\"vector\"+name),QVv);");
code("}");
code("}");
code("vector trVectorQuestVarGet(string name = \"\") {");
code("return(zGetVector(1*trQuestVarGet(\"vector\"+name)));");
code("}");
code("float trVectorQuestVarGetX(string name = \"\") {");
code("return(xsVectorGetX(trVectorQuestVarGet(name)));");
code("}");
code("float trVectorQuestVarGetY(string name = \"\") {");
code("return(xsVectorGetY(trVectorQuestVarGet(name)));");
code("}");
code("float trVectorQuestVarGetZ(string name = \"\") {");
code("return(xsVectorGetZ(trVectorQuestVarGet(name)));");
code("}");
code("void trVectorQuestVarEcho(string name = \"\") {");
code("if (name == \"\") return;");
code("trChatSend(0, \"\"+name+\": \"+trVectorQuestVarGet(name));");
code("}");
code("void trStringQuestVarSet(string name = \"\", string value = \"\") {");
code("if (trQuestVarGet(\"string\"+name) > 0) {");
code("zSetString(1*trQuestVarGet(\"string\"+name), value);");
code("} else {");
code("trQuestVarSet(\"string\"+name, zNewString(value));");
code("}");
code("}");
code("string trStringQuestVarGet(string name=\"\") {");
code("string val = zGetString(1*trQuestVarGet(\"string\"+name));");
code("return(val);");
code("}");
code("bool playerIsPlaying(int p = 0) {");
code("return(kbIsPlayerHuman(p) == true && kbIsPlayerResigned(p) == false && trPlayerDefeated(p) == false);");
code("}");
code("void trUnitTeleportToVector(string v = \"\") {");
code("vector pos = trVectorQuestVarGet(v);");
code("trUnitTeleport(xsVectorGetX(pos),xsVectorGetY(pos),xsVectorGetZ(pos));");
code("}");
code("void trUnitSelectByQV(string s = \"\", bool reverse = true) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"\"+s), reverse);");
code("}");
code("void trVectorSetUnitPos(string v = \"\", string db = \"\", bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+1*trQuestVarGet(db), reverse));");
code("}");
code("void trVectorSetUnitPosInt(string v = \"\", int val = 0, bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+val, reverse));");
code("}");
code("void trUnitMoveToVector(string v = \"\", bool attack = false) {");
code("trUnitMoveToPoint(trVectorQuestVarGetX(v),0,trVectorQuestVarGetZ(v),-1,attack);");
code("}");
code("void trVectorScale(string db = \"\", float s = 1.0) {");
code("trVectorQuestVarSet(db, trVectorQuestVarGet(db) * s);");
code("}");
code("vector vectorSnapToGrid(vector v = vector(0,0,0)) {");
code("int x = xsVectorGetX(v) / 2;");
code("int z = xsVectorGetZ(v) / 2;");
code("return(xsVectorSet(x * 2 + 1,xsVectorGetY(v),z * 2 + 1));");
code("}");
code("void trVectorSnapToGrid(string qv = \"\") {");
code("trVectorQuestVarSet(qv, vectorSnapToGrid(trVectorQuestVarGet(qv)));");
code("}");
code("int iModulo(int mod = 10, int val = 0) {");
code("return(val - val / mod * mod);");
code("}");
code("float fModulo(float mod = 0, float val = 0) {");
code("int c = 0;");
code("if (val > 0) {");
code("c = val / mod;");
code("} else {");
code("c = val / mod - 1;");
code("}");
code("return(0.0 + val - mod * c);");
code("}");
code("bool getBit(int bit = 0, int val = 0) {");
code("val = val / xsPow(2, bit);");
code("return((iModulo(2, val) == 1));");
code("}");
code("void zUnitHeading(float a = 0) {");
code("trSetUnitOrientation(xsVectorSet(xsSin(a),0,xsCos(a)), xsVectorSet(0,1,0), true);");
code("}");
code("void zInitProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("trQuestVarSet(\"p\"+p+\"pf\"+kbGetProtoUnitID(r)+\"f\"+f, v);");
code("}");
code("void zSetProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("for(zsps=0; >1){}");
code("zsps = kbGetProtoUnitID(r);");
code("trModifyProtounit(r, p, f, 0.0 + v - trQuestVarGet(\"p\"+p+\"pf\"+zsps+\"f\"+f));");
code("trQuestVarSet(\"p\"+p+\"pf\"+zsps+\"f\"+f, 0.0 + v);");
code("}");
code("vector vectorToGrid(vector v = vector(0,0,0)) {");
code("return(xsVectorSet(0 + xsVectorGetX(v) / 2,xsVectorGetY(v),0 + xsVectorGetZ(v) / 2));");
code("}");
code("void trVectorToGrid(string from = \"\", string to = \"\"){");
code("trVectorQuestVarSet(to, vectorToGrid(trVectorQuestVarGet(from)));");
code("}");
code("vector gridToVector(vector g = vector(0,0,0)) {");
code("return(xsVectorSet(xsVectorGetX(g) * 2 + 1,xsVectorGetY(g),xsVectorGetZ(g) * 2 + 1));");
code("}");
code("void trGridToVector(string from = \"\", string to = \"\") {");
code("trVectorQuestVarSet(to, gridToVector(trVectorQuestVarGet(from)));");
code("}");
code("void trSquareVar(string qv = \"\") {");
code("trQuestVarSet(qv, xsPow(trQuestVarGet(qv), 2));");
code("}");
code("float distanceBetweenVectors(vector start = vector(0,0,0), vector end = vector(0,0,0), bool squared = true) {");
code("float xDiff = xsVectorGetX(end) - xsVectorGetX(start);");
code("float zDiff = xsVectorGetZ(end) - xsVectorGetZ(start);");
code("float dist = xDiff * xDiff + zDiff * zDiff;");
code("if (squared == false) {");
code("dist = xsSqrt(dist);");
code("}");
code("return(dist);");
code("}");
code("float trDistanceBetweenVectorsSquared(string start = \"\", string end = \"\") {");
code("return(distanceBetweenVectors(trVectorQuestVarGet(start),trVectorQuestVarGet(end)));");
code("}");
code("bool vectorInRectangle(vector pos = vector(0,0,0), vector bot = vector(0,0,0), vector top = vector(0,0,0)) {");
code("if (xsVectorGetX(pos) < xsVectorGetX(bot)) {");
code("return(false);");
code("}");
code("if (xsVectorGetX(pos) > xsVectorGetX(top)) {");
code("return(false);");
code("}");
code("if (xsVectorGetZ(pos) < xsVectorGetZ(bot)) {");
code("return(false);");
code("}");
code("if (xsVectorGetZ(pos) > xsVectorGetZ(top)) {");
code("return(false);");
code("}");
code("return(true);");
code("}");
code("bool trVectorInRectangle(string pos = \"\", string bot = \"\", string top = \"\") {");
code("vector tempPos = zGetVector(1*trQuestVarGet(pos));");
code("vector tempBot = zGetVector(1*trQuestVarGet(bot));");
code("vector tempTop = zGetVector(1*trQuestVarGet(top));");
code("return(vectorInRectangle(tempPos,tempBot,tempTop));");
code("}");
code("vector rotationMatrix(vector v = vector(0,0,0), float cosT = 0, float sinT = 0) {");
code("float x = xsVectorGetX(v);");
code("float z = xsVectorGetZ(v);");
code("vector ret = xsVectorSet(x * cosT - z * sinT, 0, x * sinT + z * cosT);");
code("return(ret);");
code("}");
code("float trDistanceBetweenVectors(string start = \"\", string end = \"\") {");
code("return(distanceBetweenVectors(trVectorQuestVarGet(start),trVectorQuestVarGet(end),false));");
code("}");
code("float distanceBetweenVectors3d(vector start = vector(0,0,0), vector end = vector(0,0,0), bool squared = true) {");
code("float xdiff = xsVectorGetX(start) - xsVectorGetX(end);");
code("float ydiff = xsVectorGetY(start) - xsVectorGetY(end);");
code("float zdiff = xsVectorGetZ(start) - xsVectorGetZ(end);");
code("float dist = xdiff * xdiff + ydiff * ydiff + zdiff * zdiff;");
code("if (squared == false) {");
code("dist = xsSqrt(dist);");
code("}");
code("return(dist);");
code("}");
code("float trDistanceBetweenVectors3d(string start = \"\", string end = \"\") {");
code("return(distanceBetweenVectors3d(trVectorQuestVarGet(start),trVectorQuestVarGet(end),false));");
code("}");
code("float unitDistanceToVector(int name = 0, vector v = vector(0,0,0), bool squared = true) {");
code("vector temp = kbGetBlockPosition(\"\"+name,true);");
code("return(distanceBetweenVectors(temp,v,squared));");
code("}");
code("float trDistanceToVectorSquared(string qv = \"\", string v = \"\") {");
code("return(unitDistanceToVector(1*trQuestVarGet(qv),trVectorQuestVarGet(v)));");
code("}");
code("float trDistanceToVector(string qv = \"\", string v = \"\") {");
code("return(unitDistanceToVector(1*trQuestVarGet(qv),trVectorQuestVarGet(v),false));");
code("}");
code("vector vectorSetFromAngle(float angle = 0) {");
code("return(xsVectorSet(xsSin(angle), 0, xsCos(angle)));");
code("}");
code("void trVectorSetFromAngle(string qv = \"\", float angle = 0) {");
code("trVectorQuestVarSet(qv,xsVectorSet(xsSin(angle), 0, xsCos(angle)));");
code("}");
code("float angleBetweenVectors(vector from = vector(0,0,0), vector to = vector(0,0,0)) {");
code("float a = xsVectorGetX(to) - xsVectorGetX(from);");
code("a = a / (xsVectorGetZ(to) - xsVectorGetZ(from));");
code("a = xsAtan(a);");
code("if (xsVectorGetZ(from) > xsVectorGetZ(to)) {");
code("if (xsVectorGetX(from) > xsVectorGetX(to)) {");
code("a = a - PI;");
code("} else {");
code("a = a + PI;");
code("}");
code("}");
code("return(a);");
code("}");
code("float trAngleBetweenVectors(string from = \"\", string to = \"\") {");
code("return(angleBetweenVectors(trVectorQuestVarGet(from),trVectorQuestVarGet(to)));");
code("}");
code("float angleOfVector(vector dir = vector(0,0,0)) {");
code("float a = xsVectorGetX(dir) / xsVectorGetZ(dir);");
code("a = xsAtan(a);");
code("if (0.0 > xsVectorGetZ(dir)) {");
code("if (0.0 > xsVectorGetX(dir)) {");
code("a = a - PI;");
code("} else {");
code("a = a + PI;");
code("}");
code("}");
code("return(a);");
code("}");
code("float trAngleOfVector(string v = \"\") {");
code("return(angleOfVector(trVectorQuestVarGet(v)));");
code("}");
code("vector getUnitVector(vector start = vector(0,0,0), vector end = vector(0,0,0), float mod = 1.0) {");
code("float xdiff = xsVectorGetX(end) - xsVectorGetX(start);");
code("float zdiff = xsVectorGetZ(end) - xsVectorGetZ(start);");
code("float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);");
code("vector ret = vector(1,0,0);");
code("if (dist > 0) {");
code("ret = xsVectorSet(xdiff / dist * mod, 0, zdiff / dist * mod);");
code("}");
code("return(ret);");
code("}");
code("vector trGetUnitVector(string start = \"\", string end = \"\", float mod = 1.0) {");
code("return(getUnitVector(trVectorQuestVarGet(start),trVectorQuestVarGet(end),mod));");
code("}");
code("vector getUnitVector3d(vector start = vector(0,0,0), vector end = vector(0,0,0), float mod = 1.0) {");
code("float xdiff = xsVectorGetX(end) - xsVectorGetX(start);");
code("float ydiff = xsVectorGetY(end) - xsVectorGetY(start);");
code("float zdiff = xsVectorGetZ(end) - xsVectorGetZ(start);");
code("float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);");
code("vector ret = vector(0,1,0);");
code("if (dist > 0) {");
code("ret = xsVectorSet(xdiff / dist * mod, ydiff / dist * mod, zdiff / dist * mod);");
code("}");
code("return(ret);");
code("}");
code("vector trGetUnitVector3d(string start = \"\", string end = \"\", float mod = 1.0) {");
code("return(getUnitVector3d(trVectorQuestVarGet(start),trVectorQuestVarGet(end),mod));");
code("}");
code("vector crossProduct(vector a = vector(0,0,0), vector b = vector(0,0,0)) {");
code("float x = xsVectorGetY(a) * xsVectorGetZ(b) - xsVectorGetZ(a) * xsVectorGetY(b);");
code("float y = xsVectorGetZ(a) * xsVectorGetX(b) - xsVectorGetX(a) * xsVectorGetZ(b);");
code("float z = xsVectorGetX(a) * xsVectorGetY(b) - xsVectorGetY(a) * xsVectorGetX(b);");
code("vector ret = xsVectorSet(x, y, z);");
code("return(ret);");
code("}");
code("float dotProduct(vector a = vector(0,0,0), vector b = vector(0,0,0)) {");
code("return(xsVectorGetX(a) * xsVectorGetX(b) + xsVectorGetZ(a) * xsVectorGetZ(b));");
code("}");
code("bool terrainIsType(vector v = vector(0,0,0), int type = 0, int subtype = 0) {");
code("bool isType = trGetTerrainType(xsVectorGetX(v),xsVectorGetZ(v)) == type;");
code("isType = trGetTerrainSubType(xsVectorGetX(v),xsVectorGetZ(v)) == subtype;");
code("return(isType);");
code("}");
code("bool trTerrainIsType(string qv = \"\", int type = 0, int subtype = 0) {");
code("return(terrainIsType(trVectorQuestVarGet(qv),type,subtype));");
code("}");
code("void modularCounterInit(string name = \"\", int size = 0) {");
code("trQuestVarSet(\"counter\" + name + \"size\", size);");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("trQuestVarSet(name, 1);");
code("}");
code("int modularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"pointer\") > trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("}");
code("trQuestVarSet(name, trQuestVarGet(\"counter\"+name+\"pointer\"));");
code("return(0 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("}");
code("int peekModularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"fake\") >= trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1);");
code("}");
code("return(0 + trQuestVarGet(\"counter\" + name + \"fake\"));");
code("}");
code("bool yDatabaseCreateIfNull(string dbname = \"\", int count = 0) {");
code("bool created = false;");
code("if (trQuestVarGet(\"database\"+dbname) == 0) {");
code("if (count < 0) {");
code("count = 0;");
code("}");
code("trQuestVarSet(\"database\"+dbname, xInitDatabase(dbname, count));");
code("created = true;");
code("}");
code("return(created);");
code("}");
code("bool yVariableExists(string dbname = \"\", string varname = \"\") {");
code("int db = trQuestVarGet(\"database\"+dbname);");
code("int var = trQuestVarGet(\"database\"+dbname+varname);");
code("return(db * var > 0);");
code("}");
code("float yGetVarAtIndex(string db = \"\", string var = \"\", int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("return(xGetFloat(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),index));");
code("} else {");
code("return(0);");
code("}");
code("}");
code("float yGetVar(string db = \"\", string var = \"\") {");
code("return(yGetVarAtIndex(db, var, -1));");
code("}");
code("string yGetStringAtIndex(string db = \"\", string var = \"\", int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("return(xGetString(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),index));");
code("} else {");
code("return(\"\");");
code("}");
code("}");
code("string yGetString(string db = \"\", string var = \"\") {");
code("return(yGetStringAtIndex(db, var, -1));");
code("}");
code("vector yGetVectorAtIndex(string db = \"\", string var = \"\", int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("return(xGetVector(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),index));");
code("} else {");
code("return(vector(0,0,0));");
code("}");
code("}");
code("vector yGetVector(string db = \"\", string var = \"\") {");
code("return(yGetVectorAtIndex(db, var, -1));");
code("}");
code("void ySetVarAtIndex(string db = \"\", string var = \"\", float val = 0, int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("xSetFloat(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("} else {");
code("yDatabaseCreateIfNull(db, index);");
code("trQuestVarSet(\"database\"+db+var, xInitAddFloat(1*trQuestVarGet(\"database\"+db),var));");
code("xSetFloat(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("}");
code("}");
code("void ySetVar(string db = \"\", string var = \"\", float val = 0) {");
code("ySetVarAtIndex(db, var, val, -1);");
code("}");
code("void ySetStringAtIndex(string db = \"\", string var = \"\", string val = \"\", int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("xSetString(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("} else {");
code("yDatabaseCreateIfNull(db, index);");
code("trQuestVarSet(\"database\"+db+var, xInitAddFloat(1*trQuestVarGet(\"database\"+db),var));");
code("xSetString(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("}");
code("}");
code("void ySetString(string db = \"\", string var = \"\", string val = \"\") {");
code("ySetStringAtIndex(db, var, val, -1);");
code("}");
code("void ySetVectorAtIndex(string db = \"\", string var = \"\", vector val = vector(0,0,0), int index = 0) {");
code("if (yVariableExists(db, var)) {");
code("xSetVector(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("} else {");
code("yDatabaseCreateIfNull(db, index);");
code("trQuestVarSet(\"database\"+db+var, xInitAddFloat(1*trQuestVarGet(\"database\"+db),var));");
code("xSetVector(1*trQuestVarGet(\"database\"+db),1*trQuestVarGet(\"database\"+db+var),val,index);");
code("}");
code("}");
code("void ySetVector(string db = \"\", string var = \"\", vector val = vector(0,0,0)) {");
code("ySetVectorAtIndex(db, var, val, -1);");
code("}");
code("int yDatabaseNext(string db = \"\", bool select = false, bool reverse = false) {");
code("xDatabaseNext(1*trQuestVarGet(\"database\"+db), reverse);");
code("int u = yGetVar(db, \"unitName\");");
code("trQuestVarSet(db, u);");
code("if (select) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+u, true);");
code("return(kbGetBlockID(\"\"+u, true));");
code("} else {");
code("return(u);");
code("}");
code("}");
code("void yRemoveFromDatabase(string db = \"\") {");
code("xFreeDatabaseBlock(1*trQuestVarGet(\"database\"+db));");
code("}");
code("int yGetNewestPointer(string db = \"\") {");
code("return(xGetNewestPointer(1*trQuestVarGet(\"database\"+db)));");
code("}");
code("void yAddUpdateVar(string db = \"\", string var = \"\", float val = 0) {");
code("ySetVarAtIndex(db, var, val, yGetNewestPointer(db));");
code("}");
code("void yAddUpdateString(string db = \"\", string var = \"\", string val = \"\") {");
code("ySetStringAtIndex(db, var, val, yGetNewestPointer(db));");
code("}");
code("void yAddUpdateVector(string db = \"\", string var = \"\", vector val = vector(0,0,0)) {");
code("ySetVectorAtIndex(db, var, val, yGetNewestPointer(db));");
code("}");
code("int yAddToDatabase(string db = \"\", string val = \"\") {");
code("yDatabaseCreateIfNull(db);");
code("int id = trQuestVarGet(\"database\"+db);");
code("int next = xAddDatabaseBlock(id);");
code("yAddUpdateVar(db, \"unitName\", trQuestVarGet(val));");
code("return(next);");
code("}");
code("int yGetPointer(string db = \"\") {");
code("return(xGetPointer(1*trQuestVarGet(\"database\"+db)));");
code("}");
code("bool ySetPointer(string db = \"\", int index = 0) {");
code("bool safe = xSetPointer(1*trQuestVarGet(\"database\"+db), index);");
code("if (safe) {");
code("trQuestVarSet(db, yGetVar(db, \"unitName\"));");
code("}");
code("return(safe);");
code("}");
code("int yGetDatabaseCount(string db = \"\") {");
code("return(xGetDatabaseCount(1*trQuestVarGet(\"database\"+db)));");
code("}");
code("int yGetUnitAtIndex(string db = \"\", int index = 0) {");
code("return(1*yGetVarAtIndex(db, \"unitName\", index));");
code("}");
code("void ySetUnitAtIndex(string db = \"\", int index = 0, int value = 0) {");
code("ySetVarAtIndex(db, \"unitName\", value, index);");
code("}");
code("void ySetUnit(string db = \"\", int value = 0) {");
code("ySetVar(db, \"unitName\", value);");
code("}");
code("void yClearDatabase(string db = \"\") {");
code("xClearDatabase(1*trQuestVarGet(\"database\"+db));");
code("}");
code("int yFindLatestReverse(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("for(x=trGetNextUnitScenarioNameNumber(); >trQuestVarGet(qv)) {");
code("int i = kbGetBlockID(\"\"+x, true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("trQuestVarSet(qv, x);");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");
code("int yFindLatest(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("int next = trGetNextUnitScenarioNameNumber() - 1;");
code("int current = trQuestVarGet(qv);");
code("while(next > current) {");
code("current = current + 1;");
code("int i = kbGetBlockID(\"\"+current, true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("trQuestVarSet(qv, current);");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");
code("void removeCamTracks(int eventID = -1) {");
code("trackRemove();");
code("trUnblockAllSounds();");
code("}");
code("vector vectorSetAsTargetVector(vector from = vector(0,0,0), vector dir = vector(0,0,0), float dist = 40.0) {");
code("vector target = xsVectorSet((xsVectorGetX(dir) * dist) + xsVectorGetX(from), 0,");
code("(xsVectorGetZ(dir) * dist) + xsVectorGetZ(from));");
code("float scale = 0;");
code("if (xsVectorGetX(target) < 0) {");
code("scale = xsVectorGetX(target) / (xsVectorGetX(target) - xsVectorGetX(from));");
code("target = xsVectorSet(0,0, xsVectorGetZ(target) + scale * (xsVectorGetZ(from) - xsVectorGetZ(target)));");
code("} else if (xsVectorGetX(target) > 256) {");
code("scale = (xsVectorGetX(target) - 256) / (xsVectorGetX(target) - xsVectorGetX(from));");
code("target = xsVectorSet(256,0,xsVectorGetZ(target) + scale * (xsVectorGetZ(from) - xsVectorGetZ(target)));");
code("}");
code("if (xsVectorGetZ(target) < 0) {");
code("scale = xsVectorGetZ(target) / (xsVectorGetZ(target) - xsVectorGetZ(from));");
code("target = xsVectorSet(xsVectorGetX(target) + scale * (xsVectorGetX(from) - xsVectorGetX(target)),0,0);");
code("} else if (xsVectorGetZ(target) > 256) {");
code("scale = (xsVectorGetZ(target) - 256) / (xsVectorGetZ(target) - xsVectorGetZ(from));");
code("target = xsVectorSet(xsVectorGetX(target) + scale * (xsVectorGetX(from) - xsVectorGetX(target)),0,256);");
code("}");
code("return(target);");
code("}");
}
void voids() {
code("int deployLocHeading(float posX = 0.0, float PosZ = 0.0, string unit = \"\", int p = 0, float heading = 0.0){");
code("int unitId = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",unit,1,posX,0,PosZ,heading,true);");
code("if(unitId != trGetNextUnitScenarioNameNumber()){");
code("return (unitId);");
code("} else {");
code("return (-1);");
code("}");
code("}");
code("int deployLoc(float posX = 0.0, float PosZ = 0.0, string unit = \"\", int p = 0){");
code("int unitId = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",unit,1,posX,0,PosZ,0,true);");
code("if(unitId != trGetNextUnitScenarioNameNumber()){");
code("return (unitId);");
code("} else {");
code("return (-1);");
code("}");
code("}");
code("void playSound(string soundName = \"\"){");
code("trSoundPlayPaused(\"\"+soundName+\"\", \"1\", -1, \"\", \"\");");
code("}");
code("int deployLocRandomHeading(float posX = 0.0, float PosZ = 0.0, string unit = \"\", int p = 0){");
code("int unitId = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"heading\", 0, 359, true);");
code("trArmyDispatch(\"\"+p+\",0\",unit,1,posX,0,PosZ,1*trQuestVarGet(\"heading\"),true);");
code("if(unitId != trGetNextUnitScenarioNameNumber()){");
code("return (unitId);");
code("} else {");
code("return (-1);");
code("}");
code("}");
code("int getTerrainType(string name = \"\"){");
code("if(name == \"GrassA\")return (0);");
code("if(name == \"GrassB\")return (0);");
code("if(name == \"GrassDirt25\")return (0);");
code("if(name == \"GrassDirt50\")return (0);");
code("if(name == \"GrassDirt75\")return (0);");
code("if(name == \"CliffGreekB\")return (0);");
code("if(name == \"GreekRoad Burnt\")return (0);");
code("if(name == \"GreekRoad BurntB\")return (0);");
code("if(name == \"GaiaCreepA\")return (0);");
code("if(name == \"GaiaCreepASnow\")return (0);");
code("if(name == \"GaiaCreepASand\")return (0);");
code("if(name == \"GaiaCreepB\")return (0);");
code("if(name == \"GaiaCreepBorder\")return (0);");
code("if(name == \"GaiaCreepBorderSnow\")return (0);");
code("if(name == \"GaiaCreepBorderSand\")return (0);");
code("if(name == \"SavannahA\")return (0);");
code("if(name == \"SavannahB\")return (0);");
code("if(name == \"SavannahC\")return (0);");
code("if(name == \"SavannahD\")return (0);");
code("if(name == \"JungleA\")return (0);");
code("if(name == \"JungleB\")return (0);");
code("if(name == \"JungleDirt25\")return (0);");
code("if(name == \"JungleDirt50\")return (0);");
code("if(name == \"JungleDirt75\")return (0);");
code("if(name == \"CliffJungleB\")return (0);");
code("if(name == \"PlainA\")return (0);");
code("if(name == \"PlainB\")return (0);");
code("if(name == \"PlainDirt25\")return (0);");
code("if(name == \"PlainDirt50\")return (0);");
code("if(name == \"PlainDirt75\")return (0);");
code("if(name == \"CliffPlainB\")return (0);");
code("if(name == \"DirtA\")return (0);");
code("if(name == \"DirtB\")return (0);");
code("if(name == \"DirtC\")return (0);");
code("if(name == \"SandA\")return (0);");
code("if(name == \"SandB\")return (0);");
code("if(name == \"SandC\")return (0);");
code("if(name == \"SandD\")return (0);");
code("if(name == \"CliffEgyptianB\")return (0);");
code("if(name == \"SandDirt50\")return (0);");
code("if(name == \"SandDirt50b\")return (0);");
code("if(name == \"SnowA\")return (0);");
code("if(name == \"SnowB\")return (0);");
code("if(name == \"SnowGrass25\")return (0);");
code("if(name == \"SnowGrass50\")return (0);");
code("if(name == \"SnowGrass75\")return (0);");
code("if(name == \"SnowSand25\")return (0);");
code("if(name == \"SnowSand50\")return (0);");
code("if(name == \"SnowSand75\")return (0);");
code("if(name == \"CliffNorseB\")return (0);");
code("if(name == \"OlympusA\")return (0);");
code("if(name == \"OlympusB\")return (0);");
code("if(name == \"OlympusC\")return (0);");
code("if(name == \"OlympusTile\")return (0);");
code("if(name == \"TundraGrassA\")return (0);");
code("if(name == \"TundraGrassB\")return (0);");
code("if(name == \"TundraRockA\")return (0);");
code("if(name == \"TundraRockB\")return (0);");
code("if(name == \"MarshA\")return (0);");
code("if(name == \"MarshB\")return (0);");
code("if(name == \"MarshC\")return (0);");
code("if(name == \"MarshD\")return (0);");
code("if(name == \"MarshE\")return (0);");
code("if(name == \"MarshF\")return (0);");
code("if(name == \"EgyptianRoadA\")return (0);");
code("if(name == \"GreekRoadA\")return (0);");
code("if(name == \"NorseRoadA\")return (0);");
code("if(name == \"JungleRoadA\")return (0);");
code("if(name == \"PlainRoadA\")return (0);");
code("if(name == \"TundraRoadA\")return (0);");
code("if(name == \"CityTileA\")return (0);");
code("if(name == \"CityTileAtlantis\")return (0);");
code("if(name == \"CityTileAtlantisCoral\")return (0);");
code("if(name == \"CityTileWaterPool\")return (0);");
code("if(name == \"CityTileWaterEdgeA\")return (0);");
code("if(name == \"CityTileWaterEdgeB\")return (0);");
code("if(name == \"CityTileWaterEdgeEndA\")return (0);");
code("if(name == \"CityTileWaterEdgeEndB\")return (0);");
code("if(name == \"CityTileWaterEdgeEndC\")return (0);");
code("if(name == \"CityTileWaterEdgeEndD\")return (0);");
code("if(name == \"CityTileWaterCornerA\")return (0);");
code("if(name == \"CityTileWaterCornerB\")return (0);");
code("if(name == \"CityTileWaterCornerC\")return (0);");
code("if(name == \"CityTileWaterCornerD\")return (0);");
code("if(name == \"HadesBuildable1\")return (0);");
code("if(name == \"HadesBuildable2\")return (0);");
code("if(name == \"ForestFloorPalm\")return (0);");
code("if(name == \"ForestFloorPine\")return (0);");
code("if(name == \"ForestFloorPineSnow\")return (0);");
code("if(name == \"ForestFloorOak\")return (0);");
code("if(name == \"ForestFloorGaia\")return (0);");
code("if(name == \"ForestFloorSavannah\")return (0);");
code("if(name == \"ForestFloorDeadPine\")return (0);");
code("if(name == \"ForestFloorTundra\")return (0);");
code("if(name == \"ForestFloorMarsh\")return (0);");
code("if(name == \"ForestFloorJungle\")return (0);");
code("if(name == \"Water\")return (1);");
code("if(name == \"CliffA\")return (2);");
code("if(name == \"CliffGreekA\")return (2);");
code("if(name == \"CliffEgyptianA\")return (2);");
code("if(name == \"CliffNorseA\")return (2);");
code("if(name == \"CliffJungleA\")return (2);");
code("if(name == \"CliffPlainA\")return (2);");
code("if(name == \"Dam\")return (2);");
code("if(name == \"Hades3\")return (2);");
code("if(name == \"Hades5\")return (2);");
code("if(name == \"Hades6\")return (2);");
code("if(name == \"Hades7\")return (2);");
code("if(name == \"HadesCliff\")return (2);");
code("if(name == \"Hades4\")return (2);");
code("if(name == \"BlackRock\")return (2);");
code("if(name == \"UnderwaterRockA\")return (3);");
code("if(name == \"UnderwaterRockB\")return (3);");
code("if(name == \"UnderwaterRockC\")return (3);");
code("if(name == \"UnderwaterRockD\")return (3);");
code("if(name == \"UnderwaterRockE\")return (3);");
code("if(name == \"UnderwaterRockF\")return (3);");
code("if(name == \"UnderwaterIceA\")return (3);");
code("if(name == \"UnderwaterIceB\")return (3);");
code("if(name == \"UnderwaterIceC\")return (3);");
code("if(name == \"CoralA\")return (3);");
code("if(name == \"CoralB\")return (3);");
code("if(name == \"CoralC\")return (3);");
code("if(name == \"CoralC2\")return (3);");
code("if(name == \"CoralD\")return (3);");
code("if(name == \"CoralE\")return (3);");
code("if(name == \"CoralF\")return (3);");
code("if(name == \"ShorelineSandA\")return (4);");
code("if(name == \"ShorelineAegeanA\")return (4);");
code("if(name == \"ShorelineAegeanB\")return (4);");
code("if(name == \"ShorelineAegeanC\")return (4);");
code("if(name == \"ShorelineRedSeaA\")return (4);");
code("if(name == \"ShorelineRedSeaB\")return (4);");
code("if(name == \"ShorelineRedSeaC\")return (4);");
code("if(name == \"ShorelineNorwegianA\")return (4);");
code("if(name == \"ShorelineNorwegianB\")return (4);");
code("if(name == \"ShorelineNorwegianC\")return (4);");
code("if(name == \"ShorelineMediterraneanA\")return (4);");
code("if(name == \"ShorelineMediterraneanB\")return (4);");
code("if(name == \"ShorelineMediterraneanC\")return (4);");
code("if(name == \"ShorelineMediterraneanD\")return (4);");
code("if(name == \"ShorelineAtlanticA\")return (4);");
code("if(name == \"ShorelineAtlanticB\")return (4);");
code("if(name == \"ShorelineAtlanticC\")return (4);");
code("if(name == \"ShorelineTundraA\")return (4);");
code("if(name == \"ShorelineTundraB\")return (4);");
code("if(name == \"ShorelineTundraC\")return (4);");
code("if(name == \"ShorelineTundraD\")return (4);");
code("if(name == \"ShorelineJungleA\")return (4);");
code("if(name == \"ShorelineJungleB\")return (4);");
code("if(name == \"ShorelineJungleC\")return (4);");
code("if(name == \"ShorelinePlainA\")return (4);");
code("if(name == \"ShorelinePlainB\")return (4);");
code("if(name == \"ShorelinePlainC\")return (4);");
code("if(name == \"ShorelinePlainD\")return (4);");
code("if(name == \"RiverSandyA\")return (4);");
code("if(name == \"RiverSandyB\")return (4);");
code("if(name == \"RiverSandyC\")return (4);");
code("if(name == \"RiverSandyShallowA\")return (4);");
code("if(name == \"RiverGrassyA\")return (4);");
code("if(name == \"RiverGrassyB\")return (4);");
code("if(name == \"RiverGrassyC\")return (4);");
code("if(name == \"RiverIcyA\")return (4);");
code("if(name == \"RiverIcyB\")return (4);");
code("if(name == \"RiverIcyC\")return (4);");
code("if(name == \"RiverMarshA\")return (4);");
code("if(name == \"RiverMarshB\")return (4);");
code("if(name == \"RiverMarshC\")return (4);");
code("if(name == \"IceA\")return (5);");
code("if(name == \"IceB\")return (5);");
code("if(name == \"IceC\")return (5);");
code("if(name == \"MiningGround\")return (5);");
code("if(name == \"Black\")return (5);");
code("if(name == \"Hades1\")return (5);");
code("if(name == \"Hades2\")return (5);");
code("if(name == \"Hades4Passable\")return (5);");
code("if(name == \"Hades8\")return (5);");
code("if(name == \"Hades9\")return (5);");
code("}");
code("int getTerrainSubType(string name = \"\"){");
code("if(name == \"GrassA\")return (0);");
code("if(name == \"GrassB\")return (1);");
code("if(name == \"GrassDirt25\")return (2);");
code("if(name == \"GrassDirt50\")return (3);");
code("if(name == \"GrassDirt75\")return (4);");
code("if(name == \"CliffGreekB\")return (5);");
code("if(name == \"GreekRoad Burnt\")return (6);");
code("if(name == \"GreekRoad BurntB\")return (7);");
code("if(name == \"GaiaCreepA\")return (8);");
code("if(name == \"GaiaCreepASnow\")return (9);");
code("if(name == \"GaiaCreepASand\")return (10);");
code("if(name == \"GaiaCreepB\")return (11);");
code("if(name == \"GaiaCreepBorder\")return (12);");
code("if(name == \"GaiaCreepBorderSnow\")return (13);");
code("if(name == \"GaiaCreepBorderSand\")return (14);");
code("if(name == \"SavannahA\")return (15);");
code("if(name == \"SavannahB\")return (16);");
code("if(name == \"SavannahC\")return (17);");
code("if(name == \"SavannahD\")return (18);");
code("if(name == \"JungleA\")return (19);");
code("if(name == \"JungleB\")return (20);");
code("if(name == \"JungleDirt25\")return (21);");
code("if(name == \"JungleDirt50\")return (22);");
code("if(name == \"JungleDirt75\")return (23);");
code("if(name == \"CliffJungleB\")return (24);");
code("if(name == \"PlainA\")return (25);");
code("if(name == \"PlainB\")return (26);");
code("if(name == \"PlainDirt25\")return (27);");
code("if(name == \"PlainDirt50\")return (28);");
code("if(name == \"PlainDirt75\")return (29);");
code("if(name == \"CliffPlainB\")return (30);");
code("if(name == \"DirtA\")return (31);");
code("if(name == \"DirtB\")return (32);");
code("if(name == \"DirtC\")return (33);");
code("if(name == \"SandA\")return (34);");
code("if(name == \"SandB\")return (35);");
code("if(name == \"SandC\")return (36);");
code("if(name == \"SandD\")return (37);");
code("if(name == \"CliffEgyptianB\")return (38);");
code("if(name == \"SandDirt50\")return (39);");
code("if(name == \"SandDirt50b\")return (40);");
code("if(name == \"SnowA\")return (41);");
code("if(name == \"SnowB\")return (42);");
code("if(name == \"SnowGrass25\")return (43);");
code("if(name == \"SnowGrass50\")return (44);");
code("if(name == \"SnowGrass75\")return (45);");
code("if(name == \"SnowSand25\")return (46);");
code("if(name == \"SnowSand50\")return (47);");
code("if(name == \"SnowSand75\")return (48);");
code("if(name == \"CliffNorseB\")return (49);");
code("if(name == \"OlympusA\")return (50);");
code("if(name == \"OlympusB\")return (51);");
code("if(name == \"OlympusC\")return (52);");
code("if(name == \"OlympusTile\")return (53);");
code("if(name == \"TundraGrassA\")return (54);");
code("if(name == \"TundraGrassB\")return (55);");
code("if(name == \"TundraRockA\")return (56);");
code("if(name == \"TundraRockB\")return (57);");
code("if(name == \"MarshA\")return (58);");
code("if(name == \"MarshB\")return (59);");
code("if(name == \"MarshC\")return (60);");
code("if(name == \"MarshD\")return (61);");
code("if(name == \"MarshE\")return (62);");
code("if(name == \"MarshF\")return (63);");
code("if(name == \"EgyptianRoadA\")return (64);");
code("if(name == \"GreekRoadA\")return (65);");
code("if(name == \"NorseRoadA\")return (66);");
code("if(name == \"JungleRoadA\")return (67);");
code("if(name == \"PlainRoadA\")return (68);");
code("if(name == \"TundraRoadA\")return (69);");
code("if(name == \"CityTileA\")return (70);");
code("if(name == \"CityTileAtlantis\")return (71);");
code("if(name == \"CityTileAtlantisCoral\")return (72);");
code("if(name == \"CityTileWaterPool\")return (73);");
code("if(name == \"CityTileWaterEdgeA\")return (74);");
code("if(name == \"CityTileWaterEdgeB\")return (75);");
code("if(name == \"CityTileWaterEdgeEndA\")return (76);");
code("if(name == \"CityTileWaterEdgeEndB\")return (77);");
code("if(name == \"CityTileWaterEdgeEndC\")return (78);");
code("if(name == \"CityTileWaterEdgeEndD\")return (79);");
code("if(name == \"CityTileWaterCornerA\")return (80);");
code("if(name == \"CityTileWaterCornerB\")return (81);");
code("if(name == \"CityTileWaterCornerC\")return (82);");
code("if(name == \"CityTileWaterCornerD\")return (83);");
code("if(name == \"HadesBuildable1\")return (84);");
code("if(name == \"HadesBuildable2\")return (85);");
code("if(name == \"ForestFloorPalm\")return (86);");
code("if(name == \"ForestFloorPine\")return (87);");
code("if(name == \"ForestFloorPineSnow\")return (88);");
code("if(name == \"ForestFloorOak\")return (89);");
code("if(name == \"ForestFloorGaia\")return (90);");
code("if(name == \"ForestFloorSavannah\")return (91);");
code("if(name == \"ForestFloorDeadPine\")return (92);");
code("if(name == \"ForestFloorTundra\")return (93);");
code("if(name == \"ForestFloorMarsh\")return (94);");
code("if(name == \"ForestFloorJungle\")return (95);");
code("if(name == \"Water\")return (0);");
code("if(name == \"CliffA\")return (0);");
code("if(name == \"CliffGreekA\")return (1);");
code("if(name == \"CliffEgyptianA\")return (2);");
code("if(name == \"CliffNorseA\")return (3);");
code("if(name == \"CliffJungleA\")return (4);");
code("if(name == \"CliffPlainA\")return (5);");
code("if(name == \"Dam\")return (6);");
code("if(name == \"Hades3\")return (7);");
code("if(name == \"Hades5\")return (8);");
code("if(name == \"Hades6\")return (9);");
code("if(name == \"Hades7\")return (10);");
code("if(name == \"HadesCliff\")return (11);");
code("if(name == \"Hades4\")return (12);");
code("if(name == \"BlackRock\")return (13);");
code("if(name == \"UnderwaterRockA\")return (0);");
code("if(name == \"UnderwaterRockB\")return (1);");
code("if(name == \"UnderwaterRockC\")return (2);");
code("if(name == \"UnderwaterRockD\")return (3);");
code("if(name == \"UnderwaterRockE\")return (4);");
code("if(name == \"UnderwaterRockF\")return (5);");
code("if(name == \"UnderwaterIceA\")return (6);");
code("if(name == \"UnderwaterIceB\")return (7);");
code("if(name == \"UnderwaterIceC\")return (8);");
code("if(name == \"CoralA\")return (9);");
code("if(name == \"CoralB\")return (10);");
code("if(name == \"CoralC\")return (11);");
code("if(name == \"CoralC2\")return (12);");
code("if(name == \"CoralD\")return (13);");
code("if(name == \"CoralE\")return (14);");
code("if(name == \"CoralF\")return (15);");
code("if(name == \"ShorelineSandA\")return (0);");
code("if(name == \"ShorelineAegeanA\")return (1);");
code("if(name == \"ShorelineAegeanB\")return (2);");
code("if(name == \"ShorelineAegeanC\")return (3);");
code("if(name == \"ShorelineRedSeaA\")return (4);");
code("if(name == \"ShorelineRedSeaB\")return (5);");
code("if(name == \"ShorelineRedSeaC\")return (6);");
code("if(name == \"ShorelineNorwegianA\")return (7);");
code("if(name == \"ShorelineNorwegianB\")return (8);");
code("if(name == \"ShorelineNorwegianC\")return (9);");
code("if(name == \"ShorelineMediterraneanA\")return (10);");
code("if(name == \"ShorelineMediterraneanB\")return (11);");
code("if(name == \"ShorelineMediterraneanC\")return (12);");
code("if(name == \"ShorelineMediterraneanD\")return (13);");
code("if(name == \"ShorelineAtlanticA\")return (14);");
code("if(name == \"ShorelineAtlanticB\")return (15);");
code("if(name == \"ShorelineAtlanticC\")return (16);");
code("if(name == \"ShorelineTundraA\")return (17);");
code("if(name == \"ShorelineTundraB\")return (18);");
code("if(name == \"ShorelineTundraC\")return (19);");
code("if(name == \"ShorelineTundraD\")return (20);");
code("if(name == \"ShorelineJungleA\")return (21);");
code("if(name == \"ShorelineJungleB\")return (22);");
code("if(name == \"ShorelineJungleC\")return (23);");
code("if(name == \"ShorelinePlainA\")return (24);");
code("if(name == \"ShorelinePlainB\")return (25);");
code("if(name == \"ShorelinePlainC\")return (26);");
code("if(name == \"ShorelinePlainD\")return (27);");
code("if(name == \"RiverSandyA\")return (28);");
code("if(name == \"RiverSandyB\")return (29);");
code("if(name == \"RiverSandyC\")return (30);");
code("if(name == \"RiverSandyShallowA\")return (31);");
code("if(name == \"RiverGrassyA\")return (32);");
code("if(name == \"RiverGrassyB\")return (33);");
code("if(name == \"RiverGrassyC\")return (34);");
code("if(name == \"RiverIcyA\")return (35);");
code("if(name == \"RiverIcyB\")return (36);");
code("if(name == \"RiverIcyC\")return (37);");
code("if(name == \"RiverMarshA\")return (38);");
code("if(name == \"RiverMarshB\")return (39);");
code("if(name == \"RiverMarshC\")return (40);");
code("if(name == \"IceA\")return (0);");
code("if(name == \"IceB\")return (1);");
code("if(name == \"IceC\")return (2);");
code("if(name == \"MiningGround\")return (3);");
code("if(name == \"Black\")return (4);");
code("if(name == \"Hades1\")return (5);");
code("if(name == \"Hades2\")return (6);");
code("if(name == \"Hades4Passable\")return (7);");
code("if(name == \"Hades8\")return (8);");
code("if(name == \"Hades9\")return (9);");
code("}");
code("void grantGodPowerNoRechargeNextPosition(int p = 0, string power = \"\", int count = 0) {");
code("for(tempPowerTech = -1; > 1){}");
code("for(tempPosition = -1; > 1){}");
code("if(power==\"Animal Magnetism\")tempPowerTech=227;");
code("if(power==\"Audrey\")tempPowerTech=407;");
code("if(power==\"Barrage\")tempPowerTech=546;");
code("if(power==\"Blessing of Zeus\")tempPowerTech=351;");
code("if(power==\"Bolt\")tempPowerTech=221;");
code("if(power==\"Bronze\")tempPowerTech=175;");
code("if(power==\"Bronze XP05\")tempPowerTech=457;");
code("if(power==\"Call to Arms\")tempPowerTech=547;");
code("if(power==\"Cease Fire\")tempPowerTech=147;");
code("if(power==\"Cease Fire Nomad\")tempPowerTech=376;");
code("if(power==\"Change Caladria\")tempPowerTech=464;");
code("if(power==\"Change Chimera\")tempPowerTech=463;");
code("if(power==\"Change Cyclops\")tempPowerTech=462;");
code("if(power==\"Change Hydra\")tempPowerTech=467;");
code("if(power==\"Change Manticore\")tempPowerTech=465;");
code("if(power==\"Change Nemean\")tempPowerTech=466;");
code("if(power==\"Chaos\")tempPowerTech=409;");
code("if(power==\"Chicken Storm\")tempPowerTech=388;");
code("if(power==\"Citadel\")tempPowerTech=232;");
code("if(power==\"Create Gold\")tempPowerTech=84;");
code("if(power==\"Curse\")tempPowerTech=229;");
code("if(power==\"Earth Dragon\")tempPowerTech=557;");
code("if(power==\"Earthquake\")tempPowerTech=239;");
code("if(power==\"Eclipse\")tempPowerTech=214;");
code("if(power==\"Examination\")tempPowerTech=550;");
code("if(power==\"Flaming Weapons\")tempPowerTech=223;");
code("if(power==\"Flood\")tempPowerTech=555;");
code("if(power==\"Flood Weak\")tempPowerTech=556;");
code("if(power==\"Forest Fire\")tempPowerTech=248;");
code("if(power==\"Forest Fire SPC\")tempPowerTech=594;");
code("if(power==\"Frost\")tempPowerTech=57;");
code("if(power==\"Gaia Forest\")tempPowerTech=418;");
code("if(power==\"Gaia Forest SPC\")tempPowerTech=505;");
code("if(power==\"Geyser\")tempPowerTech=552;");
code("if(power==\"Goatunheim\")tempPowerTech=391;");
code("if(power==\"Great Hunt\")tempPowerTech=146;");
code("if(power==\"Healing Spring\")tempPowerTech=228;");
code("if(power==\"Heroize\")tempPowerTech=439;");
code("if(power==\"Hesperides\")tempPowerTech=436;");
code("if(power==\"Implode\")tempPowerTech=442;");
code("if(power==\"Inferno\")tempPowerTech=558;");
code("if(power==\"Journey\")tempPowerTech=548;");
code("if(power==\"Lightning Storm\")tempPowerTech=42;");
code("if(power==\"Locust Swarm\")tempPowerTech=43;");
code("if(power==\"Meteor\")tempPowerTech=61;");
code("if(power==\"Nidhogg\")tempPowerTech=235;");
code("if(power==\"Pestilence\")tempPowerTech=249;");
code("if(power==\"Plenty\")tempPowerTech=236;");
code("if(power==\"Prosperity\")tempPowerTech=211;");
code("if(power==\"Ragnorok\")tempPowerTech=234;");
code("if(power==\"Rain\")tempPowerTech=156;");
code("if(power==\"Recreation\")tempPowerTech=543;");
code("if(power==\"Restoration\")tempPowerTech=134;");
code("if(power==\"Reverse Time\")tempPowerTech=406;");
code("if(power==\"Reverse Wonder\")tempPowerTech=434;");
code("if(power==\"Sandstorm\")tempPowerTech=231;");
code("if(power==\"Seed of Gaia\")tempPowerTech=485;");
code("if(power==\"Sentinel\")tempPowerTech=230;");
code("if(power==\"Serpents\")tempPowerTech=226;");
code("if(power==\"Skeleton Power\")tempPowerTech=129;");
code("if(power==\"Snow Storm\")tempPowerTech=172;");
code("if(power==\"Son of Osiris\")tempPowerTech=237;");
code("if(power==\"SPCLightning Storm\")tempPowerTech=468;");
code("if(power==\"SPCMeteor\")tempPowerTech=334;");
code("if(power==\"Spiders\")tempPowerTech=438;");
code("if(power==\"Spy\")tempPowerTech=222;");
code("if(power==\"Tartarian Gate\")tempPowerTech=419;");
code("if(power==\"Timber Harvest\")tempPowerTech=545;");
code("if(power==\"TitanGate\")tempPowerTech=444;");
code("if(power==\"Tornado\")tempPowerTech=44;");
code("if(power==\"Tornado XP05\")tempPowerTech=458;");
code("if(power==\"Traitors\")tempPowerTech=408;");
code("if(power==\"Traitors SPC\")tempPowerTech=491;");
code("if(power==\"Tremor\")tempPowerTech=414;");
code("if(power==\"Tsunami\")tempPowerTech=598;");
code("if(power==\"Undermine\")tempPowerTech=152;");
code("if(power==\"Underworld Passage\")tempPowerTech=133;");
code("if(power==\"Uproot\")tempPowerTech=553;");
code("if(power==\"Uproot SPC\")tempPowerTech=554;");
code("if(power==\"Vision\")tempPowerTech=220;");
code("if(power==\"Volcano\")tempPowerTech=410;");
code("if(power==\"Vortex\")tempPowerTech=431;");
code("if(power==\"Walking Berry Bushes\")tempPowerTech=389;");
code("if(power==\"Walking Woods\")tempPowerTech=233;");
code("if(power==\"Water Damage\")tempPowerTech=615;");
code("if(power==\"Well of Urd\")tempPowerTech=366;");
code("if(power==\"Year of the Goat\")tempPowerTech=544;");
code("if(tempPowerTech>=0){");
code("if(trGetGPData(p, 0, 0) == tempPowerTech)tempPosition=0;");
code("if(trGetGPData(p, 0, 1) == tempPowerTech)tempPosition=1;");
code("if(trGetGPData(p, 0, 2) == tempPowerTech)tempPosition=2;");
code("if(trGetGPData(p, 0, 3) == tempPowerTech)tempPosition=3;");
code("if(trGetGPData(p, 0, 4) == tempPowerTech)tempPosition=4;");
code("if(tempPosition>=0){");
code("trSetGPData(p, 5, tempPosition, 0 - trGetGPData(p, 5, tempPosition));");
code("trSetGPData(p, 1, tempPosition, count);");
code("trSetGPData(p, 2, tempPosition, 0 - trGetGPData(p, 2, tempPosition));");
code("} else {");
code("if((trGetGPData(p, 1, 0) > 0 || trGetGPData(p, 2, 0) > 0) == false){");
code("tempPosition=0;");
code("} else if((trGetGPData(p, 1, 1) > 0 || trGetGPData(p, 2, 1) > 0) == false){");
code("tempPosition=1;");
code("} else if((trGetGPData(p, 1, 2) > 0 || trGetGPData(p, 2, 2) > 0) == false){");
code("tempPosition=2;");
code("} else {");
code("tempPosition=3;");
code("}");
code("trTechGodPowerAtPosition(p, power, 0, tempPosition + 1);");
code("trSetGPData(p, 5, tempPosition, 0 - trGetGPData(p, 5, tempPosition));");
code("trSetGPData(p, 1, tempPosition, count - trGetGPData(p, 1, tempPosition) + trGetGPData(p, 2, tempPosition));");
code("trSetGPData(p, 2, tempPosition, 0 - trGetGPData(p, 2, tempPosition));");
code("}");
code("}");
code("}");
code("void GPSetRechargeTime(int p = 0, string power =\"\", int time = 1000) {");
code("for(tempPowerTech = -1; > 1){}");
code("for(tempPosition = -1; > 1){}");
code("if(power==\"Animal Magnetism\")tempPowerTech=227;");
code("if(power==\"Audrey\")tempPowerTech=407;");
code("if(power==\"Barrage\")tempPowerTech=546;");
code("if(power==\"Blessing of Zeus\")tempPowerTech=351;");
code("if(power==\"Bolt\")tempPowerTech=221;");
code("if(power==\"Bronze\")tempPowerTech=175;");
code("if(power==\"Bronze XP05\")tempPowerTech=457;");
code("if(power==\"Call to Arms\")tempPowerTech=547;");
code("if(power==\"Cease Fire\")tempPowerTech=147;");
code("if(power==\"Cease Fire Nomad\")tempPowerTech=376;");
code("if(power==\"Change Caladria\")tempPowerTech=464;");
code("if(power==\"Change Chimera\")tempPowerTech=463;");
code("if(power==\"Change Cyclops\")tempPowerTech=462;");
code("if(power==\"Change Hydra\")tempPowerTech=467;");
code("if(power==\"Change Manticore\")tempPowerTech=465;");
code("if(power==\"Change Nemean\")tempPowerTech=466;");
code("if(power==\"Chaos\")tempPowerTech=409;");
code("if(power==\"Chicken Storm\")tempPowerTech=388;");
code("if(power==\"Citadel\")tempPowerTech=232;");
code("if(power==\"Create Gold\")tempPowerTech=84;");
code("if(power==\"Curse\")tempPowerTech=229;");
code("if(power==\"Earth Dragon\")tempPowerTech=557;");
code("if(power==\"Earthquake\")tempPowerTech=239;");
code("if(power==\"Eclipse\")tempPowerTech=214;");
code("if(power==\"Examination\")tempPowerTech=550;");
code("if(power==\"Flaming Weapons\")tempPowerTech=223;");
code("if(power==\"Flood\")tempPowerTech=555;");
code("if(power==\"Flood Weak\")tempPowerTech=556;");
code("if(power==\"Forest Fire\")tempPowerTech=248;");
code("if(power==\"Forest Fire SPC\")tempPowerTech=594;");
code("if(power==\"Frost\")tempPowerTech=57;");
code("if(power==\"Gaia Forest\")tempPowerTech=418;");
code("if(power==\"Gaia Forest SPC\")tempPowerTech=505;");
code("if(power==\"Geyser\")tempPowerTech=552;");
code("if(power==\"Goatunheim\")tempPowerTech=391;");
code("if(power==\"Great Hunt\")tempPowerTech=146;");
code("if(power==\"Healing Spring\")tempPowerTech=228;");
code("if(power==\"Heroize\")tempPowerTech=439;");
code("if(power==\"Hesperides\")tempPowerTech=436;");
code("if(power==\"Implode\")tempPowerTech=442;");
code("if(power==\"Inferno\")tempPowerTech=558;");
code("if(power==\"Journey\")tempPowerTech=548;");
code("if(power==\"Lightning Storm\")tempPowerTech=42;");
code("if(power==\"Locust Swarm\")tempPowerTech=43;");
code("if(power==\"Meteor\")tempPowerTech=61;");
code("if(power==\"Nidhogg\")tempPowerTech=235;");
code("if(power==\"Pestilence\")tempPowerTech=249;");
code("if(power==\"Plenty\")tempPowerTech=236;");
code("if(power==\"Prosperity\")tempPowerTech=211;");
code("if(power==\"Ragnorok\")tempPowerTech=234;");
code("if(power==\"Rain\")tempPowerTech=156;");
code("if(power==\"Recreation\")tempPowerTech=543;");
code("if(power==\"Restoration\")tempPowerTech=134;");
code("if(power==\"Reverse Time\")tempPowerTech=406;");
code("if(power==\"Reverse Wonder\")tempPowerTech=434;");
code("if(power==\"Sandstorm\")tempPowerTech=231;");
code("if(power==\"Seed of Gaia\")tempPowerTech=485;");
code("if(power==\"Sentinel\")tempPowerTech=230;");
code("if(power==\"Serpents\")tempPowerTech=226;");
code("if(power==\"Skeleton Power\")tempPowerTech=129;");
code("if(power==\"Snow Storm\")tempPowerTech=172;");
code("if(power==\"Son of Osiris\")tempPowerTech=237;");
code("if(power==\"SPCLightning Storm\")tempPowerTech=468;");
code("if(power==\"SPCMeteor\")tempPowerTech=334;");
code("if(power==\"Spiders\")tempPowerTech=438;");
code("if(power==\"Spy\")tempPowerTech=222;");
code("if(power==\"Tartarian Gate\")tempPowerTech=419;");
code("if(power==\"Timber Harvest\")tempPowerTech=545;");
code("if(power==\"TitanGate\")tempPowerTech=444;");
code("if(power==\"Tornado\")tempPowerTech=44;");
code("if(power==\"Tornado XP05\")tempPowerTech=458;");
code("if(power==\"Traitors\")tempPowerTech=408;");
code("if(power==\"Traitors SPC\")tempPowerTech=491;");
code("if(power==\"Tremor\")tempPowerTech=414;");
code("if(power==\"Tsunami\")tempPowerTech=598;");
code("if(power==\"Undermine\")tempPowerTech=152;");
code("if(power==\"Underworld Passage\")tempPowerTech=133;");
code("if(power==\"Uproot\")tempPowerTech=553;");
code("if(power==\"Uproot SPC\")tempPowerTech=554;");
code("if(power==\"Vision\")tempPowerTech=220;");
code("if(power==\"Volcano\")tempPowerTech=410;");
code("if(power==\"Vortex\")tempPowerTech=431;");
code("if(power==\"Walking Berry Bushes\")tempPowerTech=389;");
code("if(power==\"Walking Woods\")tempPowerTech=233;");
code("if(power==\"Water Damage\")tempPowerTech=615;");
code("if(power==\"Well of Urd\")tempPowerTech=366;");
code("if(power==\"Year of the Goat\")tempPowerTech=544;");
code("if(tempPowerTech>=0){");
code("if(trGetGPData(p, 0, 0) == tempPowerTech)tempPosition=0;");
code("if(trGetGPData(p, 0, 1) == tempPowerTech)tempPosition=1;");
code("if(trGetGPData(p, 0, 2) == tempPowerTech)tempPosition=2;");
code("if(trGetGPData(p, 0, 3) == tempPowerTech)tempPosition=3;");
code("if(trGetGPData(p, 0, 4) == tempPowerTech)tempPosition=4;");
code("if(tempPosition>=0){");
code("if(false){");
code("trSetGPData(p, 5, tempPosition, time);");
code("} else {");
code("trSetGPData(p, 5, tempPosition, time - trGetGPData(p, 5, tempPosition));");
code("}");
code("}");
code("}");
code("}");
code("void refreshPassability(){");
code("trPaintTerrain(0, 0, 0, 0, trGetTerrainType(0, 0), trGetTerrainSubType(0, 0), true);");
code("}");
code("void characterDialog(string character = \"\", string message = \"\", string portrait = \"\"){");
code("trSoundPlayFN(\"\",\"1\",-1,\"\"+character+\":\"+message,portrait);");
code("}");
code("void modifyProtounitAbsolute(string protounit = \"\", int p = 0, int field = 0, float value = 0.0){");
code("if(field == 6){");
code("trModifyProtounit(protounit, p, field, -9999999999999999999.0);");
code("trModifyProtounit(protounit, p, field, value);");
code("} else if(field == 5 || field == 7 || field == 10 || field == 13){");
code("trModifyProtounit(protounit, p, field, 2147483648.0);");
code("trModifyProtounit(protounit, p, field, 2147483648.0);");
code("trModifyProtounit(protounit, p, field, value);");
code("} else {");
code("trModifyProtounit(protounit, p, field, 9999999999999999999.0);");
code("trModifyProtounit(protounit, p, field, -9999999999999999999.0);");
code("trModifyProtounit(protounit, p, field, value);");
code("}");
code("}");
code("void paintShopSquare(int posX = 0, int PosZ = 0, string terrain = \"\"){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("trPaintTerrain(posX+1, PosZ+1, posX+1, PosZ+1, 0, 80, false);");
code("trPaintTerrain(posX+1, PosZ, posX+1, PosZ, 0, 74, false);");
code("trPaintTerrain(posX+1, PosZ-1, posX+1, PosZ-1, 0, 81, false);");
code("trPaintTerrain(posX, PosZ-1, posX, PosZ-1, 0, 75, false);");
code("trPaintTerrain(posX-1, PosZ-1, posX-1, PosZ-1, 0, 82, false);");
code("trPaintTerrain(posX-1, PosZ, posX-1, PosZ, 0, 74, false);");
code("trPaintTerrain(posX-1, PosZ+1, posX-1, PosZ+1, 0, 83, false);");
code("trPaintTerrain(posX, PosZ+1, posX, PosZ+1, 0, 75, false);");
code("trPaintTerrain(posX, PosZ, posX, PosZ, terrainType, terrainSubType, false);");
code("}");
code("void CounterShow(int xx = 0){");
code("string colourString = \"<color={PlayerColor(\"+xx+\")}>\";");
code("string incomeString = \"Income: \"+1*trQuestVarGet(\"P\"+xx+\"Income\")+\" | Lives: \"+1*trQuestVarGet(\"P\"+xx+\"Lives\");");
code("string LivesString = \"\"+1*trQuestVarGet(\"P\"+xx+\"Lives\")+\" | \"+1*trQuestVarGet(\"P\"+xx+\"Lives\");");
code("string iconString = \"<icon=(16)(icons/icon resource wood)>\";");
code("trSetCounterDisplay(colourString+incomeString);");
code("}");
code("void ColouredTimer(int c = 0, string text = \"\", int time = 0, string name = \"countdown\", int eventID = -1){");
code("string colourString = \"<color={PlayerColor(\"+c+\")}>\";");
code("trCounterAddTime(name, time, 0, colourString + text, eventID);");
code("}");
code("void ColouredIconTimer(int c = 0, string icon =\"\", string text = \"\", int time = 0, string name = \"countdown\",");
code("int eventID = -1){");
code("string colourString = \"<color={PlayerColor(\"+c+\")}>\";");
code("string iconString = \"<icon=(20)(\"+icon+\")>\";");
code("trCounterAddTime(name, time, 0, colourString + iconString + text, eventID);");
code("}");
code("void OverlayTextPlayerColor(int p = 0){");
code("if(p == 0)trOverlayTextColour(153, 102, 0);");
code("if(p == 1)trOverlayTextColour(50, 50, 255);");
code("if(p == 2)trOverlayTextColour(255, 50, 50);");
code("if(p == 3)trOverlayTextColour(0, 150, 0);");
code("if(p == 4)trOverlayTextColour(50, 235, 255);");
code("if(p == 5)trOverlayTextColour(223, 52, 238);");
code("if(p == 6)trOverlayTextColour(255, 255, 0);");
code("if(p == 7)trOverlayTextColour(255, 102, 0);");
code("if(p == 8)trOverlayTextColour(128, 0, 64);");
code("if(p == 9)trOverlayTextColour(50, 255, 50);");
code("if(p == 10)trOverlayTextColour(179, 251, 186);");
code("if(p == 11)trOverlayTextColour(80, 80, 80);");
code("if(p == 12)trOverlayTextColour(255, 0, 102);");
code("}");
code("void UnitCreate(int xplayerx = 0, string protounitname = \"\", int xx = 0, int zz = 0, int xheadingx = 0){");
code("trQuestVarSet(\"CreatingU\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+xplayerx+\",0\", \"Dwarf\", 1, xx, 0, zz, xheadingx, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"CreatingU\"));");
code("trUnitChangeProtoUnit(protounitname);");
code("}");
code("void UnitCreateV(int xplayerx = 0, string protounitname = \"\", vector pos = vector(0,0,0), int xheadingx = 0){");
code("trQuestVarSet(\"CreatingU\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+xplayerx+\",0\", \"Dwarf\", 1, xsVectorGetX(pos), 0, xsVectorGetZ(pos), xheadingx, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"CreatingU\"));");
code("trUnitChangeProtoUnit(protounitname);");
code("}");
code("void FloatingUnit(string protounitname=\"\", int xx = 0, int yy = 0, int zz = 0, int xheadingx = 0, float scalex = 1,");
code("float scaley = 1, float scalez = 1){");
code("trQuestVarSet(\"BuildID\", trQuestVarGet(\"BuildID\") + 1);");
code("trQuestVarSet(\"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVHero\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Dwarf\", 1, xx, yy, zz, xheadingx, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"));");
code("trUnitChangeProtoUnit(\"Amanra\");");
code("trQuestVarSet(\"QVRelic\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Relic\", 1, xx, yy, zz, trQuestVarGet(\"Heading\"+(1*trQuestVarGet(\"Build\"))+\"\"), true);");
code("trQuestVarCopy(\"QVHero\", \"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\");");
code("trVectorQuestVarSet(\"V1\", kbGetBlockPosition(\"0\"));");
code("trVectorQuestVarSet(\"V1\", xsVectorSet(trVectorQuestVarGetX(\"V1\") + xx,");
code("yy,trVectorQuestVarGetZ(\"V1\") + zz));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"));");
code("trImmediateUnitGarrison(\"\"+(1*trQuestVarGet(\"QVHero\"))+\"\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+protounitname+\"\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trQuestVarSet(\"Build\", trQuestVarGet(\"Build\") - 1);");
code("trUnitTeleport(trVectorQuestVarGetX(\"V1\"),trVectorQuestVarGetY(\"V1\"),trVectorQuestVarGetZ(\"V1\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"), true);");
code("trSetSelectedScale(scalex, scaley, scalez);");
code("trUnitSetAnimationPath(\"1,0,0,0,0\");");
code("}");
code("void FloatingUnitAnim(string protounitname=\"\", int xx = 0, int yy = 0, int zz = 0, int xheadingx = 0,");
code("float scalex = 1, float scaley = 1, float scalez = 1, string anim=\"0,0,0,0,0\"){");
code("trArmyDispatch(\"0,0\", \"Revealer\", 1, xx, yy, zz, xheadingx, true);");
code("trQuestVarSet(\"BuildID\", trQuestVarGet(\"BuildID\") + 1);");
code("trQuestVarSet(\"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVHero\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Dwarf\", 1, xx, yy, zz, xheadingx, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"));");
code("trUnitChangeProtoUnit(\"Amanra\");");
code("trQuestVarSet(\"QVRelic\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Relic\", 1, xx, yy, zz, trQuestVarGet(\"Heading\"+(1*trQuestVarGet(\"Build\"))+\"\"), true);");
code("trQuestVarCopy(\"QVHero\", \"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\");");
code("trVectorQuestVarSet(\"V1\", kbGetBlockPosition(\"0\"));");
code("trVectorQuestVarSet(\"V1\", xsVectorSet(trVectorQuestVarGetX(\"V1\") + xx,");
code("yy,trVectorQuestVarGetZ(\"V1\") + zz));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"));");
code("trImmediateUnitGarrison(\"\"+(1*trQuestVarGet(\"QVHero\"))+\"\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+protounitname+\"\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trQuestVarSet(\"Build\", trQuestVarGet(\"Build\") - 1);");
code("trUnitTeleport(trVectorQuestVarGetX(\"V1\"),trVectorQuestVarGetY(\"V1\"),trVectorQuestVarGetZ(\"V1\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"), true);");
code("trSetSelectedScale(scalex, scaley, scalez);");
code("trUnitSetAnimationPath(\"\"+anim+\"\");");
code("}");
code("void FloatingUnitAnimNoLOS(string protounitname=\"\", int xx = 0, int yy = 0, int zz = 0, int xheadingx = 0,");
code("float scalex = 1, float scaley = 1, float scalez = 1, string anim=\"0,0,0,0,0\"){");
code("trQuestVarSet(\"BuildID\", trQuestVarGet(\"BuildID\") + 1);");
code("trQuestVarSet(\"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVHero\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Flying Medic\", 1, xx, yy, zz, xheadingx, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"));");
code("trUnitChangeProtoUnit(\"Amanra\");");
code("trQuestVarSet(\"QVRelic\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Relic\", 1, xx, yy, zz, trQuestVarGet(\"Heading\"+(1*trQuestVarGet(\"Build\"))+\"\"), true);");
code("trQuestVarCopy(\"QVHero\", \"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\");");
code("trVectorQuestVarSet(\"V1\", kbGetBlockPosition(\"0\"));");
code("trVectorQuestVarSet(\"V1\", xsVectorSet(trVectorQuestVarGetX(\"V1\") + xx,");
code("yy,trVectorQuestVarGetZ(\"V1\") + zz));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"));");
code("trImmediateUnitGarrison(\"\"+(1*trQuestVarGet(\"QVHero\"))+\"\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+protounitname+\"\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trQuestVarSet(\"Build\", trQuestVarGet(\"Build\") - 1);");
code("trUnitTeleport(trVectorQuestVarGetX(\"V1\"),trVectorQuestVarGetY(\"V1\"),trVectorQuestVarGetZ(\"V1\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"), true);");
code("trSetSelectedScale(scalex, scaley, scalez);");
code("trUnitSetAnimationPath(\"\"+anim+\"\");");
code("}");
code("void FloatingUnitAnimCiv(string protounitname=\"\", int xx = 0, int yy = 0, int zz = 0, int xheadingx = 0,");
code("float scalex = 1, float scaley = 1, float scalez = 1, string anim=\"0,0,0,0,0\"){");
code("trArmyDispatch(\"0,0\", \"Revealer\", 1, xx, yy, zz, xheadingx, true);");
code("trQuestVarSet(\"BuildID\", trQuestVarGet(\"BuildID\") + 1);");
code("trQuestVarSet(\"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVHero\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Revealer\", 1, xx, yy, zz, xheadingx, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"));");
code("trUnitChangeProtoUnit(\"Amanra\");");
code("trQuestVarSet(\"QVRelic\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Relic\", 1, xx, yy, zz, trQuestVarGet(\"Heading\"+(1*trQuestVarGet(\"Build\"))+\"\"), true);");
code("trQuestVarCopy(\"QVHero\", \"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\");");
code("trVectorQuestVarSet(\"V1\", kbGetBlockPosition(\"0\"));");
code("trVectorQuestVarSet(\"V1\", xsVectorSet(trVectorQuestVarGetX(\"V1\") + xx,");
code("trVectorQuestVarGetY(\"V1\") + yy,trVectorQuestVarGetZ(\"V1\") + zz));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"));");
code("trImmediateUnitGarrison(\"\"+(1*trQuestVarGet(\"QVHero\"))+\"\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+protounitname+\"\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trQuestVarSet(\"Build\", trQuestVarGet(\"Build\") - 1);");
code("trUnitTeleport(trVectorQuestVarGetX(\"V1\"),trVectorQuestVarGetY(\"V1\"),trVectorQuestVarGetZ(\"V1\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"), true);");
code("trSetSelectedScale(scalex, scaley, scalez);");
code("}");
code("void FloatingUnitAnim4(string protounitname=\"\", int xx = 0, int yy = 0, int zz = 0, int xheadingx = 0,");
code("float scalex = 1, float scaley = 1, float scalez = 1, string anim=\"0,0,0,0,0\", int p = 0){");
code("trArmyDispatch(\"\"+p+\",0\", \"Revealer\", 1, xx, yy, zz, xheadingx, true);");
code("trQuestVarSet(\"BuildID\", trQuestVarGet(\"BuildID\") + 1);");
code("trQuestVarSet(\"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVHero\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\", \"Flying Medic\", 1, xx, yy, zz, xheadingx, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"));");
code("trUnitChangeProtoUnit(\"Amanra\");");
code("trQuestVarSet(\"QVRelic\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\", \"Relic\", 1, xx, yy, zz, trQuestVarGet(\"Heading\"+(1*trQuestVarGet(\"Build\"))+\"\"), true);");
code("trQuestVarCopy(\"QVHero\", \"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\");");
code("trVectorQuestVarSet(\"V1\", kbGetBlockPosition(\"0\"));");
code("trVectorQuestVarSet(\"V1\", xsVectorSet(trVectorQuestVarGetX(\"V1\") + xx,");
code("yy,trVectorQuestVarGetZ(\"V1\") + zz));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"));");
code("trImmediateUnitGarrison(\"\"+(1*trQuestVarGet(\"QVHero\"))+\"\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+protounitname+\"\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trQuestVarSet(\"Build\", trQuestVarGet(\"Build\") - 1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"), true);");
code("trSetSelectedScale(scalex, scaley, scalez);");
code("trUnitSetAnimationPath(\"\"+anim+\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trUnitTeleport(trVectorQuestVarGetX(\"V1\"),yy,trVectorQuestVarGetZ(\"V1\"));");
code("}");
code("void FloatingUnitAnim5(string protounitname=\"\", int xx = 0, int yy = 0, int zz = 0, int xheadingx = 0,");
code("float scalex = 1, float scaley = 1, float scalez = 1, string anim=\"0,0,0,0,0\", int p = 0){");
code("trArmyDispatch(\"\"+p+\",0\", \"Revealer\", 1, xx, yy, zz, xheadingx, true);");
code("trQuestVarSet(\"BuildID\", trQuestVarGet(\"BuildID\") + 1);");
code("trQuestVarSet(\"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVHero\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\", \"Flying Medic\", 1, xx, yy, zz, xheadingx, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"));");
code("trUnitChangeProtoUnit(\"Amanra\");");
code("trQuestVarSet(\"QVRelic\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\", \"Relic\", 1, xx, yy, zz, trQuestVarGet(\"Heading\"+(1*trQuestVarGet(\"Build\"))+\"\"), true);");
code("trQuestVarCopy(\"QVHero\", \"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\");");
code("trVectorQuestVarSet(\"V1\", xsVectorSet(xx, yy, zz));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"));");
code("trImmediateUnitGarrison(\"\"+(1*trQuestVarGet(\"QVHero\"))+\"\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+protounitname+\"\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trQuestVarSet(\"Build\", trQuestVarGet(\"Build\") - 1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"), true);");
code("trSetSelectedScale(scalex, scaley, scalez);");
code("trUnitSetAnimationPath(\"\"+anim+\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trUnitTeleport(trVectorQuestVarGetX(\"V1\"),trVectorQuestVarGetY(\"V1\"),trVectorQuestVarGetZ(\"V1\"));");
code("}");
code("void FloatingUnitAnim2(string protounitname=\"\", int xx = 0, int yy = 0, int zz = 0, int xheadingx = 0,");
code("float scalex = 1, float scaley = 1, float scalez = 1, string anim=\"0,0,0,0,0\"){");
code("trArmyDispatch(\"0,0\", \"Revealer\", 1, xx, yy, zz, xheadingx, true);");
code("trQuestVarSet(\"BuildID\", trQuestVarGet(\"BuildID\") + 1);");
code("trQuestVarSet(\"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVHero\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Flying Medic\", 1, 50, yy, 50, xheadingx, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"));");
code("trUnitChangeProtoUnit(\"Amanra\");");
code("trQuestVarSet(\"QVRelic\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Relic\", 1, 50, yy, 50, trQuestVarGet(\"Heading\"+(1*trQuestVarGet(\"Build\"))+\"\"), true);");
code("trQuestVarCopy(\"QVHero\", \"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\");");
code("trVectorQuestVarSet(\"V1\", kbGetBlockPosition(\"0\"));");
code("trVectorQuestVarSet(\"V1\", xsVectorSet(trVectorQuestVarGetX(\"V1\") + xx,");
code("trVectorQuestVarGetY(\"V1\") + yy,trVectorQuestVarGetZ(\"V1\") + zz));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"));");
code("trImmediateUnitGarrison(\"\"+(1*trQuestVarGet(\"QVHero\"))+\"\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+protounitname+\"\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trQuestVarSet(\"Build\", trQuestVarGet(\"Build\") - 1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"), true);");
code("trSetSelectedScale(scalex, scaley, scalez);");
code("trUnitSetAnimationPath(\"\"+anim+\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trUnitTeleport(trVectorQuestVarGetX(\"V1\"),trVectorQuestVarGetY(\"V1\"),trVectorQuestVarGetZ(\"V1\"));");
code("}");
code("void FloatingUnitAnimIdle(string protounitname=\"\", int xx = 0, int yy = 0, int zz = 0, int xheadingx = 0,");
code("float scalex = 1, float scaley = 1, float scalez = 1, string anim=\"0,0,0,0,0\", int animtype = 2){");
code("float currentheight = 0.0;");
code("trQuestVarSet(\"BuildID\", trQuestVarGet(\"BuildID\") + 1);");
code("trQuestVarSet(\"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVHero\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Dwarf\", 1, xx, yy, zz, xheadingx, true);");
code("vector temp = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"QVHero\"));");
code("currentheight = xsVectorGetY(temp);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"));");
code("trUnitChangeProtoUnit(\"Amanra\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"));");
code("trUnitOverrideAnimation(animtype, 0, true, true, -1, 0);");
code("trQuestVarSet(\"QVRelic\"+(1*trQuestVarGet(\"BuildID\"))+\"\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"QVRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\", \"Ajax\", 1, xx, yy, zz, trQuestVarGet(\"Heading\"+(1*trQuestVarGet(\"Build\"))+\"\"), true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"));");
code("trUnitOverrideAnimation(animtype, 0, true, true, -1, 0);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trQuestVarCopy(\"QVHero\", \"QVHero\"+(1*trQuestVarGet(\"BuildID\"))+\"\");");
code("trVectorQuestVarSet(\"V1\", kbGetBlockPosition(\"0\"));");
code("trVectorQuestVarSet(\"V1\", xsVectorSet(trVectorQuestVarGetX(\"V1\") + xx,");
code("yy + currentheight,trVectorQuestVarGetZ(\"V1\") + zz));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"));");
code("trImmediateUnitGarrison(\"\"+(1*trQuestVarGet(\"QVHero\"))+\"\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+protounitname+\"\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trQuestVarSet(\"Build\", trQuestVarGet(\"Build\") - 1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVRelic\"), true);");
code("trSetSelectedScale(scalex, scaley, scalez);");
code("trUnitSetAnimationPath(\"\"+anim+\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"QVHero\"), true);");
code("trUnitTeleport(trVectorQuestVarGetX(\"V1\"),trVectorQuestVarGetY(\"V1\"),trVectorQuestVarGetZ(\"V1\"));");
code("}");
code("void paintTreesSlow(string terrain = \"\", string tree = \"\", int xmin = 0, int zmin = 0, int xmax = 0, int zmax = 0){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("trPaintTerrain(xmin, zmin, xmax, zmax, terrainType, terrainSubType, false);");
code("for (x=xmax; >= xmin) {");
code("for (z=zmax; >= zmin) {");
code("trQuestVarSetFromRand(\"heading\", 0, 359, true);");
code("trArmyDispatch(\"0,0\", \"Victory Marker\", 1, x*2, 5.00, z*2, 1*trQuestVarGet(\"Heading\"), false);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"0\");");
code("trUnitChangeInArea(0, 0, \"Victory Marker\", tree, 999.0);");
code("}");
code("void trQuestVarModify(string QV = \"\", string Operator = \"\", int number = 0){");
code("if(Operator == \"+\"){");
code("trQuestVarSet(QV, 1*trQuestVarGet(QV) + number);");
code("}");
code("else if(Operator == \"-\"){");
code("trQuestVarSet(QV, 1*trQuestVarGet(QV) - number);");
code("}");
code("else if(Operator == \"*\"){");
code("trQuestVarSet(QV, 1*trQuestVarGet(QV) * number);");
code("}");
code("else if(Operator == \"/\"){");
code("trQuestVarSet(QV, 1*trQuestVarGet(QV) / number);");
code("}");
code("}");
code("void trPaintTerrainCircle(int posX = 0, int PosZ = 0, int irad = 0, int type = 0, int subtype = 0){");
code("for(tempType = -1; > 1){}");
code("for(tempSubType = -1; > 1){}");
code("for(tempMinX = 0; > 1){}");
code("for(tempMinZ = 0; > 1){}");
code("for(tempMaxX = 0; > 1){}");
code("for(tempMaxZ = 0; > 1){}");
code("for(tempX = 0; > 1){}");
code("for(tempZ = 0; > 1){}");
code("for(tempRadiusCheck = 0; > 1){}");
code("for(tempOldContextPlayer = 0; > 1){}");
code("tempMinX = xsMax(0.0 - posX, -1*irad );");
code("tempMinZ = xsMax(0.0 - PosZ, -1*irad );");
code("tempOldContextPlayer = xsGetContextPlayer();");
code("xsSetContextPlayer(0);");
code("tempMaxX = xsMin(kbGetMapXSize() / 2 - posX - 1, irad );");
code("tempMaxZ = xsMin(kbGetMapZSize() / 2 - PosZ - 1, irad );");
code("xsSetContextPlayer(tempOldContextPlayer);");
code("tempRadiusCheck = irad  * irad  + irad ;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck > (tempX*tempX + tempZ*tempZ)){");
code("trPaintTerrain(tempX + posX, tempZ + PosZ, tempX + posX, tempZ + PosZ, type, subtype, false);");
code("}");
code("}");
code("}");
code("}");
code("void trPaintTerrainCircleOutline(int posX = 0, int PosZ = 0, int irad = 0, int type = 0, int subtype = 0){");
code("for(tempType = -1; > 1){}");
code("for(tempSubType = -1; > 1){}");
code("for(tempMinX = 0; > 1){}");
code("for(tempMinZ = 0; > 1){}");
code("for(tempMaxX = 0; > 1){}");
code("for(tempMaxZ = 0; > 1){}");
code("for(tempX = 0; > 1){}");
code("for(tempZ = 0; > 1){}");
code("for(tempRadiusCheck = 0; > 1){}");
code("for(tempOldContextPlayer = 0; > 1){}");
code("tempMinX = xsMax(0.0 - posX, -1*irad );");
code("tempMinZ = xsMax(0.0 - PosZ, -1*irad );");
code("tempOldContextPlayer = xsGetContextPlayer();");
code("xsSetContextPlayer(0);");
code("tempMaxX = xsMin(kbGetMapXSize() / 2 - posX - 1, irad );");
code("tempMaxZ = xsMin(kbGetMapZSize() / 2 - PosZ - 1, irad );");
code("xsSetContextPlayer(tempOldContextPlayer);");
code("tempRadiusCheck = irad  * irad  + irad ;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck <= (tempX*tempX + tempZ*tempZ)){");
code("trPaintTerrain(tempX + posX, tempZ + PosZ, tempX + posX, tempZ + PosZ, type, subtype, false);");
code("}");
code("}");
code("}");
code("}");
code("void replaceCircle(int posX = 0, int PosZ = 0, int radius = 0, string oldTerrain = \"\", string newTerrain = \"\"){");
code("int oldTerrainType = getTerrainType(oldTerrain);");
code("int oldTerrainSubType = getTerrainSubType(oldTerrain);");
code("int newTerrainType = getTerrainType(newTerrain);");
code("int newTerrainSubType = getTerrainSubType(newTerrain);");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - PosZ, 0.0 - radius);");
code("int tempMaxX = xsMin(200 - posX, radius);");
code("int tempMaxZ = xsMin(200 - PosZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("int terrainType = trGetTerrainType(tempX + posX, tempZ + PosZ);");
code("int terrainSubType = trGetTerrainSubType(tempX + posX, tempZ + PosZ);");
code("if(terrainType == oldTerrainType && terrainSubType == oldTerrainSubType){");
code("trPaintTerrain(tempX + posX, tempZ + PosZ, tempX + posX, tempZ + PosZ, newTerrainType, newTerrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void replaceCircleOutline(int posX = 0, int PosZ = 0, int radius = 0, string newTerrain = \"\", string oldTerrain = \"\",");
code("int ignore = 0){");
code("ignore = radius-2;");
code("int oldTerrainType = getTerrainType(oldTerrain);");
code("int oldTerrainSubType = getTerrainSubType(oldTerrain);");
code("int newTerrainType = getTerrainType(newTerrain);");
code("int newTerrainSubType = getTerrainSubType(newTerrain);");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - PosZ, 0.0 - radius);");
code("int tempMaxX = xsMin(200 - posX, radius);");
code("int tempMaxZ = xsMin(200 - PosZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("int tempRadiusCheck2 = ignore * ignore + ignore;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("if(tempRadiusCheck2 < (tempX*tempX + tempZ*tempZ)){");
code("int terrainType = trGetTerrainType(tempX + posX, tempZ + PosZ);");
code("int terrainSubType = trGetTerrainSubType(tempX + posX, tempZ + PosZ);");
code("if(terrainType == oldTerrainType && terrainSubType == oldTerrainSubType){");
code("trPaintTerrain(tempX + posX, tempZ + PosZ, tempX + posX, tempZ + PosZ, newTerrainType, newTerrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void trPaintElevationCircle(int PosX = 0, int PosZ = 0, int Rad = 0, int Height = 0){");
code("for(tempMinX = 0; > 1){}");
code("for(tempMinZ = 0; > 1){}");
code("for(tempMaxX = 0; > 1){}");
code("for(tempMaxZ = 0; > 1){}");
code("for(tempRadiusCheck = 0; > 1){}");
code("for(tempLocX = 0; > 1){}");
code("for(tempLocZ = 0; > 1){}");
code("for(tempOldContextPlayer = 0; > 1){}");
code("tempMinX = xsMax(0.0 - PosX, -1*Rad);");
code("tempMinZ = xsMax(0.0 - PosZ, -1*Rad);");
code("tempOldContextPlayer = xsGetContextPlayer();");
code("xsSetContextPlayer(0);");
code("tempMaxX = xsMin(kbGetMapXSize() / 2 - PosX, Rad);");
code("tempMaxZ = xsMin(kbGetMapZSize() / 2 - PosZ, Rad);");
code("xsSetContextPlayer(tempOldContextPlayer);");
code("tempRadiusCheck = Rad * Rad + Rad;");
code("if(false){");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck > (tempX*tempX + tempZ*tempZ)){");
code("tempLocX = tempX + PosX;");
code("tempLocZ = tempZ + PosZ;");
code("trChangeTerrainHeight(tempLocX, tempLocZ, tempLocX, tempLocZ, trGetTerrainHeight(tempLocX, tempLocZ) + Height, false);");
code("}");
code("}");
code("}");
code("} else {");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("tempLocX = tempX + PosX;");
code("tempLocZ = tempZ + PosZ;");
code("trChangeTerrainHeight(tempLocX, tempLocZ, tempLocX, tempLocZ, Height, false);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void CTFPaintBase(float PosX = 0, float PosZ = 0){");
code("trPaintTerrainCircle(PosX/2+7,PosZ/2+8,10,2,13);");
code("trPaintElevationCircle(PosX/2+7,PosZ/2+7,11,5);");
code("}");
code("void CTFBuildBase(int p = 1, float PosX = 0, float PosZ = 0){");
code("trQuestVarSet(\"Base\", trGetNextUnitScenarioNameNumber());");
code("trVectorQuestVarSet(\"P\"+p+\"Base\", xsVectorSet(PosX+15, 5, PosZ+15));");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+14, 0, PosZ+15, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX, 0, PosZ+10, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX, 0, PosZ+15, 90, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX, 0, PosZ+20, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+4, 0, PosZ+24, 135, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+8, 0, PosZ+28, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+13, 0, PosZ+28, 180, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+18, 0, PosZ+28, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+22, 0, PosZ+24, 225, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+26, 0, PosZ+20, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+26, 0, PosZ+15, 270, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+26, 0, PosZ+10, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+22, 0, PosZ+6, 315, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+18, 0, PosZ+2, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+12, 0, PosZ+2, 180, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+8, 0, PosZ+2, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+4, 0, PosZ+6, 45, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+11, 0, PosZ+14, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+11, 0, PosZ+16, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+13, 0, PosZ+14, 0, false);");
code("trArmyDispatch(\"\"+p+\",0\", \"Victory Marker\", 1, PosX+13, 0, PosZ+16, 0, false);");
code("yAddToDatabase(\"BaseBlocks\", \"Base\");");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Connector\");");
code("trVectorQuestVarSet(\"P\"+p+\"FlagSlot8\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"Base\")+\"\"));");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Long\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Connector\");");
code("trVectorQuestVarSet(\"P\"+p+\"FlagSlot7\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"Base\")+\"\"));");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Gate\");");
code("yAddToDatabase(\"Gates\", \"Base\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Connector\");");
code("trVectorQuestVarSet(\"P\"+p+\"FlagSlot6\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"Base\")+\"\"));");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Long\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Connector\");");
code("trVectorQuestVarSet(\"P\"+p+\"FlagSlot5\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"Base\")+\"\"));");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Gate\");");
code("yAddToDatabase(\"Gates\", \"Base\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Connector\");");
code("trVectorQuestVarSet(\"P\"+p+\"FlagSlot4\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"Base\")+\"\"));");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Long\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Connector\");");
code("trVectorQuestVarSet(\"P\"+p+\"FlagSlot3\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"Base\")+\"\"));");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Gate\");");
code("yAddToDatabase(\"Gates\", \"Base\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Connector\");");
code("trVectorQuestVarSet(\"P\"+p+\"FlagSlot2\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"Base\")+\"\"));");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Long\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Atlantis Wall Connector\");");
code("trVectorQuestVarSet(\"P\"+p+\"FlagSlot1\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"Base\")+\"\"));");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Gate\");");
code("yAddToDatabase(\"Gates\", \"Base\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Tower Mirror\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Tower Mirror\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Tower Mirror\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Base\", \"+\", 1);");
code("trUnitSelectByQV(\"Base\", false);");
code("trUnitChangeProtoUnit(\"Tower Mirror\");");
code("trUnitSelectClear();");
code("trUnitSelectByID(p);");
code("trUnitTeleport(trVectorQuestVarGetX(\"P\"+p+\"Base\"),");
code("trVectorQuestVarGetY(\"P\"+p+\"Base\"),trVectorQuestVarGetZ(\"P\"+p+\"Base\"));");
code("trUnitChangeProtoUnit(\"Storage Pit\");");
code("}");
code("void playSoundCustom(string BasesoundName = \"\", string CustomsoundName = \"\"){");
code("if(1*trQuestVarGet(\"CustomContent\") == 0){");
code("trSoundPlayPaused(\"\"+BasesoundName+\"\", \"1\", -1, \"\", \"\");");
code("}");
code("else {");
code("trSoundPlayPaused(\"\"+CustomsoundName+\"\", \"1\", -1, \"\", \"\");");
code("}");
code("}");
code("void ColouredIconChat(string colour = \"1,1,1\", string icon = \"\", string chats = \"\"){");
code("trChatSend(0, \"<color=\"+colour+\"><icon=(20)(\"+icon+\")> \"+chats+\"</color>\");");
code("}");
code("void ColouredChat(string colour = \"1,1,1\", string chats = \"\"){");
code("trChatSend(0, \"<color=\"+colour+\">\"+chats+\"</color>\");");
code("}");
code("void PlayerColouredChat(int p = 0, string chats = \"\"){");
code("trChatSend(0, \"<color={PlayerColor(\"+p+\")}> \"+chats+\"</color>\");");
code("}");
code("void PlayerColouredChatToSelf(int p = 0, string chats = \"\"){");
code("trChatSendToPlayer(0, p, \"<color={PlayerColor(\"+p+\")}> \"+chats+\"</color>\");");
code("}");
code("void ColouredChatToPlayer(int p = 0, string colour = \"1,1,1\", string chats = \"\"){");
code("trChatSendToPlayer(0, p, \"<color=\"+colour+\">\"+chats+\"</color>\");");
code("}");
code("void ColouredIconChatToPlayer(int p = 1, string colour = \"1,1,1\", string icon = \"\", string chats = \"\"){");
code("trChatSendToPlayer(0, p, \"<color=\" + colour + \"><icon=(20)(\" + icon + \")> \" + chats + \"</color>\");");
code("}");
code("void PwnPlayer(int p = 0, int v = 0){");
code("trSetPlayerDefeated(p);");
code("OverlayTextPlayerColor(p);");
code("trOverlayText(trStringQuestVarGet(\"p\"+p+\"name\") + \"'s flag has been captured!\", 5.0, 350, 350, 800);");
code("playSound(\"Yeebaagooon\Capture The Flag\Warp.mp3\");");
code("playSound(\"timeshift.wav\");");
code("trCameraShake(5, 0.1);");
code("trPlayerKillAllBuildings(p);");
code("trPlayerKillAllUnits(p);");
code("trUnitSelectClear();");
code("trUnitSelect(\"+p+\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trPlayerGrantResources(v, \"Food\", 1*trPlayerResourceCount(p, \"Food\"));");
code("trPlayerGrantResources(v, \"Wood\", 1*trPlayerResourceCount(p, \"Wood\"));");
code("trPlayerGrantResources(v, \"Gold\", 1*trPlayerResourceCount(p, \"Gold\"));");
code("ColouredIconChatToPlayer(v, \"{PlayerColor(\"+p+\")}\", \"icons\icon resource food\",");
code("\"\"+1*trPlayerResourceCount(p, \"Food\")+\"\");");
code("ColouredIconChatToPlayer(v, \"{PlayerColor(\"+p+\")}\", \"icons\icon resource wood\",");
code("\"\"+1*trPlayerResourceCount(p, \"Wood\")+\"\");");
code("ColouredIconChatToPlayer(v, \"{PlayerColor(\"+p+\")}\", \"icons\icon resource gold\",");
code("\"\"+1*trPlayerResourceCount(p, \"Gold\")+\"\");");
code("trPlayerGrantResources(p, \"Food\", -10000.0);");
code("trPlayerGrantResources(p, \"Wood\", -10000.0);");
code("trPlayerGrantResources(p, \"Gold\", -10000.0);");
code("trPlayerGrantResources(p, \"Favor\", -10000.0);");
code("trQuestVarModify(\"P\"+v+\"FlagsGot\", \"+\", 1);");
code("if(1*trQuestVarGet(\"P\"+v+\"FlagsGot\") < 9){");
code("FloatingUnitAnim4(\"Flag\",");
code("1*trVectorQuestVarGetX(\"P\"+v+\"FlagSlot\"+1*trQuestVarGet(\"P\"+v+\"FlagsGot\")),");
code("1*trVectorQuestVarGetY(\"P\"+v+\"FlagSlot\"+1*trQuestVarGet(\"P\"+v+\"FlagsGot\")),");
code("1*trVectorQuestVarGetZ(\"P\"+v+\"FlagSlot\"+1*trQuestVarGet(\"P\"+v+\"FlagsGot\")),");
code("0, 1, 1, 1, \"0,0,0,0,0\", p);");
code("}");
code("}");
code("void PaintAtlantisArea (int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0, int fill1 = 0, int fill2 = 0){");
code("trPaintTerrain(x0, z1, x0, z1, 0, 83, false);");
code("trPaintTerrain(x1, z1, x1, z1, 0, 80, false);");
code("trPaintTerrain(x0, z0, x0, z0, 0, 82, false);");
code("trPaintTerrain(x1, z0, x1, z0, 0, 81, false);");
code("trPaintTerrain(x1-1, z1, x0+1, z1, 0, 75, false);");
code("trPaintTerrain(x1-1, z0, x0+1, z0, 0, 75, false);");
code("trPaintTerrain(x1, z1-1, x1, z0+1, 0, 74, false);");
code("trPaintTerrain(x0, z1-1, x0, z0+1, 0, 74, false);");
code("trPaintTerrain(x1-1, z1-1, x0+1, z0+1, fill1, fill2, false);");
code("}");
code("void trUnitSetVariation(int name = 0, int var = 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+name);");
code("trUnitSetAnimationPath(\"\"+(var)+\",0,0,0,0,0,0\");");
code("}");
code("vector HeadingToVector(int heading = 0){");
code("heading = heading*PI/180;");
code("vector hi = xsVectorSet(xsSin(heading),0,xsCos(heading));");
code("return(hi);");
code("}");
code("void trSetScale(int s = 0){");
code("trSetSelectedScale(s,s,s);");
code("}");
}
void globals() {
code("int cNumberNonGaiaPlayers = "+cNumberNonGaiaPlayers+";");
}
void intsstrings() {
code("int QuickStart = 5;");
code("bool LOS = false;");
code("bool AlwaysWin = true;");
code("bool PlayCine = true;");
code("string MapVersion = \"Test Version\";");
code("string MapName = \"Zoo Quest.xs\";");
code("string GazelleProto = \"Hero Greek Jason\";");
code("string RhinoProto = \"Ajax\";");
code("string RhinoDrinkProto = \"Physician\";");
code("vector StageVector = vector(0,0,0);");
code("vector EndPoint = vector(0,0,0);");
code("string LeaveTerrain = \"\";");
code("string GoatProto = \"Hero Greek Heracles\";");
code("string CrocProto = \"Villager Norse\";");
code("string ChickenProto = \"Hero Norse\";");
code("const int EVENT_BUILD_HOUSE = 28;");
code("const int EVENT_BUILD_GRANARY = 29;");
code("const int EVENT_BUILD_STOREHOUSE = 30;");
code("const int EVENT_REMOVE_CAM_TRACKS = 26;");
code("const int EVENT_BUILD_AT_CURSOR = 31;");
code("bool IGUnit = false;");
code("int IGName = 0;");
code("string unitcheck = \"\";");
code("float timediff = 0.0;");
code("int timelast = 0;");
code("int Stage = 0;");
code("int SkipRequired = 0;");
code("float timediff2 = 0.0;");
code("float timelast2 = 0.0;");
code("vector MapCentre = vector(0,0,0);");
code("int StageRequirement = 0;");
code("int StageScore = 0;");
code("int PlayersDead = 0;");
code("int FlagUnitID = 0;");
code("int FlagSFXID = 0;");
code("int ChestsFound = 0;");
code("int BerryTotal = 0;");
code("int ChestsTotal = 0;");
code("int CliffType = 2;");
code("int CliffSubType = 2;");
code("bool TutorialMode = false;");
code("int ActPart = 0;");
code("int PoachersDead = 0;");
code("int PoachersTarget = 0;");
code("int ShrinesGot = 0;");
code("int ShrinesMax = 0;");
code("int ShrineTimeMin = 80;");
code("int ShrineTarget = 0;");
code("int ShrineTimeMax = 200;");
code("int Zebras = 0;");
code("int CrocProgress = 0;");
code("int CrocTarget = 0;");
code("int ChickenLevel = 1;");
code("int DestroyNumber = 0;");
code("int NewDestroyNumber = 0;");
code("int DontDestroyBelow = 0;");
code("int PlayersActive = 10;");
code("int BerryTarget = 0;");
code("int PlayersMinigaming = 0;");
code("int PlayersReadyToLeave = 0;");
code("int MinigameWins = 0;");
code("int GlobalTimerMS = 0;");
code("bool InMinigame = false;");
code("bool MinigameFound = false;");
code("int FencesDone = 0;");
code("int SquaresDown = 0;");
code("int dPlayerData = 0;");
code("int xSpyID = 0;");
code("int xOldAnim = 0;");
code("int xTarget = 0;");
code("int xPlayerActive = 0;");
code("int xVectorHold = 0;");
code("int xStopDeath = 0;");
code("int xTeleportDue = 0;");
code("int xPlayerUnitID = 0;");
code("int xReadyToLeave = 0;");
code("int xConstantPos = 0;");
code("int xPlayerDead = 0;");
code("int xLogJumps = 0;");
code("int xCharge = 0;");
code("int xRhinoWalk = 0;");
code("int xRhinoRun = 0;");
code("int xHPRegen = 0;");
code("int xHPRegenTime = 0;");
code("int xHPRegenNext = 0;");
code("int xSecondSpy = 0;");
code("int xRhinoDrinkTime = 0;");
code("int xRhinoChargeTime = 0;");
code("int xRhinoChargeTimeMax = 0;");
code("int xGoatTarget = 0;");
code("int xGoatJumpDist = 0;");
code("int xTimeout = 0;");
code("int xSwimming = 0;");
code("int xCrocLandSpeed = 0;");
code("int xCrocWaterSpeed = 0;");
code("int xCrocSprintSpeed = 0;");
code("int xCrocBonusTime = 0;");
code("int xCrocBonusTimer = 0;");
code("int xCrocSprintRechargeTime = 0;");
code("int xCrocSprintRechargeTimer = 0;");
code("int xCrocSprintDuration = 0;");
code("int xCrocSprintEndTime = 0;");
code("int xCrocSprintState = 0;");
code("int xCrocSize = 0;");
code("int xCrocFood = 0;");
code("int xCrocNext = 0;");
code("int xQuestions = 0;");
code("int xQuestionsCorrect = 0;");
code("int xAnswer = 0;");
code("int xQuestionAnswer = 0;");
code("int xRelics = 0;");
code("int xCrocProto = 0;");
code("int xCrocRangedTime = 0;");
code("int xDeathVector = 0;");
code("int xTowerDamage = 0;");
code("int xTowerSpeed = 0;");
code("int xSpecialVector = 0;");
code("int xS5Kills = 0;");
code("int xS5E = 0;");
code("int xS5ERecharge = 0;");
code("int xTowerLimit = 0;");
code("int dDestroyMe = 0;");
code("int xDestroyName = 0;");
code("int xDestroyTime = 0;");
code("int xLandmineDamage = 0;");
code("int xLandmineRange = 0;");
code("rule setup_first_databases");
code("active");
code("highFrequency");
code("{");
code("dPlayerData = xInitDatabase(\"playerData\");");
code("xPlayerUnitID = xInitAddInt(dPlayerData, \"unit id\", 0);");
code("xSpyID = xInitAddInt(dPlayerData, \"Spy id\", 0);");
code("xOldAnim = xInitAddInt(dPlayerData, \"Anim id\", 0);");
code("xTarget = xInitAddInt(dPlayerData, \"target id\", 0);");
code("xPlayerActive = xInitAddBool(dPlayerData, \"player alive\", true);");
code("xVectorHold = xInitAddVector(dPlayerData, \"hold vector\", vector(0,0,0));");
code("xStopDeath = xInitAddBool(dPlayerData, \"player immortal\", false);");
code("xTeleportDue = xInitAddInt(dPlayerData, \"tp due\", 0);");
code("xPlayerUnitID = xInitAddInt(dPlayerData, \"unitId\", -1);");
code("xReadyToLeave = xInitAddBool(dPlayerData, \"leave area\", false);");
code("xConstantPos = xInitAddVector(dPlayerData, \"position\", vector(0,0,0));");
code("xPlayerDead = xInitAddBool(dPlayerData, \"dead\", false);");
code("xLogJumps = xInitAddInt(dPlayerData, \"jump\", 0);");
code("xCharge = xInitAddBool(dPlayerData, \"charge\", false);");
code("xRhinoWalk = xInitAddFloat(dPlayerData, \"rhino base speed\", 4.0);");
code("xRhinoRun = xInitAddFloat(dPlayerData, \"rhino run speed\", 9.5);");
code("xHPRegen = xInitAddInt(dPlayerData, \"hp regen\", 0);");
code("xHPRegenTime = xInitAddInt(dPlayerData, \"hp regen timer\", 0);");
code("xHPRegenNext = xInitAddInt(dPlayerData, \"hp regen counter\", 0);");
code("xSecondSpy = xInitAddInt(dPlayerData, \"spy id\", 0);");
code("xRhinoDrinkTime = xInitAddFloat(dPlayerData, \"drink time\", 5);");
code("xRhinoChargeTime = xInitAddFloat(dPlayerData, \"rhino charge\", 15);");
code("xRhinoChargeTimeMax = xInitAddInt(dPlayerData, \"rhino charge max\", 15);");
code("xGoatTarget = xInitAddVector(dPlayerData, \"goat target\", vector(0,0,0));");
code("xGoatJumpDist = xInitAddFloat(dPlayerData, \"goat jump dist\", 0.0);");
code("xTimeout = xInitAddInt(dPlayerData, \"goat jump timeout\", 1000);");
code("xSwimming = xInitAddBool(dPlayerData, \"swimming\", false);");
code("xCrocLandSpeed = xInitAddFloat(dPlayerData, \"croc land speed\", 3.0);");
code("xCrocWaterSpeed = xInitAddFloat(dPlayerData, \"croc swim speed\", 5.0);");
code("xCrocSprintSpeed = xInitAddFloat(dPlayerData, \"speed multiply\", 1.5);");
code("xCrocBonusTime = xInitAddInt(dPlayerData, \"xc\", 3);");
code("xCrocBonusTimer = xInitAddInt(dPlayerData, \"xc\", 30);");
code("xCrocSprintRechargeTime = xInitAddInt(dPlayerData, \"xc\", 20);");
code("xCrocSprintRechargeTimer = xInitAddInt(dPlayerData, \"xc\", 20);");
code("xCrocSprintDuration = xInitAddInt(dPlayerData, \"xc\", 2500);");
code("xCrocSprintEndTime = xInitAddInt(dPlayerData, \"the end time of the sprint\", 0);");
code("xCrocSprintState = xInitAddInt(dPlayerData, \"xc\", 0);");
code("xCrocSize = xInitAddInt(dPlayerData, \"xc\", 1);");
code("xCrocFood = xInitAddFloat(dPlayerData, \"xc\", 0);");
code("xCrocNext = xInitAddFloat(dPlayerData, \"next food\", 0);");
code("xQuestions = xInitAddInt(dPlayerData, \"qs mg\", 0);");
code("xQuestionsCorrect = xInitAddInt(dPlayerData, \"qs mg\", 0);");
code("xAnswer = xInitAddInt(dPlayerData, \"player answer\", -1);");
code("xQuestionAnswer = xInitAddInt(dPlayerData, \"correct answer\", -1);");
code("xRelics = xInitAddInt(dPlayerData, \"relics\", 0);");
code("xCrocProto = xInitAddString(dPlayerData, \"croc proto\", CrocProto);");
code("xCrocRangedTime = xInitAddInt(dPlayerData, \"rangetime\", 0);");
code("xDeathVector = xInitAddVector(dPlayerData, \"deathv\", vector(0,0,0));");
code("xTowerDamage = xInitAddInt(dPlayerData, \"towerdmg\", 5);");
code("xTowerSpeed = xInitAddFloat(dPlayerData, \"towerspeed\", 10);");
code("xSpecialVector = xInitAddVector(dPlayerData, \"sv\", vector(0,0,0));");
code("xS5Kills = xInitAddInt(dPlayerData, \"stage 5 kills\", 0);");
code("xLandmineDamage = xInitAddInt(dPlayerData, \"mine dmg\", 250);");
code("xLandmineRange = xInitAddInt(dPlayerData, \"mine dmg\", 4);");
code("xS5E = xInitAddInt(dPlayerData, \"specialshots\", 0);");
code("xS5ERecharge = xInitAddInt(dPlayerData, \"specialshotsrecharge\", 30);");
code("xTowerLimit = xInitAddInt(dPlayerData, \"tower build lim\", 10);");
code("for(p=1; <= cNumberNonGaiaPlayers) {");
code("xAddDatabaseBlock(dPlayerData, true);");
code("}");
code("dDestroyMe = xInitDatabase(\"destroyme\");");
code("xDestroyName = xInitAddInt(dDestroyMe, \"unit id\", -1);");
code("xDestroyTime = xInitAddInt(dDestroyMe, \"timeMS\", 1);");
code("xsDisableSelf();");
code("}");
}
void databases() {
code("int spysearch = 0;");
code("int spyreset = 0;");
code("int spyProto = 0;");
code("int spyUnit = 1;");
code("int spyDest = 2;");
code("int spyScale = 3;");
code("int spyActive = 4;");
code("int spyAnim = 5;");
code("int dSpyRequests = 0;");
code("int xSpyRequestProto = 0;");
code("int xSpyRequestDest = 0;");
code("int xSpyRequestScale = 0;");
code("int xSpyRequestAnim = 0;");
code("int xSpyRequestEvent = 0;");
code("int dBerryBush = 0;");
code("int dLogs = 0;");
code("int xUnitID = 0;");
code("int xUnitPos = 0;");
code("int dTiles1 = 0;");
code("int xTileX = 0;");
code("int xTileZ = 0;");
code("int xTileNumber = 0;");
code("int xTileType = 0;");
code("int xTileSubType = 0;");
code("int dTiles2 = 0;");
code("int dPoachers = 0;");
code("int xPoacherType = 0;");
code("int xMoveTime = 0;");
code("int dMissiles = 0;");
code("int xOwner = 0;");
code("int xMissilePos = 0;");
code("int xMissileDir = 0;");
code("int xMissileCentre = 0;");
code("int xMissilePrev = 0;");
code("int xMissileDmg = 0;");
code("int xMissileTime = 0;");
code("int dDots = 0;");
code("int xPercent = 0;");
code("int dChests = 0;");
code("int xKeyType = 0;");
code("int xUnlockUnitID = 0;");
code("int dKeys = 0;");
code("int xKeySFXID = 0;");
code("int dTemp = 0;");
code("int xExtra = 0;");
code("int dFences = 0;");
code("int xSegment = 0;");
code("int dIncomingMissiles = 0;");
code("int xMissileDest = 0;");
code("int xMissileSpyID = 0;");
code("int xMissileSpyOfSpyID = 0;");
code("int xMissileProto = 0;");
code("int xMissileCarProto = 0;");
code("int xMissileAnim = 0;");
code("int SpyDone = 0;");
code("int xIMissileDmg = 0;");
code("int xIMissileTime = 0;");
code("int dInterractables = 0;");
code("int xType = 0;");
code("int xSubtype = 0;");
code("int xSquare1 = 0;");
code("int xSquare2 = 0;");
code("int dEdibles = 0;");
code("int xTime1 = 0;");
code("int xTime2 = 0;");
code("int dShore = 0;");
code("int xShoreLoc = 0;");
code("int xShoreDist = 0;");
code("int dDirtA = 0;");
code("int xDirtLoc = 0;");
code("int dRiver = 0;");
code("int xRiverLoc = 0;");
code("int dHelp = 0;");
code("int xSubID = 0;");
code("int dRelics = 0;");
code("int dShop = 0;");
code("int xPower = 0;");
code("int xPowerName = 0;");
code("int xDecorationID = 0;");
code("int xCost = 0;");
code("int dEnemies = 0;");
code("int xMoved = 0;");
code("int dTowers = 0;");
code("int xConstructed = 0;");
code("int dHeldRelics = 0;");
code("int dFreeRelics = 0;");
code("int xRelicType = 0;");
code("int xRelicStat = 0;");
code("int xSFXID = 0;");
code("int xRelicLevel = 0;");
code("int dEnemyCollision = 0;");
code("int dMines = 0;");
code("int xMineSFX = 0;");
code("int dBurner = 0;");
code("rule initialise_spy_database");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("xsSetContextPlayer(0);");
code("dSpyRequests = xInitDatabase(\"spyRequests\", 32);");
code("xSpyRequestProto = xInitAddInt(dSpyRequests, \"proto\");");
code("xSpyRequestAnim = xInitAddInt(dSpyRequests, \"anim\");");
code("xSpyRequestScale = xInitAddVector(dSpyRequests, \"scale\");");
code("xSpyRequestDest = xInitAddVector(dSpyRequests, \"dest\");");
code("xSpyRequestEvent = xInitAddInt(dSpyRequests, \"event\");");
code("dBerryBush = xInitDatabase(\"Berries\");");
code("xUnitID = xInitAddInt(dBerryBush, \"unit id\");");
code("xUnitPos = xInitAddVector(dBerryBush, \"pos\");");
code("dLogs = xInitDatabase(\"Logs\");");
code("xUnitID = xInitAddInt(dLogs, \"unit id\");");
code("xUnitPos = xInitAddVector(dLogs, \"pos\");");
code("dTiles1 = xInitDatabase(\"Tileset\");");
code("xTileX = xInitAddInt(dTiles1, \"tx\", 0);");
code("xTileZ = xInitAddInt(dTiles1, \"tz\", 0);");
code("xTileNumber = xInitAddInt(dTiles1, \"number\", 0);");
code("xTileType = xInitAddInt(dTiles1, \"ttype\", 0);");
code("xTileSubType = xInitAddInt(dTiles1, \"tsubtype\", 0);");
code("dTiles2 = xInitDatabase(\"Tileset two\");");
code("xTileX = xInitAddInt(dTiles2, \"tx\", 0);");
code("xTileZ = xInitAddInt(dTiles2, \"tz\", 0);");
code("xTileNumber = xInitAddInt(dTiles2, \"number\", 0);");
code("xTileType = xInitAddInt(dTiles2, \"ttype\", 0);");
code("xTileSubType = xInitAddInt(dTiles2, \"tsubtype\", 0);");
code("dPoachers = xInitDatabase(\"Poachers\");");
code("xUnitID = xInitAddInt(dPoachers, \"unit id\");");
code("xMoveTime = xInitAddInt(dPoachers, \"time\", 0);");
code("xPoacherType = xInitAddString(dPoachers, \"protoid\", \"Throwing Axeman\");");
code("dMissiles = xInitDatabase(\"Missiles DB\");");
code("xUnitID = xInitAddInt(dMissiles, \"missile unit id\", -1);");
code("xOwner = xInitAddInt(dMissiles, \"missile owner\", 0);");
code("xMissilePos = xInitAddVector(dMissiles, \"position\", vector(0,0,0));");
code("xMissileDir = xInitAddVector(dMissiles, \"direction\", vector(0,0,0));");
code("xMissilePrev = xInitAddVector(dMissiles, \"prev\", vector(0,0,0));");
code("xMissileDmg = xInitAddInt(dMissiles, \"dmg\", 1);");
code("xMissileTime = xInitAddInt(dMissiles, \"time\", 10000);");
code("dIncomingMissiles = xInitDatabase(\"Incoming DB\");");
code("xUnitID = xInitAddInt(dIncomingMissiles, \"missile unit id\", -1);");
code("xOwner = xInitAddInt(dIncomingMissiles, \"missile owner\", cNumberNonGaiaPlayers);");
code("xMissilePos = xInitAddVector(dIncomingMissiles, \"position\", vector(0,0,0));");
code("xMissileDir = xInitAddVector(dIncomingMissiles, \"direction\", vector(0,0,0));");
code("xMissileSpyID = xInitAddInt(dIncomingMissiles, \"spy name\", -1);");
code("xMissileSpyOfSpyID = xInitAddInt(dIncomingMissiles, \"spy of spy\", -1);");
code("xMissileProto = xInitAddInt(dIncomingMissiles, \"proto id\", -1);");
code("xMissileCarProto = xInitAddInt(dIncomingMissiles, \"car id\", -1);");
code("xMissileAnim = xInitAddInt(dIncomingMissiles, \"anim\", 0);");
code("SpyDone = xInitAddBool(dIncomingMissiles, \"spy done\", false);");
code("xIMissileDmg = xInitAddInt(dIncomingMissiles, \"dmg\", 1);");
code("xIMissileTime = xInitAddInt(dIncomingMissiles, \"time\", 10000);");
code("dDots = xInitDatabase(\"Dot DB\");");
code("xUnitID = xInitAddInt(dDots, \"unit id\", 0);");
code("xPercent = xInitAddInt(dDots, \"per\", 0);");
code("dChests = xInitDatabase(\"chest DB\");");
code("xUnitID = xInitAddInt(dChests, \"unit id\", 0);");
code("xKeyType = xInitAddInt(dChests, \"key type\", 0);");
code("xUnlockUnitID = xInitAddInt(dChests, \"unlock unit id\", 0);");
code("dKeys = xInitDatabase(\"key DB\");");
code("xUnitID = xInitAddInt(dKeys, \"unit id\", 0);");
code("xKeyType = xInitAddInt(dKeys, \"key type\", 0);");
code("xKeySFXID = xInitAddInt(dKeys, \"sfx id\", 0);");
code("dTemp = xInitDatabase(\"tempdb\");");
code("xUnitID = xInitAddInt(dTemp, \"id\", 0);");
code("xExtra = xInitAddInt(dTemp, \"extra param\", 0);");
code("dFences = xInitDatabase(\"fencedb\");");
code("xUnitID = xInitAddInt(dFences, \"id\", -1);");
code("xSegment = xInitAddInt(dFences, \"segment\", 0);");
code("MapCentre = xsVectorSet(252/2-1,0,252/2-1);");
code("dInterractables = xInitDatabase(\"interractables\");");
code("xUnitID = xInitAddInt(dInterractables, \"desc\", 0);");
code("xType = xInitAddInt(dInterractables, \"desc\", 0);");
code("xSubtype = xInitAddInt(dInterractables, \"desc\", 0);");
code("xSquare1 = xInitAddInt(dInterractables, \"sq1\", 0);");
code("xSquare2 = xInitAddInt(dInterractables, \"sq2\", 0);");
code("dEdibles = xInitDatabase(\"edibles\");");
code("xUnitID = xInitAddInt(dEdibles, \"id\", 0);");
code("xType = xInitAddInt(dEdibles, \"desc\", 0);");
code("xSubtype = xInitAddInt(dEdibles, \"desc\", 0);");
code("xTime1 = xInitAddInt(dEdibles, \"desc\", 0);");
code("xTime2 = xInitAddInt(dEdibles, \"desc\", 0);");
code("dShore = xInitDatabase(\"dShore\");");
code("xShoreLoc = xInitAddVector(dShore, \"loc\", vector(0,0,0));");
code("xShoreDist = xInitAddInt(dShore, \"dist\", 0);");
code("dDirtA = xInitDatabase(\"dirta\");");
code("xDirtLoc = xInitAddVector(dDirtA, \"loc\", vector(0,0,0));");
code("dRiver = xInitDatabase(\"river\");");
code("xRiverLoc = xInitAddVector(dRiver, \"loc\", vector(0,0,0));");
code("dHelp = xInitDatabase(\"Helpers DB\");");
code("xUnitID = xInitAddInt(dHelp, \"unit id\", -1);");
code("xSubID = xInitAddInt(dHelp, \"sub type\", -1);");
code("dRelics = xInitDatabase(\"Relics DB\");");
code("xUnitID = xInitAddInt(dRelics, \"unit id\", -1);");
code("xSubID = xInitAddInt(dRelics, \"sub type\", -1);");
code("dShop = xInitDatabase(\"Shop\");");
code("xUnitID = xInitAddInt(dShop, \"shop\", 0);");
code("xPower = xInitAddString(dShop, \"shop\", \"power\");");
code("xPowerName = xInitAddString(dShop, \"shop\", \"power\");");
code("xDecorationID = xInitAddInt(dShop, \"shop\", 0);");
code("xCost = xInitAddInt(dShop, \"shop\", 0);");
code("dEnemies = xInitDatabase(\"Enemies\");");
code("xUnitID = xInitAddInt(dEnemies, \"id\", 0);");
code("xMoved = xInitAddBool(dEnemies, \"moved\", false);");
code("dTowers = xInitDatabase(\"Towers\");");
code("xUnitID = xInitAddInt(dTowers, \"id\", 0);");
code("xOwner = xInitAddInt(dTowers, \"owner\", 0);");
code("xConstructed = xInitAddBool(dTowers, \"built\", false);");
code("dFreeRelics = xInitDatabase(\"FreeRelics\");");
code("xUnitID = xInitAddInt(dFreeRelics, \"id\", -1);");
code("xRelicType = xInitAddInt(dFreeRelics, \"type\", 0);");
code("xRelicStat = xInitAddFloat(dFreeRelics, \"statvalue\", 0);");
code("xSFXID = xInitAddInt(dFreeRelics, \"sfxid\", -1);");
code("xRelicLevel = xInitAddInt(dFreeRelics, \"level\", 1);");
code("dHeldRelics = xInitDatabase(\"FreeRelics\");");
code("xUnitID = xInitAddInt(dHeldRelics, \"id\", -1);");
code("xRelicType = xInitAddInt(dHeldRelics, \"type\", 0);");
code("xRelicStat = xInitAddFloat(dHeldRelics, \"statvalue\", 0);");
code("xSFXID = xInitAddInt(dHeldRelics, \"sfxid\", -1);");
code("xRelicLevel = xInitAddInt(dHeldRelics, \"level\", 1);");
code("dEnemyCollision = xInitDatabase(\"collision\");");
code("xUnitID = xInitAddInt(dEnemyCollision, \"id\", -1);");
code("dMines = xInitDatabase(\"mines\");");
code("xUnitID = xInitAddInt(dMines, \"id\", -1);");
code("xOwner = xInitAddInt(dMines, \"owner\", 0);");
code("xMineSFX = xInitAddInt(dMines, \"sfxid\", -1);");
code("dBurner = xInitDatabase(\"burn\");");
code("xUnitID = xInitAddInt(dBurner, \"id\", -1);");
code("}");
code("void spyEffect(int proto = 0, int anim = 0, vector dest = vector(0,0,0), vector scale = vector(1,1,1), int event = -1) {");
code("int newest = xAddDatabaseBlock(dSpyRequests);");
code("xSetInt(dSpyRequests, xSpyRequestProto, proto, newest);");
code("xSetInt(dSpyRequests, xSpyRequestAnim, anim, newest);");
code("xSetVector(dSpyRequests, xSpyRequestDest, dest, newest);");
code("xSetVector(dSpyRequests, xSpyRequestScale, scale, newest);");
code("xSetInt(dSpyRequests, xSpyRequestEvent, event, newest);");
code("trTechInvokeGodPower(0, \"spy\", vector(0,0,0), vector(0,0,0));");
code("}");
code("bool rayCollision(vector start = vector(0,0,0), vector dir = vector(1,0,0), float dist = 0, float width = 0) {");
code("vector pos = vector(0,0,0);");
code("vector hitbox = vector(0,0,0);");
code("float current = 0;");
code("if(Stage != 5){");
code("if(xGetBool (dPlayerData, xPlayerActive)){");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerData,xPlayerUnitID),true);");
code("current = distanceBetweenVectors(pos, start, false);");
code("if (current < dist) {");
code("hitbox = start + dir * current;");
code("if(xGetBool(dPlayerData, xStopDeath) == false){");
code("if (distanceBetweenVectors(pos, hitbox, true) <= width) {");
code("if(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"\"+GazelleProto) == 1){");
code("return(true);");
code("}");
code("if((trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"\"+RhinoProto) == 1) ||");
code("(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"\"+RhinoDrinkProto) == 1)){");
code("return(true);");
code("}");
code("if(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"\"+GoatProto) == 1){");
code("return(true);");
code("}");
code("if(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"\"+CrocProto) == 1){");
code("return(true);");
code("}");
code("if(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"Petsuchos\") == 1){");
code("return(true);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("else{");
code("if(xGetInt(dMissiles, xOwner) != cNumberNonGaiaPlayers){");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies,xUnitID),true);");
code("current = distanceBetweenVectors(pos, start, false);");
code("if (current < dist) {");
code("hitbox = start + dir * current;");
code("if (distanceBetweenVectors(pos, hitbox, true) <= width) {");
code("return(true);");
code("}");
code("}");
code("}");
code("else{");
code("xUnitSelect(dEnemyCollision, xUnitID);");
code("if(trUnitGetIsContained(\"Tower\") == false){");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemyCollision,xUnitID),true);");
code("current = distanceBetweenVectors(pos, start, false);");
code("if (current < dist) {");
code("hitbox = start + dir * current;");
code("if (distanceBetweenVectors(pos, hitbox, true) <= width) {");
code("return(true);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("return(false);");
code("}");
code("void DoMissile(){");
code("xDatabaseNext(dMissiles);");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("vector prev = vector(0,0,0);");
code("prev = xGetVector(dMissiles, xMissilePrev);");
code("bool hit = false;");
code("int playerhit = 0;");
code("int boomID = 0;");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dMissiles, xUnitID));");
code("dir = xGetVector(dMissiles, xMissileDir);");
code("xSetVector(dMissiles, xMissilePos, pos);");
code("xSetPointer(dPlayerData, xGetInt(dMissiles, xOwner));");
code("float dist = distanceBetweenVectors(pos, prev, false);");
code("for(x=1; < cNumberNonGaiaPlayers) {");
code("xDatabaseNext(dPlayerData);");
code("if(Stage == 1){");
code("if(rayCollision(prev,dir,dist+2,2)){");
code("hit = true;");
code("playerhit = xGetPointer(dPlayerData);");
code("break;");
code("}");
code("}");
code("if(Stage == 2){");
code("if(rayCollision(prev,dir,dist+2,4)){");
code("hit = true;");
code("playerhit = xGetPointer(dPlayerData);");
code("break;");
code("}");
code("}");
code("if(Stage == 3){");
code("if(rayCollision(prev,dir,dist+2,2)){");
code("hit = true;");
code("playerhit = xGetPointer(dPlayerData);");
code("break;");
code("}");
code("}");
code("if(Stage == 4){");
code("if(rayCollision(prev,dir,dist+2,4)){");
code("hit = true;");
code("playerhit = xGetPointer(dPlayerData);");
code("break;");
code("}");
code("}");
code("}");
code("if(hit){");
code("xUnitSelect(dMissiles, xUnitID);");
code("trUnitDestroy();");
code("boomID = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", xsVectorGetX(pos), xsVectorGetZ(pos), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+boomID);");
code("if(Stage == 1){");
code("trUnitChangeProtoUnit(\"Blood Cinematic\");");
code("if(trCurrentPlayer() == playerhit){");
code("playSound(\"leviathangrunt2.wav\");");
code("}");
code("trUnitSelectClear();");
code("xSetPointer(dPlayerData, playerhit);");
code("xUnitSelect(dPlayerData, xPlayerUnitID);");
code("trDamageUnit(1);");
code("}");
code("if(Stage == 2){");
code("trUnitChangeProtoUnit(\"Blood Cinematic\");");
code("if(trCurrentPlayer() == playerhit){");
code("playSound(\"rhinogrunt\" + (1*iModulo(2,trTime())+1) + \".wav\");");
code("}");
code("trUnitSelectClear();");
code("xSetPointer(dPlayerData, playerhit);");
code("xUnitSelect(dPlayerData, xPlayerUnitID);");
code("trDamageUnit(2);");
code("}");
code("if(Stage == 3){");
code("trUnitChangeProtoUnit(\"Blood Cinematic\");");
code("if(trCurrentPlayer() == playerhit){");
code("playSound(\"goatselect.wav\");");
code("}");
code("trUnitSelectClear();");
code("xSetPointer(dPlayerData, playerhit);");
code("xUnitSelect(dPlayerData, xPlayerUnitID);");
code("trDamageUnit(1);");
code("}");
code("if(Stage == 4){");
code("trUnitChangeProtoUnit(\"Blood Cinematic\");");
code("if(trCurrentPlayer() == playerhit){");
code("playSound(\"crocodilegrunt\" + (1*iModulo(2,trTime())+1) + \".wav\");");
code("}");
code("trUnitSelectClear();");
code("xSetPointer(dPlayerData, playerhit);");
code("xUnitSelect(dPlayerData, xPlayerUnitID);");
code("trDamageUnit(xGetInt(dMissiles, xMissileDmg));");
code("}");
code("xFreeDatabaseBlock(dMissiles);");
code("}");
code("else{");
code("xSetVector(dMissiles, xMissilePrev, pos);");
code("if((xsVectorGetX(pos) < 0) || (xsVectorGetX(pos) > 252) || (xsVectorGetZ(pos) < 0) || (xsVectorGetZ(pos) > 252)){");
code("xUnitSelect(dMissiles, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dMissiles);");
code("}");
code("}");
code("}");
code("void DoMissileStage5(){");
code("int check = 0;");
code("check = xsMin(5, xGetDatabaseCount(dMissiles));");
code("for(p = check; > 0){");
code("xDatabaseNext(dMissiles);");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("vector prev = vector(0,0,0);");
code("prev = xGetVector(dMissiles, xMissilePrev);");
code("bool hitenemy = false;");
code("bool hittower = false;");
code("bool hitplayer = false;");
code("int unithit = 0;");
code("int boomID = 0;");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dMissiles, xUnitID));");
code("dir = xGetVector(dMissiles, xMissileDir);");
code("xSetVector(dMissiles, xMissilePos, pos);");
code("float dist = distanceBetweenVectors(pos, prev, false);");
code("if(xGetInt(dMissiles, xOwner) != cNumberNonGaiaPlayers){");
code("for(x = xGetDatabaseCount(dEnemies); > 0) {");
code("xDatabaseNext(dEnemies);");
code("if(rayCollision(prev,dir,dist+1,1)){");
code("hitenemy = true;");
code("unithit = xGetPointer(dEnemies);");
code("break;");
code("}");
code("}");
code("}");
code("else{");
code("for(x = xGetDatabaseCount(dEnemyCollision); > 0) {");
code("xDatabaseNext(dEnemyCollision);");
code("if(rayCollision(prev,dir,dist+2,4)){");
code("hittower = true;");
code("unithit = xGetPointer(dEnemyCollision);");
code("break;");
code("}");
code("}");
code("}");
code("if(hitenemy){");
code("xUnitSelect(dMissiles, xUnitID);");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("xSetPointer(dEnemies, unithit);");
code("xUnitSelect(dEnemies, xUnitID);");
code("trDamageUnit(xGetInt(dMissiles, xMissileDmg));");
code("xUnitSelect(dEnemies, xUnitID);");
code("if(trUnitDead() == true){");
code("if(iModulo(10, trTimeMS()) == 0){");
code("boomID = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(xGetPointer(dPlayerData), \"Cinematic Block\", xsVectorGetX(pos), xsVectorGetZ(pos), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+boomID);");
code("trUnitChangeProtoUnit(\"Medusa\");");
code("}");
code("xFreeDatabaseBlock(dEnemies);");
code("}");
code("xFreeDatabaseBlock(dMissiles);");
code("}");
code("else if(hittower){");
code("xUnitSelect(dMissiles, xUnitID);");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("xSetPointer(dEnemyCollision, unithit);");
code("xUnitSelect(dEnemyCollision, xUnitID);");
code("trDamageUnit(xGetInt(dMissiles, xMissileDmg));");
code("xFreeDatabaseBlock(dMissiles);");
code("}");
code("else{");
code("xSetVector(dMissiles, xMissilePrev, pos);");
code("if((xsVectorGetX(pos) < 0) || (xsVectorGetX(pos) > 252) || (xsVectorGetZ(pos) < 0) || (xsVectorGetZ(pos) > 252)){");
code("xUnitSelect(dMissiles, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dMissiles);");
code("}");
code("}");
code("}");
code("}");
}
void relicschicken() {
code("const int RELIC_NUMBER = 9;");
code("const int RELIC_ATTACK = 1;");
code("const int RELIC_HP = 2;");
code("const int RELIC_PROJ_SPEED = 3;");
code("const int RELIC_CHICKEN_SPEED = 4;");
code("const int RELIC_RANGE = 5;");
code("const int RELIC_TOWER = 6;");
code("const int RELIC_CHICKEN_HP = 7;");
code("const int RELIC_CHICKEN_HEAL = 8;");
code("const int RELIC_TOWER_HEAL = 9;");
code("string relicName(int relicid = 0) {");
code("string msg = \"WTF That's not a relic!\";");
code("int relic = 0;");
code("float stat = 0;");
code("for(a = xGetDatabaseCount(dFreeRelics); > 0){");
code("xDatabaseNext(dFreeRelics);");
code("if(xGetInt(dFreeRelics, xUnitID) == relicid){");
code("relic = xGetInt(dFreeRelics, xRelicType);");
code("stat = xGetFloat(dFreeRelics, xRelicStat);");
code("continue;");
code("}");
code("}");
code("for(a = xGetDatabaseCount(dHeldRelics); > 0){");
code("xDatabaseNext(dHeldRelics);");
code("if(xGetInt(dHeldRelics, xUnitID) == relicid){");
code("relic = xGetInt(dHeldRelics, xRelicType);");
code("stat = xGetFloat(dHeldRelics, xRelicStat);");
code("continue;");
code("}");
code("}");
code("switch(relic)");
code("{");
code("case RELIC_ATTACK:");
code("{");
code("msg = \"+ \" + 1*stat + \" attack\";");
code("}");
code("case RELIC_HP:");
code("{");
code("msg = \"+ \" + 1*stat + \" tower HP\";");
code("}");
code("case RELIC_PROJ_SPEED:");
code("{");
code("msg = \"+ \" + 1*stat + \" projectile speed\";");
code("}");
code("case RELIC_CHICKEN_SPEED:");
code("{");
code("msg = \"+ \" + 1*stat + \" chicken speed\";");
code("}");
code("case RELIC_RANGE:");
code("{");
code("msg = \"+ \" + 1*stat + \" tower range\";");
code("}");
code("case RELIC_TOWER:");
code("{");
code("msg = \"+ \" + 1*stat + \" tower limit\";");
code("}");
code("case RELIC_CHICKEN_HP:");
code("{");
code("msg = \"+ \" + 1*stat + \" chicken HP\";");
code("}");
code("case RELIC_CHICKEN_HEAL:");
code("{");
code("msg = \"+ \" + 1*stat + \" chicken heal per second\";");
code("}");
code("case RELIC_TOWER_HEAL:");
code("{");
code("msg = \"+ \" + 1*stat + \" tower heal per second\";");
code("}");
code("}");
code("return(msg);");
code("}");
code("int relicProto(int relic = 0) {");
code("int proto = kbGetProtoUnitID(\"Hoplite\");");
code("switch(relic)");
code("{");
code("case RELIC_ATTACK:");
code("{");
code("proto = kbGetProtoUnitID(\"Ballista\");");
code("}");
code("case RELIC_HP:");
code("{");
code("proto = kbGetProtoUnitID(\"Wall Connector\");");
code("}");
code("case RELIC_PROJ_SPEED:");
code("{");
code("proto = kbGetProtoUnitID(\"Phoenix From Egg\");");
code("}");
code("case RELIC_CHICKEN_SPEED:");
code("{");
code("proto = kbGetProtoUnitID(\"Pegasus\");");
code("}");
code("case RELIC_RANGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Crossbowman\");");
code("}");
code("case RELIC_TOWER:");
code("{");
code("proto = kbGetProtoUnitID(\"Tower\");");
code("}");
code("case RELIC_CHICKEN_HP:");
code("{");
code("proto = kbGetProtoUnitID(\"Chicken Exploding\");");
code("}");
code("case RELIC_CHICKEN_HEAL:");
code("{");
code("proto = kbGetProtoUnitID(\"Valkyrie\");");
code("}");
code("case RELIC_TOWER_HEAL:");
code("{");
code("proto = kbGetProtoUnitID(\"Physician\");");
code("}");
code("}");
code("return(proto);");
code("}");
}
void gamefunctions() {
code("void ShootProjectile(vector dir = vector(0,0,0), vector startpos = vector(0,0,0), string protounit = \"\",");
code("string car = \"\", int anim = 0, int dmg = 1, int time = 10000, int ownerof = 0){");
code("int temp = 0;");
code("if(ownerof == 0){");
code("ownerof = cNumberNonGaiaPlayers;");
code("}");
code("vector orient = xsVectorSet(xsVectorGetX(dir),0,xsVectorGetZ(dir));");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(ownerof, \"Dwarf\", xsVectorGetX(startpos),xsVectorGetZ(startpos),0);");
code("if(IGUnit == true){");
code("IGUnit = false;");
code("if(unitcheck != \"Tower\"){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+IGName);");
code("trMutateSelected(kbGetProtoUnitID(\"Roc\"));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trImmediateUnitGarrison(\"\"+IGName);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("trUnitSelectClear();");
code("if(unitcheck != \"Tower\"){");
code("trUnitSelect(\"\"+IGName);");
code("trMutateSelected(kbGetProtoUnitID(unitcheck));");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetUnitOrientation(orient,vector(0,1,0),true);");
code("trSetScale(0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("int index = xAddDatabaseBlock(dIncomingMissiles, true);");
code("spyEffect(kbGetProtoUnitID(\"Trident Soldier\"), 0, xsVectorSet(dIncomingMissiles, xMissileSpyID, index), vector(0,0,0));");
code("xSetInt(dIncomingMissiles,xUnitID, temp);");
code("xSetInt(dIncomingMissiles, xOwner, ownerof);");
code("xSetVector(dIncomingMissiles, xMissilePos, startpos);");
code("xSetVector(dIncomingMissiles, xMissileDir, dir);");
code("xSetInt(dIncomingMissiles, xMissileProto, kbGetProtoUnitID(protounit));");
code("xSetInt(dIncomingMissiles, xMissileCarProto , kbGetProtoUnitID(car));");
code("xSetInt(dIncomingMissiles, xMissileAnim, anim);");
code("xSetInt(dIncomingMissiles, xIMissileDmg, dmg);");
code("xSetInt(dIncomingMissiles, xIMissileTime, time);");
code("if(protounit == \"Meteorite\"){");
code("xAddDatabaseBlock(dBurner, true);");
code("xSetInt(dBurner, xUnitID, temp);");
code("}");
code("}");
code("rule DestroyConstant");
code("highFrequency");
code("inactive");
code("{");
code("for (x= xGetDatabaseCount(dDestroyMe); > 0) {");
code("xDatabaseNext(dDestroyMe);");
code("if(trTimeMS() > xGetInt(dDestroyMe, xDestroyTime)){");
code("xUnitSelect(dDestroyMe, xDestroyName);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dDestroyMe);");
code("}");
code("}");
code("}");
code("rule CrocQuizQuestions");
code("highFrequency");
code("inactive");
code("{");
code("trStringQuestVarSet(\"Question1\" ,\"There are multiple crocodile species\");");
code("trStringQuestVarSet(\"Question2\", \"Crocodiles cannot hear\");");
code("trStringQuestVarSet(\"Question3\", \"Crocodiles lay eggs\");");
code("trStringQuestVarSet(\"Question4\", \"The crocodile has a horizontal pupil\");");
code("trStringQuestVarSet(\"Question5\", \"Alligators and crocodiles are different species\");");
code("trStringQuestVarSet(\"Question6\", \"Crocodile feet are webbed\");");
code("trStringQuestVarSet(\"Question7\", \"Generally, crocodiles are larger than alligators\");");
code("trStringQuestVarSet(\"Question8\", \"Crocodiles enjoy cold weather\");");
code("trStringQuestVarSet(\"Question9\", \"Crocodiles can grow beyond 6 metres in length\");");
code("trStringQuestVarSet(\"Question10\", \"Steve Irwin was killed by a crocodile\");");
code("trStringQuestVarSet(\"Question11\", \"Crocodiles eat humans\");");
code("trStringQuestVarSet(\"Question12\", \"Crocodiles cannot grow new teeth\");");
code("trStringQuestVarSet(\"Question13\", \"Deer antlers will grow back\");");
code("trStringQuestVarSet(\"Question14\", \"Deer eyes are on the front of the head\");");
code("trStringQuestVarSet(\"Question15\", \"Deer can be white\");");
code("trStringQuestVarSet(\"Question16\", \"Reindeer can be found in Antarctica\");");
code("trQuestVarSet(\"MaxQNumber\", 20);");
code("trStringQuestVarSet(\"Question17\", \"The word rhinoceros is a combination of two Greek words, 'rhino' and 'ceros'\");");
code("trStringQuestVarSet(\"Question18\", \"Rhino horns are made of bone\");");
code("trStringQuestVarSet(\"Question19\", \"Deer antlers are made of bone\");");
code("trStringQuestVarSet(\"Question20\", \"A group of Rhinos is called a herd\");");
code("xsDisableSelf();");
code("}");
code("string ActName(int num = 0){");
code("string actnamed = \"Error\";");
code("switch(num)");
code("{");
code("case 1:");
code("{");
code("actnamed = \"Act I - Deer\";");
code("}");
code("case 2:");
code("{");
code("actnamed = \"Act II - Rhino\";");
code("}");
code("case 3:");
code("{");
code("actnamed = \"Act III - Goat\";");
code("}");
code("case 4:");
code("{");
code("actnamed = \"Act IV - Crocodile\";");
code("}");
code("case 5:");
code("{");
code("actnamed = \"Act V - Chicken\";");
code("}");
code("}");
code("return(actnamed);");
code("}");
code("string ActIcon(int num = 0){");
code("string animaliconact = \"Error\";");
code("switch(num)");
code("{");
code("case 1:");
code("{");
code("animaliconact = \"icons\animal gazelle icon 64\";");
code("}");
code("case 2:");
code("{");
code("animaliconact = \"icons\animal rhino icon 64\";");
code("}");
code("case 3:");
code("{");
code("animaliconact = \"icons\animal goat icon 64\";");
code("}");
code("case 4:");
code("{");
code("animaliconact = \"icons\animal crocodile icon 64\";");
code("}");
code("case 5:");
code("{");
code("animaliconact = \"icons\animal chicken icon 64\";");
code("}");
code("}");
code("return(animaliconact);");
code("}");
code("string CurrentProto(int num = 0){");
code("string thename = \"Error\";");
code("switch(num)");
code("{");
code("case 1:");
code("{");
code("thename = GazelleProto;");
code("}");
code("case 2:");
code("{");
code("thename = RhinoProto;");
code("}");
code("case 3:");
code("{");
code("thename = GoatProto;");
code("}");
code("case 4:");
code("{");
code("thename = CrocProto;");
code("}");
code("case 5:");
code("{");
code("thename = ChickenProto;");
code("}");
code("}");
code("return(thename);");
code("}");
code("void CreateMinigameFlag(int x = 0, int z = 0){");
code("int tempnum = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", x,z,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+tempnum);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+tempnum);");
code("trMutateSelected(kbGetProtoUnitID(\"Flag\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+tempnum);");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+tempnum);");
code("trSetSelectedScale(2,2,2);");
code("trQuestVarSet(\"MinigameStartSFX\", tempnum);");
code("tempnum = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", x,z,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+tempnum);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+tempnum);");
code("trMutateSelected(kbGetProtoUnitID(\"Pyramid Osiris Xpack\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+tempnum);");
code("trSetSelectedScale(100,0,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+tempnum);");
code("trUnitOverrideAnimation(6, 0, false, true, -1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+tempnum);");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0\");");
code("trQuestVarSet(\"MinigameStartID\", tempnum);");
code("}");
code("void SpawnDeerPoacher(int num = 0){");
code("int temp = 0;");
code("vector spawn = vector(0,0,0);");
code("vector EP = EndPoint*2;");
code("int allow = 0;");
code("if(InMinigame == false){");
code("while(num > 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("spawn=xsVectorSet(1*trQuestVarGet(\"x\"),5, 1*trQuestVarGet(\"z\"));");
code("while((distanceBetweenVectors(spawn, EP, true) < 2000)){");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("spawn=xsVectorSet(1*trQuestVarGet(\"x\"),5, 1*trQuestVarGet(\"z\"));");
code("continue;");
code("}");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((distanceBetweenVectors(spawn, kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnitID)),true) < 600) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true)){");
code("allow = 1;");
code("}");
code("}");
code("if(allow == 0){");
code("UnitCreate(cNumberNonGaiaPlayers, \"Throwing Axeman\", 1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\"), 0);");
code("xAddDatabaseBlock(dPoachers, true);");
code("xSetInt(dPoachers, xUnitID, temp);");
code("xSetInt(dPoachers, xMoveTime, 0);");
code("num = num-1;");
code("}");
code("else if(allow == 1){");
code("allow = 0;");
code("}");
code("}");
code("}");
code("}");
code("void SpawnRhinoPoacher(int num = 0){");
code("int temp = 0;");
code("vector spawn = vector(0,0,0);");
code("vector EP = EndPoint*2;");
code("int allow = 0;");
code("if(InMinigame == false){");
code("while(num > 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("spawn=xsVectorSet(1*trQuestVarGet(\"x\"),5, 1*trQuestVarGet(\"z\"));");
code("while((distanceBetweenVectors(spawn, EP, true) < 2000)){");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("spawn=xsVectorSet(1*trQuestVarGet(\"x\"),5, 1*trQuestVarGet(\"z\"));");
code("continue;");
code("}");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((distanceBetweenVectors(spawn, kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnitID)),true) < 1000) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true)){");
code("allow = 1;");
code("}");
code("}");
code("if(allow == 0){");
code("UnitCreate(cNumberNonGaiaPlayers, \"Slinger\", 1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\"), 0);");
code("xAddDatabaseBlock(dPoachers, true);");
code("xSetInt(dPoachers, xUnitID, temp);");
code("xSetInt(dPoachers, xMoveTime, 0);");
code("num = num-1;");
code("}");
code("else if(allow == 1){");
code("allow = 0;");
code("}");
code("}");
code("}");
code("}");
code("void SpawnGoatPoacher(int num = 0){");
code("int temp = 0;");
code("vector spawn = vector(0,0,0);");
code("vector EP = EndPoint*2;");
code("int allow = 0;");
code("if(InMinigame == false){");
code("while(num > 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("spawn=xsVectorSet(1*trQuestVarGet(\"x\"),5, 1*trQuestVarGet(\"z\"));");
code("while((distanceBetweenVectors(spawn, EP, true) < 2000)){");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("spawn=xsVectorSet(1*trQuestVarGet(\"x\"),5, 1*trQuestVarGet(\"z\"));");
code("continue;");
code("}");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((distanceBetweenVectors(spawn, kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnitID)),true) < 1200) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true)){");
code("allow = 1;");
code("}");
code("}");
code("if(allow == 0){");
code("UnitCreate(cNumberNonGaiaPlayers, \"Throwing Axeman\", 1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\"), 0);");
code("xAddDatabaseBlock(dPoachers, true);");
code("xSetInt(dPoachers, xUnitID, temp);");
code("xSetInt(dPoachers, xMoveTime, 0);");
code("num = num-1;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("spyEffect(kbGetProtoUnitID(\"Snowman\"), 0, vector(0,0,0), vector(2,2,2));");
code("}");
code("else if(allow == 1){");
code("allow = 0;");
code("}");
code("}");
code("}");
code("}");
code("void SpawnRhinoSuperPoacher(int num = 0){");
code("int temp = 0;");
code("vector spawn = vector(0,0,0);");
code("vector EP = EndPoint*2;");
code("int allow = 0;");
code("if(InMinigame == false){");
code("while(num > 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("spawn=xsVectorSet(1*trQuestVarGet(\"x\"),5, 1*trQuestVarGet(\"z\"));");
code("while((distanceBetweenVectors(spawn, EP, true) < 1000)){");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("spawn=xsVectorSet(1*trQuestVarGet(\"x\"),5, 1*trQuestVarGet(\"z\"));");
code("continue;");
code("}");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((distanceBetweenVectors(spawn, kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnitID)),true) < 1000) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true)){");
code("allow = 1;");
code("}");
code("}");
code("if(allow == 0){");
code("UnitCreate(cNumberNonGaiaPlayers, \"Chu Ko Nu\", 1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\"), 0);");
code("xAddDatabaseBlock(dPoachers, true);");
code("xSetInt(dPoachers, xUnitID, temp);");
code("xSetInt(dPoachers, xMoveTime, 0);");
code("num = num-1;");
code("if(num == 0){");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("}");
code("}");
code("else if(allow == 1){");
code("allow = 0;");
code("}");
code("}");
code("}");
code("}");
code("void hotkeyAbility(int ability = 0) {");
code("xsSetContextPlayer(0);");
code("int old = xGetPointer(dPlayerData);");
code("xSetPointer(dPlayerData, trCurrentPlayer());");
code("if (xGetBool(dPlayerData, xPlayerActive)) {");
code("trackInsert();");
code("trackAddWaypoint();");
code("trackPlay(1,EVENT_BUILD_AT_CURSOR);");
code("trBlockAllSounds(false);");
code("xUnitSelectByID(dPlayerData, xPlayerUnitID);");
code("if (trUnitIsSelected() == false) {");
code("uiFindType(CurrentProto());");
code("}");
code("if(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"\"+GazelleProto) > 0){");
code("switch(ability)");
code("{");
code("case EVENT_BUILD_HOUSE:");
code("{");
code("uiSetProtoCursor(\"House\", true);");
code("}");
code("case EVENT_BUILD_GRANARY:");
code("{");
code("uiSetProtoCursor(\"Granary\", true);");
code("}");
code("case EVENT_BUILD_STOREHOUSE:");
code("{");
code("uiSetProtoCursor(\"Storehouse\", true);");
code("}");
code("}");
code("}");
code("if(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"\"+RhinoProto) > 0){");
code("switch(ability)");
code("{");
code("case EVENT_BUILD_HOUSE:");
code("{");
code("uiSetProtoCursor(\"House\", true);");
code("}");
code("case EVENT_BUILD_GRANARY:");
code("{");
code("uiSetProtoCursor(\"Granary\", true);");
code("}");
code("case EVENT_BUILD_STOREHOUSE:");
code("{");
code("uiSetProtoCursor(\"Storehouse\", true);");
code("}");
code("}");
code("}");
code("if(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"\"+GoatProto) > 0){");
code("switch(ability)");
code("{");
code("case EVENT_BUILD_HOUSE:");
code("{");
code("uiSetProtoCursor(\"House\", true);");
code("}");
code("case EVENT_BUILD_GRANARY:");
code("{");
code("uiSetProtoCursor(\"Granary\", true);");
code("}");
code("case EVENT_BUILD_STOREHOUSE:");
code("{");
code("uiSetProtoCursor(\"Storehouse\", true);");
code("}");
code("}");
code("}");
code("if(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"\"+CrocProto) > 0){");
code("switch(ability)");
code("{");
code("case EVENT_BUILD_HOUSE:");
code("{");
code("uiSetProtoCursor(\"House\", true);");
code("}");
code("case EVENT_BUILD_GRANARY:");
code("{");
code("uiSetProtoCursor(\"Granary\", true);");
code("}");
code("case EVENT_BUILD_STOREHOUSE:");
code("{");
code("uiSetProtoCursor(\"Storehouse\", true);");
code("}");
code("}");
code("}");
code("if(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"Petsuchos\") > 0){");
code("switch(ability)");
code("{");
code("case EVENT_BUILD_HOUSE:");
code("{");
code("uiSetProtoCursor(\"House\", true);");
code("}");
code("case EVENT_BUILD_GRANARY:");
code("{");
code("uiSetProtoCursor(\"Granary\", true);");
code("}");
code("case EVENT_BUILD_STOREHOUSE:");
code("{");
code("uiSetProtoCursor(\"Storehouse\", true);");
code("}");
code("}");
code("}");
code("if(trPlayerUnitCountSpecific(xGetPointer(dPlayerData), \"\"+ChickenProto) > 0){");
code("switch(ability)");
code("{");
code("case EVENT_BUILD_HOUSE:");
code("{");
code("uiSetProtoCursor(\"Tower\", true);");
code("}");
code("case EVENT_BUILD_GRANARY:");
code("{");
code("uiSetProtoCursor(\"Armory\", true);");
code("}");
code("case EVENT_BUILD_STOREHOUSE:");
code("{");
code("uiSetProtoCursor(\"Storehouse\", true);");
code("}");
code("}");
code("}");
code("}");
code("xSetPointer(dPlayerData, old);");
code("}");
code("void buildAtCursor(int eventID = -1) {");
code("uiBuildAtPointer();");
code("uiClearCursor();");
code("trackInsert();");
code("trackAddWaypoint();");
code("trackPlay(1,EVENT_REMOVE_CAM_TRACKS);");
code("}");
code("int BlueText(int a = 3){");
code("if(cNumberNonGaiaPlayers > 3){");
code("a = 4;");
code("}");
code("else{");
code("a = 1;");
code("}");
code("return(a);");
code("}");
code("int GreenText(int a = 3){");
code("if(cNumberNonGaiaPlayers > 2){");
code("a = 3;");
code("}");
code("else{");
code("a = 0;");
code("}");
code("return(a);");
code("}");
code("int RedText(int a = 2){");
code("if(cNumberNonGaiaPlayers > 1){");
code("a = 2;");
code("}");
code("else{");
code("a = 0;");
code("}");
code("return(a);");
code("}");
code("void CreateGazelle(int p = 1, int x = 1, int z = 1, int heading = 0){");
code("xSetPointer(dPlayerData, p);");
code("trQuestVarSet(\"P\"+p+\"Unit\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(p, \"\"+GazelleProto, x, z, heading);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetSelectedScale(0,1,0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("spyEffect(kbGetProtoUnitID(\"Gazelle\"), 0, xsVectorSet(dPlayerData,xSpyID,p), vector(1,1,1));");
code("xSetInt(dPlayerData, xPlayerUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("}");
code("void CreateRhino(int p = 1, int x = 1, int z = 1, int heading = 0){");
code("xSetPointer(dPlayerData, p);");
code("trQuestVarSet(\"P\"+p+\"Unit\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(p, \"\"+RhinoProto, x, z, heading);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetSelectedScale(0,1,0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("spyEffect(kbGetProtoUnitID(\"Rhinocerous\"), 0, xsVectorSet(dPlayerData,xSpyID,p), vector(1,1,1));");
code("xSetInt(dPlayerData, xPlayerUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("}");
code("void CreateGoat(int p = 1, int x = 1, int z = 1, int heading = 0){");
code("xSetPointer(dPlayerData, p);");
code("trQuestVarSet(\"P\"+p+\"Unit\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(p, \"\"+GoatProto, x, z, heading);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetSelectedScale(0,0.3,0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("spyEffect(kbGetProtoUnitID(\"Goat\"), 0, xsVectorSet(dPlayerData,xSpyID,p), vector(1,1,1));");
code("xSetInt(dPlayerData, xPlayerUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("}");
code("void CreateCroc(int p = 1, int x = 1, int z = 1, int heading = 0){");
code("xSetPointer(dPlayerData, p);");
code("trQuestVarSet(\"P\"+p+\"Unit\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(p, \"\"+CrocProto, x, z, heading);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetSelectedScale(0,1,0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("spyEffect(kbGetProtoUnitID(\"Crocodile\"), 0, xsVectorSet(dPlayerData,xSpyID,p), vector(1,1,1));");
code("xSetInt(dPlayerData, xPlayerUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("trUnitSelectClear();");
code("xUnitSelect(dPlayerData, xSpyID);");
code("float scale = 0.25*xGetInt(dPlayerData, xCrocSize)+0.75;");
code("trSetScale(scale);");
code("}");
code("void CreateChicken(int p = 1, int x = 1, int z = 1, int heading = 0){");
code("xSetPointer(dPlayerData, p);");
code("trQuestVarSet(\"P\"+p+\"Unit\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(p, \"\"+ChickenProto, x, z, heading);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetSelectedScale(0.000001,0.000001,0.000001);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("spyEffect(kbGetProtoUnitID(\"Chicken\"), 0, xsVectorSet(dPlayerData,xSpyID,p), vector(2,2,2));");
code("xSetInt(dPlayerData, xPlayerUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("xAddDatabaseBlock(dEnemyCollision, true);");
code("xSetInt(dEnemyCollision, xUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("}");
code("void CreateChest(int x = 1, int z = 1, int heading = -1){");
code("if(heading == -1){");
code("trQuestVarSetFromRand(\"temph\",0,360,true);");
code("heading = 1*trQuestVarGet(\"temph\");");
code("}");
code("int ChestQuery = 0;");
code("trQuestVarSet(\"temp\",trGetNextUnitScenarioNameNumber());");
code("UnitCreate(0, \"Dwarf\", x*2, z*2, heading);");
code("trUnitSelectByQV(\"temp\");");
code("trUnitChangeProtoUnit(\"Titan Atlantean\");");
code("trUnitSelectByQV(\"temp\");");
code("trUnitChangeProtoUnit(\"Great Box\");");
code("trUnitSelectByQV(\"temp\");");
code("trSetSelectedScale(0.6,0.6,0.6);");
code("trUnitSelectByQV(\"temp\");");
code("trUnitHighlight(10000, false);");
code("yFindLatestReverse(\"temp2\", \"Titan Gate Dead\", 0);");
code("trUnitSelectByQV(\"temp2\");");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("trUnitSelectByQV(\"temp2\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("xAddDatabaseBlock(dChests, true);");
code("xSetInt(dChests, xUnitID, 1*trQuestVarGet(\"temp\"));");
code("xSetInt(dChests, xUnlockUnitID, 1*trQuestVarGet(\"temp2\"));");
code("ChestsTotal = ChestsTotal+1;");
code("}");
code("void AddTileMGDeer(int x = 0, int z = 0){");
code("int count = xGetDatabaseCount(dTiles1);");
code("xAddDatabaseBlock(dTiles1, true);");
code("xSetInt(dTiles1, xTileX, x);");
code("xSetInt(dTiles1, xTileZ, z);");
code("xSetInt(dTiles1, xTileNumber, count+1);");
code("xSetInt(dTiles1, xTileType, trGetTerrainType(x,z));");
code("xSetInt(dTiles1, xTileSubType,trGetTerrainSubType(x,z));");
code("}");
code("void AddTileMGDeer2(int x = 0, int z = 0){");
code("int count = xGetDatabaseCount(dTiles2);");
code("xAddDatabaseBlock(dTiles2, true);");
code("xSetInt(dTiles2, xTileX, x);");
code("xSetInt(dTiles2, xTileZ, z);");
code("xSetInt(dTiles2, xTileNumber, count+1);");
code("xSetInt(dTiles2, xTileType, trGetTerrainType(x,z));");
code("xSetInt(dTiles2, xTileSubType,trGetTerrainSubType(x,z));");
code("}");
code("void ToggleCharge(int p = 0){");
code("xSetPointer(dPlayerData, p);");
code("if(xGetBool(dPlayerData, xCharge) == false){");
code("xSetBool(dPlayerData, xCharge, true);");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 1, xGetFloat(dPlayerData, xRhinoRun));");
code("if(trCurrentPlayer() == p){");
code("playSound(\"rumble.wav\");");
code("}");
code("}");
code("else if(xGetBool(dPlayerData, xCharge) == true){");
code("xSetBool(dPlayerData, xCharge, false);");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 1, xGetFloat(dPlayerData, xRhinoWalk));");
code("}");
code("}");
code("void SpawnShop(string powertechname = \"\", string powerdispname = \"\", int costofpower = 1){");
code("int temp = 0;");
code("int firstunit = 0;");
code("int num = 1;");
code("while(num > 0){");
code("trQuestVarSetFromRand(\"x\", 0, 126);");
code("trQuestVarSetFromRand(\"z\", 0, 126);");
code("firstunit = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"temph\",0,360,true);");
code("UnitCreate(0, \"Cinematic Block\", 2*trQuestVarGet(\"x\"),2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"));");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"IceA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"IceA\"))){");
code("if(trCountUnitsInArea(\"\"+firstunit, 0, \"Obelisk\", 20) == 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*trQuestVarGet(\"x\"),2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+firstunit);");
code("trUnitChangeProtoUnit(\"Obelisk\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+firstunit);");
code("trUnitSetAnimationPath(\"2,0,0,0,0,0\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trMutateSelected(kbGetProtoUnitID(\"Guardian XP\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(0);");
code("xAddDatabaseBlock(dShop, true);");
code("xSetInt(dShop, xUnitID, firstunit);");
code("xSetString(dShop, xPower, powerdispname);");
code("xSetString(dShop, xPowerName, powertechname);");
code("xSetInt(dShop, xDecorationID, temp);");
code("xSetInt(dShop, xCost, costofpower);");
code("num = 0;");
code("}");
code("}");
code("}");
code("}");
code("void CrocGrow(int p = 0){");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xCrocSize, xGetInt(dPlayerData, xCrocSize)+1);");
code("CrocProgress = CrocProgress+1;");
code("xSetFloat(dPlayerData, xCrocFood, xGetFloat(dPlayerData, xCrocFood)-xGetFloat(dPlayerData, xCrocNext));");
code("xSetFloat(dPlayerData, xCrocNext, 4+2*xGetInt(dPlayerData, xCrocSize));");
code("if(xGetFloat(dPlayerData, xCrocFood) < 0){");
code("xSetFloat(dPlayerData, xCrocFood, 0);");
code("}");
code("trUnitSelectClear();");
code("xUnitSelect(dPlayerData, xSpyID);");
code("float scale = 0.25*xGetInt(dPlayerData, xCrocSize)+0.75;");
code("trSetScale(scale);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"ageadvance.wav\");");
code("}");
code("trModifyProtounit(\"\"+CrocProto, p, 0, 2);");
code("trModifyProtounit(\"\"+CrocProto, p, 2, 2);");
code("trModifyProtounit(\"\"+CrocProto, p, 29, 2);");
code("trModifyProtounit(\"Petsuchos\", p, 0, 2);");
code("trModifyProtounit(\"Petsuchos\", p, 2, 2);");
code("trModifyProtounit(\"Petsuchos\", p, 29, 2);");
code("xSetFloat(dPlayerData, xCrocLandSpeed, xGetFloat(dPlayerData, xCrocLandSpeed)+0.2);");
code("xSetFloat(dPlayerData, xCrocWaterSpeed, xGetFloat(dPlayerData, xCrocWaterSpeed)+0.35);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trDamageUnit(-1);");
code("if(iModulo(4, xGetInt(dPlayerData, xCrocSize)-1) == 0){");
code("trModifyProtounit(\"\"+CrocProto, p, 0, 5);");
code("trModifyProtounit(\"Petsuchos\", p, 0, 5);");
code("trModifyProtounit(\"\"+CrocProto, p, 29, 6);");
code("xSetInt(dPlayerData, xCrocSprintDuration, xGetInt(dPlayerData, xCrocSprintDuration)+1000);");
code("xSetInt(dPlayerData, xCrocSprintRechargeTime, xGetInt(dPlayerData, xCrocSprintRechargeTime)-1);");
code("trDamageUnit(-1);");
code("}");
code("if(xGetInt(dPlayerData, xCrocSize) == 3){");
code("ColouredIconChatToPlayer(p, \"0,0,0.7\", \"icons\animal crocodile icon 64\", \"You can now use 'W' to sink Kebenits!\");");
code("}");
code("if(xGetInt(dPlayerData, xCrocSize) == 5){");
code("ColouredIconChatToPlayer(p, \"0,0,0.7\", \"icons\animal crocodile icon 64\", \"You can now use 'W' to eat Chu Ko Nus!\");");
code("}");
code("if(xGetInt(dPlayerData, xCrocSize) == 7){");
code("ColouredIconChatToPlayer(p, \"0,0,0.7\", \"icons\animal crocodile icon 64\", \"Goal achieved!\");");
code("ColouredChatToPlayer(p, \"0,0,0.7\", \"You can still grow further\");");
code("ColouredChatToPlayer(p, \"0,0,0.7\", \"But you may attract even more deadly poachers...\");");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"cinematics\10_in\clearedcity.wav\", \"\Yeebaagooon\Zoo Quest\Skillpoint.mp3\");");
code("}");
code("}");
code("if(xGetInt(dPlayerData, xCrocSize) == 8){");
code("ColouredIconChatToPlayer(p, \"0,0,0.7\", \"icons\animal crocodile icon 64\", \"You can now use 'W' to eat Peltasts!\");");
code("ColouredChatToPlayer(p, \"0,0,0.7\", \"They do a lot of damage so you may want to avoid them.\");");
code("}");
code("if(xGetInt(dPlayerData, xCrocSize) == 10){");
code("ColouredIconChatToPlayer(p, \"0,0,0.7\", \"icons\animal crocodile icon 64\", \"You can now use 'W' to eat Sentinels!\");");
code("}");
code("if(xGetInt(dPlayerData, xCrocSize) == 12){");
code("ColouredIconChatToPlayer(p, \"1,0,0\", \"icons\animal crocodile icon 64\", \"You have become an infamous man eater!\");");
code("ColouredIconChatToPlayer(p, \"1,0,0\", \"icons\animal crocodile icon 64\", \"The world's top poachers are coming for you.\");");
code("trQuestVarSet(\"AllowS4Uber\", 1);");
code("}");
code("trSetCivilizationNameOverride(p, \"Level \" + xGetInt(dPlayerData, xCrocSize));");
code("}");
code("rule DebugRevive");
code("highFrequency");
code("active");
code("{");
code("if(trCheckGPActive(\"Rain\", 1)){");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(xGetBool(dPlayerData, xPlayerActive) == true){");
code("if(xGetBool(dPlayerData, xPlayerDead) == true){");
code("xSetBool(dPlayerData, xPlayerDead, false);");
code("PlayersDead = PlayersDead-1;");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("xUnitSelect(dPlayerData, xSpyID);");
code("trUnitDestroy();");
code("UnitCreateV(0, \"Revealer To Player\", xGetVector(dPlayerData, xDeathVector));");
code("if(Stage == 1){");
code("CreateGazelle(p, xsVectorGetX(xGetVector(dPlayerData, xDeathVector)), xsVectorGetZ(xGetVector(dPlayerData,");
code("xDeathVector)), 0);");
code("}");
code("if(Stage == 2){");
code("CreateRhino(p, xsVectorGetX(xGetVector(dPlayerData, xDeathVector)), xsVectorGetZ(xGetVector(dPlayerData,");
code("xDeathVector)), 0);");
code("}");
code("if(Stage == 3){");
code("CreateGoat(p, xsVectorGetX(xGetVector(dPlayerData, xDeathVector)), xsVectorGetZ(xGetVector(dPlayerData,");
code("xDeathVector)), 0);");
code("}");
code("if(Stage == 4){");
code("CreateCroc(p, xsVectorGetX(xGetVector(dPlayerData, xDeathVector)), xsVectorGetZ(xGetVector(dPlayerData,");
code("xDeathVector)), 0);");
code("}");
code("if(Stage == 5){");
code("CreateChicken(p, xsVectorGetX(xGetVector(dPlayerData, xDeathVector)), xsVectorGetZ(xGetVector(dPlayerData,");
code("xDeathVector)), 0);");
code("}");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetScale(1);");
code("uiZoomToProto(CurrentProto());");
code("uiLookAtProto(CurrentProto());");
code("}");
code("}");
code("}");
code("xsDisableSelf();");
code("xsEnableRule(\"DebugTimer\");");
code("playSound(\"herorevived.wav\");");
code("trOverlayText(\"DEBUG: Players revived!\", 3.0,-1,-1,600);");
code("}");
code("}");
code("rule DebugTimer");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("}");
code("xsDisableSelf();");
code("xsEnableRule(\"DebugRevive\");");
code("debugLog(\"PlayersActive = \" + PlayersActive);");
code("debugLog(\"PlayersDead = \" + PlayersDead);");
code("}");
code("}");
code("void DoRelicSFX(int id = 0, int type = 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("if(type == RELIC_ATTACK){");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trMutateSelected(kbGetProtoUnitID(\"Theris\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trSetScale(0);");
code("}");
code("if(type == RELIC_HP){");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trMutateSelected(kbGetProtoUnitID(\"Tower Mirror\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trSetScale(0);");
code("}");
code("if(type == RELIC_PROJ_SPEED){");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trMutateSelected(kbGetProtoUnitID(\"Dust Devil\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trSetScale(0.5);");
code("}");
code("if(type == RELIC_CHICKEN_SPEED){");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trMutateSelected(kbGetProtoUnitID(\"Pegasus\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trSetScale(0.5);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trSetSelectedHeight(1.0);");
code("}");
code("if(type == RELIC_RANGE){");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trMutateSelected(kbGetProtoUnitID(\"Guardian XP\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trSetScale(0);");
code("}");
code("if(type == RELIC_TOWER){");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trMutateSelected(kbGetProtoUnitID(\"undermine ground decal corner\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trSetScale(0.8);");
code("}");
code("if(type == RELIC_CHICKEN_HP){");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trMutateSelected(kbGetProtoUnitID(\"Chicken Exploding\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trSetScale(2);");
code("}");
code("if(type == RELIC_CHICKEN_HEAL){");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trMutateSelected(kbGetProtoUnitID(\"Healing SFX\"));");
code("}");
code("if(type == RELIC_TOWER_HEAL){");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trMutateSelected(kbGetProtoUnitID(\"Poison SFX\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+id);");
code("trSetScale(0.2);");
code("}");
code("}");
code("void ForceRelic(int id = 0, int type = 0, float stat = 0){");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics, xUnitID, id);");
code("xSetInt(dFreeRelics, xRelicType, type);");
code("xSetFloat(dFreeRelics, xRelicStat, stat);");
code("xUnitSelect(dFreeRelics, xUnitID);");
code("trUnitChangeProtoUnit(\"Titan Atlantean\");");
code("xUnitSelect(dFreeRelics, xUnitID);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("yFindLatestReverse(\"SFXUnit\", \"Titan Gate Dead\", 0);");
code("DoRelicSFX(1*trQuestVarGet(\"SFXUnit\"), type);");
code("xSetInt(dFreeRelics, xSFXID, 1*trQuestVarGet(\"SFXUnit\"));");
code("}");
code("void NewRelic(int id = 0, int max = 0, int forcelevel = 0){");
code("int type = 0;");
code("float stat = 0;");
code("float level = 0;");
code("if(max == 0){");
code("max = RELIC_NUMBER;");
code("}");
code("if(forcelevel == 0){");
code("trQuestVarSetFromRand(\"temp\", 1, ChickenLevel);");
code("level = 1*trQuestVarGet(\"temp\");");
code("}");
code("else{");
code("level = forcelevel;");
code("}");
code("trQuestVarSetFromRand(\"type\", 1, max);");
code("type = 1*trQuestVarGet(\"type\");");
code("if(type == RELIC_ATTACK){");
code("trQuestVarSetFromRand(\"temp\", 1, 3, true);");
code("if(level == 2){");
code("trQuestVarSetFromRand(\"temp\", 4, 6, true);");
code("}");
code("if(level == 3){");
code("trQuestVarSetFromRand(\"temp\", 7, 9, true);");
code("}");
code("if(level == 4){");
code("trQuestVarSetFromRand(\"temp\", 10, 15, true);");
code("}");
code("if(level == 5){");
code("trQuestVarSetFromRand(\"temp\", 16, 20, true);");
code("}");
code("if(level == 6){");
code("trQuestVarSetFromRand(\"temp\", 21, 25, true);");
code("}");
code("if(level == 7){");
code("trQuestVarSetFromRand(\"temp\", 26, 40, true);");
code("}");
code("}");
code("if(type == RELIC_HP){");
code("trQuestVarSetFromRand(\"temp\", 3, 10, true);");
code("if(level == 2){");
code("trQuestVarSetFromRand(\"temp\", 11, 20, true);");
code("}");
code("if(level == 3){");
code("trQuestVarSetFromRand(\"temp\", 21, 30, true);");
code("}");
code("if(level == 4){");
code("trQuestVarSetFromRand(\"temp\", 31, 50, true);");
code("}");
code("if(level == 5){");
code("trQuestVarSetFromRand(\"temp\", 51, 65, true);");
code("}");
code("if(level == 6){");
code("trQuestVarSetFromRand(\"temp\", 66, 80, true);");
code("}");
code("if(level == 7){");
code("trQuestVarSetFromRand(\"temp\", 81, 100, true);");
code("}");
code("trQuestVarModify(\"temp\", \"*\", 10);");
code("}");
code("if(type == RELIC_PROJ_SPEED){");
code("trQuestVarSetFromRand(\"temp\", 1, 2, true);");
code("if(level >= 2){");
code("trQuestVarSet(\"temp\", 1*trQuestVarGet(\"temp\")+level);");
code("}");
code("trQuestVarModify(\"temp\", \"*\", 1);");
code("}");
code("if(type == RELIC_CHICKEN_SPEED){");
code("trQuestVarSet(\"temp\", level);");
code("}");
code("if(type == RELIC_RANGE){");
code("trQuestVarSetFromRand(\"temp\", 1, 2, true);");
code("if(level == 2){");
code("trQuestVarSetFromRand(\"temp\", 3, 4, true);");
code("}");
code("if(level == 3){");
code("trQuestVarSetFromRand(\"temp\", 5, 6, true);");
code("}");
code("if(level == 4){");
code("trQuestVarSetFromRand(\"temp\", 7, 8, true);");
code("}");
code("if(level == 5){");
code("trQuestVarSetFromRand(\"temp\", 9, 10, true);");
code("}");
code("if(level == 6){");
code("trQuestVarSetFromRand(\"temp\", 11, 12, true);");
code("}");
code("if(level == 7){");
code("trQuestVarSetFromRand(\"temp\", 13, 15, true);");
code("}");
code("}");
code("if(type == RELIC_TOWER){");
code("trQuestVarSetFromRand(\"temp\", 1, 2, true);");
code("if(level == 2){");
code("trQuestVarSetFromRand(\"temp\", 3, 5, true);");
code("}");
code("if(level == 3){");
code("trQuestVarSetFromRand(\"temp\", 6, 8, true);");
code("}");
code("if(level == 4){");
code("trQuestVarSetFromRand(\"temp\", 9, 14, true);");
code("}");
code("if(level == 5){");
code("trQuestVarSetFromRand(\"temp\", 15, 17, true);");
code("}");
code("if(level == 6){");
code("trQuestVarSetFromRand(\"temp\", 18, 20, true);");
code("}");
code("if(level == 7){");
code("trQuestVarSetFromRand(\"temp\", 21, 25, true);");
code("}");
code("}");
code("if(type == RELIC_CHICKEN_HP){");
code("trQuestVarSetFromRand(\"temp\", 1, 7, true);");
code("if(level == 2){");
code("trQuestVarSetFromRand(\"temp\", 8, 11, true);");
code("}");
code("if(level == 3){");
code("trQuestVarSetFromRand(\"temp\", 12, 15, true);");
code("}");
code("if(level == 4){");
code("trQuestVarSetFromRand(\"temp\", 20, 30, true);");
code("}");
code("if(level == 5){");
code("trQuestVarSetFromRand(\"temp\", 31, 41, true);");
code("}");
code("if(level == 6){");
code("trQuestVarSetFromRand(\"temp\", 42, 50, true);");
code("}");
code("if(level == 7){");
code("trQuestVarSetFromRand(\"temp\", 51, 66, true);");
code("}");
code("trQuestVarModify(\"temp\", \"*\", 15);");
code("}");
code("if(type == RELIC_CHICKEN_HEAL){");
code("trQuestVarSetFromRand(\"temp\", 1, 2, true);");
code("if(level == 2){");
code("trQuestVarSetFromRand(\"temp\", 3, 4, true);");
code("}");
code("if(level == 3){");
code("trQuestVarSetFromRand(\"temp\", 5, 7, true);");
code("}");
code("if(level == 4){");
code("trQuestVarSetFromRand(\"temp\", 8, 10, true);");
code("}");
code("if(level == 5){");
code("trQuestVarSetFromRand(\"temp\", 11, 12, true);");
code("}");
code("if(level == 6){");
code("trQuestVarSetFromRand(\"temp\", 13, 15, true);");
code("}");
code("if(level == 7){");
code("trQuestVarSetFromRand(\"temp\", 16, 20, true);");
code("}");
code("}");
code("if(type == RELIC_TOWER_HEAL){");
code("trQuestVarSetFromRand(\"temp\", 1, 2, true);");
code("if(level == 2){");
code("trQuestVarSetFromRand(\"temp\", 3, 4, true);");
code("}");
code("if(level == 3){");
code("trQuestVarSetFromRand(\"temp\", 5, 7, true);");
code("}");
code("if(level == 4){");
code("trQuestVarSetFromRand(\"temp\", 8, 10, true);");
code("}");
code("if(level == 5){");
code("trQuestVarSetFromRand(\"temp\", 11, 13, true);");
code("}");
code("if(level == 6){");
code("trQuestVarSetFromRand(\"temp\", 14, 18, true);");
code("}");
code("if(level == 7){");
code("trQuestVarSetFromRand(\"temp\", 20, 30, true);");
code("}");
code("}");
code("stat = trQuestVarGet(\"temp\");");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics, xUnitID, id);");
code("xSetInt(dFreeRelics, xRelicType, type);");
code("xSetFloat(dFreeRelics, xRelicStat, stat);");
code("xUnitSelect(dFreeRelics, xUnitID);");
code("trUnitChangeProtoUnit(\"Titan Atlantean\");");
code("xUnitSelect(dFreeRelics, xUnitID);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xUnitSelect(dFreeRelics, xUnitID);");
code("trSetScale(0.25*level+0.75);");
code("yFindLatestReverse(\"SFXUnit\", \"Titan Gate Dead\", 0);");
code("DoRelicSFX(1*trQuestVarGet(\"SFXUnit\"), type);");
code("xSetInt(dFreeRelics, xSFXID, 1*trQuestVarGet(\"SFXUnit\"));");
code("xSetInt(dFreeRelics, xRelicLevel, level);");
code("}");
code("void FunctionRelic(bool apply = false, int p = 0){");
code("xSetPointer(dPlayerData, p);");
code("if(apply == true){");
code("if(xGetInt(dFreeRelics, xRelicType) == RELIC_ATTACK){");
code("trModifyProtounit(\"Tower\", p, 31, 1*xGetFloat(dFreeRelics, xRelicStat));");
code("xSetInt(dPlayerData, xTowerDamage, xGetInt(dPlayerData, xTowerDamage)+1*xGetFloat(dFreeRelics, xRelicStat));");
code("}");
code("if(xGetInt(dFreeRelics, xRelicType) == RELIC_HP){");
code("trModifyProtounit(\"Tower\", p, 0, 1*xGetFloat(dFreeRelics, xRelicStat));");
code("}");
code("if(xGetInt(dFreeRelics, xRelicType) == RELIC_PROJ_SPEED){");
code("trModifyProtounit(\"Wadjet Spit\", p, 1, xGetFloat(dFreeRelics, xRelicStat));");
code("}");
code("if(xGetInt(dFreeRelics, xRelicType) == RELIC_CHICKEN_SPEED){");
code("trModifyProtounit(ChickenProto, p, 1, xGetFloat(dFreeRelics, xRelicStat));");
code("}");
code("if(xGetInt(dFreeRelics, xRelicType) == RELIC_RANGE){");
code("trModifyProtounit(\"Tower\", p, 11, 1*xGetFloat(dFreeRelics, xRelicStat));");
code("trModifyProtounit(\"Tower\", p, 2, 1*xGetFloat(dFreeRelics, xRelicStat));");
code("}");
code("if(xGetInt(dFreeRelics, xRelicType) == RELIC_TOWER){");
code("trModifyProtounit(\"Tower\", p, 10, 1*xGetFloat(dFreeRelics, xRelicStat)+1);");
code("}");
code("if(xGetInt(dFreeRelics, xRelicType) == RELIC_CHICKEN_HP){");
code("trModifyProtounit(ChickenProto, p, 0, 1*xGetFloat(dFreeRelics, xRelicStat));");
code("}");
code("if(xGetInt(dFreeRelics, xRelicType) == RELIC_CHICKEN_HEAL){");
code("trQuestVarModify(\"P\"+p+\"ChickenRegen\", \"+\", 1*xGetFloat(dFreeRelics, xRelicStat));");
code("}");
code("if(xGetInt(dFreeRelics, xRelicType) == RELIC_TOWER_HEAL){");
code("trQuestVarModify(\"P\"+p+\"TowerRegen\", \"+\", 1*xGetFloat(dFreeRelics, xRelicStat));");
code("}");
code("}");
code("if(apply == false){");
code("if(xGetInt(dHeldRelics, xRelicType) == RELIC_ATTACK){");
code("trModifyProtounit(\"Tower\", p, 31, -1*xGetFloat(dHeldRelics, xRelicStat));");
code("xSetInt(dPlayerData, xTowerDamage, xGetInt(dPlayerData, xTowerDamage)-1*xGetFloat(dHeldRelics, xRelicStat));");
code("}");
code("if(xGetInt(dHeldRelics, xRelicType) == RELIC_HP){");
code("trModifyProtounit(\"Tower\", p, 0, (0-1*xGetFloat(dHeldRelics, xRelicStat)));");
code("debugLog(\"hp down\");");
code("}");
code("if(xGetInt(dHeldRelics, xRelicType) == RELIC_PROJ_SPEED){");
code("trModifyProtounit(\"Wadjet Spit\", p, 1, (0-xGetFloat(dHeldRelics, xRelicStat)));");
code("}");
code("if(xGetInt(dHeldRelics, xRelicType) == RELIC_CHICKEN_SPEED){");
code("trModifyProtounit(ChickenProto, p, 1, (0-xGetFloat(dHeldRelics, xRelicStat)));");
code("}");
code("if(xGetInt(dHeldRelics, xRelicType) == RELIC_RANGE){");
code("trModifyProtounit(\"Tower\", p, 11, -1*xGetFloat(dHeldRelics, xRelicStat));");
code("trModifyProtounit(\"Tower\", p, 2, -1*xGetFloat(dHeldRelics, xRelicStat));");
code("}");
code("if(xGetInt(dHeldRelics, xRelicType) == RELIC_TOWER){");
code("trModifyProtounit(\"Tower\", p, 10, -1*xGetFloat(dHeldRelics, xRelicStat)-1);");
code("}");
code("if(xGetInt(dHeldRelics, xRelicType) == RELIC_CHICKEN_HP){");
code("trModifyProtounit(ChickenProto, p, 0, -1*xGetFloat(dHeldRelics, xRelicStat));");
code("}");
code("if(xGetInt(dHeldRelics, xRelicType) == RELIC_CHICKEN_HEAL){");
code("trQuestVarModify(\"P\"+p+\"ChickenRegen\", \"-\", 1*xGetFloat(dHeldRelics, xRelicStat));");
code("}");
code("if(xGetInt(dHeldRelics, xRelicType) == RELIC_TOWER_HEAL){");
code("trQuestVarModify(\"P\"+p+\"TowerRegen\", \"-\", 1*xGetFloat(dHeldRelics, xRelicStat));");
code("}");
code("}");
code("}");
code("void R5Wave(int deploy = 1, string proto = \"\", int distancemmax = 1800, int distancemin = 1600){");
code("vector tempV = vector(0,0,0);");
code("int temp = 0;");
code("while(deploy > 0){");
code("trQuestVarSetFromRand(\"temp\", 1, xGetDatabaseCount(dShore));");
code("xSetPointer(dShore, 1*trQuestVarGet(\"temp\"));");
code("tempV = xGetVector(dShore, xShoreLoc);");
code("xSetInt(dShore, xShoreDist, distanceBetweenVectors(xGetVector(dShore, xShoreLoc), MapCentre, true));");
code("if((xGetInt(dShore, xShoreDist) < distancemmax) && (xGetInt(dShore, xShoreDist) > distancemin)){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, proto, xsVectorGetX(tempV), xsVectorGetZ(tempV), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("deploy = deploy-1;");
code("xAddDatabaseBlock(dEnemies, true);");
code("xSetInt(dEnemies, xUnitID, temp);");
code("trUnitMoveToPoint(xsVectorGetX(MapCentre),1,xsVectorGetZ(MapCentre),-1,true);");
code("}");
code("}");
code("}");
}
void ysearch() {
code("rule ysearch");
code("inactive");
code("highFrequency");
code("{");
code("int id = 0;");
code("int unittype = 0;");
code("int temp = 0;");
code("int closest = 0;");
code("int closestid = 0;");
code("float baseCos = 0;");
code("float baseSin = 0;");
code("int index = 0;");
code("vector scale = vector(0,0,0);");
code("vector dest = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("vector closevector = vector(0,0,0);");
code("vector target = vector(0,0,0);");
code("vector slingvector = vector(0,0,0);");
code("for(i = spysearch; < trGetNextUnitScenarioNameNumber()) {");
code("id = kbGetBlockID(\"\"+i, true);");
code("unittype = kbGetUnitBaseTypeID(id);");
code("switch(unittype)");
code("{");
code("case kbGetProtoUnitID(\"Spy Eye\"):");
code("{");
code("if (xGetDatabaseCount(dSpyRequests) > 0) {");
code("scale = xGetVector(dSpyRequests, xSpyRequestScale);");
code("dest = xGetVector(dSpyRequests, xSpyRequestDest);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trMutateSelected(xGetInt(dSpyRequests, xSpyRequestProto));");
code("trSetSelectedScale(xsVectorGetX(scale),xsVectorGetY(scale),xsVectorGetZ(scale));");
code("trUnitOverrideAnimation(xGetInt(dSpyRequests, xSpyRequestAnim),0,true,false,-1);");
code("trEventFire(xGetInt(dSpyRequests, xSpyRequestEvent));");
code("if (aiPlanSetUserVariableInt(1*xsVectorGetX(dest),1*xsVectorGetY(dest),1*xsVectorGetZ(dest),i) == false) {");
code("debugLog(\"spy error N/A: \" + 1*xsVectorGetX(dest) + \",\" + 1*xsVectorGetY(dest) + \",\" + 1*xsVectorGetZ(dest));");
code("}");
code("xFreeDatabaseBlock(dSpyRequests);");
code("spyreset = 0;");
code("} else {");
code("debugLog(\"Spy Buffer is empty\");");
code("}");
code("break;");
code("}");
code("case kbGetProtoUnitID(\"House\"):");
code("{");
code("if(Stage == 3){");
code("xSetPointer(dPlayerData, kbUnitGetOwner(id));");
code("xSetVector(dPlayerData, xGoatTarget, kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(id)));");
code("xSetFloat(dPlayerData, xGoatJumpDist, distanceBetweenVectors(xGetVector(dPlayerData, xGoatTarget),");
code("kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+kbUnitGetOwner(id)+\"Unit\")),true));");
code("if(xGetFloat(dPlayerData, xGoatJumpDist) >= 225){");
code("dir = xGetVector(dPlayerData, xGoatTarget)-kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+kbUnitGetOwner(id)+\"Unit\"));");
code("dir = xsVectorNormalize(dir);");
code("vector tempV = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+kbUnitGetOwner(id)+\"Unit\"));");
code("target = tempV+(dir*15);");
code("xSetVector(dPlayerData, xGoatTarget, target);");
code("xSetFloat(dPlayerData, xGoatJumpDist, distanceBetweenVectors(xGetVector(dPlayerData, xGoatTarget),");
code("kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+kbUnitGetOwner(id)+\"Unit\")),true));");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("break;");
code("}");
code("case kbGetProtoUnitID(\"Granary\"):");
code("{");
code("trPlayerGrantResources(kbUnitGetOwner(id), \"Wood\", 1);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("break;");
code("}");
code("case kbGetProtoUnitID(\"Storehouse\"):");
code("{");
code("trPlayerGrantResources(kbUnitGetOwner(id), \"Food\", 1);");
code("if(Stage == 5){");
code("xSetPointer(dPlayerData, kbUnitGetOwner(id));");
code("xSetVector(dPlayerData, xSpecialVector, kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(id)));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("break;");
code("}");
code("case kbGetProtoUnitID(\"Fence Wood\"):");
code("{");
code("if(xsVectorGetY(kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(id))) < -1.6){");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("}");
code("case kbGetProtoUnitID(\"Axe\"):");
code("{");
code("vector axevector = vector(0,0,0);");
code("axevector = kbGetBlockPosition(\"\"+i);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("dir = vector(0,0,0);");
code("closevector = vector(0,0,0);");
code("target = vector(0,0,0);");
code("closest = 10000;");
code("closestid = 0;");
code("for(a=xGetDatabaseCount(dPoachers) ; > 0){");
code("xDatabaseNext(dPoachers);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dPoachers, xUnitID));");
code("xUnitSelect(dPoachers, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, axevector, true) < closest){");
code("closest = distanceBetweenVectors(dir, axevector, true);");
code("closestid = xGetInt(dPoachers, xUnitID);");
code("}");
code("}");
code("}");
code("closevector = kbGetBlockPosition(\"\"+closestid);");
code("xsSetContextPlayer(cNumberNonGaiaPlayers);");
code("dest = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(kbGetBlockID(\"\"+closestid))));");
code("xsSetContextPlayer(0);");
code("dir = xsVectorNormalize(dest-closevector);");
code("if(Stage != 3){");
code("ShootProjectile(dir, closevector, \"Lampades Bolt\", \"Rocket\");");
code("}");
code("if(Stage == 3){");
code("baseCos = 0.965926;");
code("baseSin = 0.258819;");
code("dir = rotationMatrix(dir, 0.965926, -0.258819);");
code("for(a = 1; < 4){");
code("ShootProjectile(dir, closevector, \"Lampades Bolt\", \"Wadjet Spit\", 0, 1, 8000);");
code("dir = rotationMatrix(dir, baseCos, baseSin);");
code("}");
code("}");
code("}");
code("case kbGetProtoUnitID(\"Sling Stone\"):");
code("{");
code("slingvector = kbGetBlockPosition(\"\"+i);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("dir = vector(0,0,0);");
code("closevector = vector(0,0,0);");
code("target = vector(0,0,0);");
code("closest = 10000;");
code("closestid = 0;");
code("if(Stage != 5){");
code("for(a=xGetDatabaseCount(dPoachers) ; > 0){");
code("xDatabaseNext(dPoachers);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dPoachers, xUnitID));");
code("xUnitSelect(dPoachers, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dPoachers, xUnitID);");
code("}");
code("}");
code("}");
code("}");
code("else{");
code("for(a=xGetDatabaseCount(dEnemies) ; > 0){");
code("xDatabaseNext(dEnemies);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitID));");
code("xUnitSelect(dEnemies, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dEnemies, xUnitID);");
code("}");
code("}");
code("}");
code("}");
code("closevector = kbGetBlockPosition(\"\"+closestid);");
code("xsSetContextPlayer(cNumberNonGaiaPlayers);");
code("dest = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(kbGetBlockID(\"\"+closestid))));");
code("xsSetContextPlayer(0);");
code("dir = xsVectorNormalize(dest-closevector);");
code("if(Stage != 5){");
code("ShootProjectile(dir, closevector, \"Lampades Bolt\", \"Rocket\");");
code("}");
code("else{");
code("if(Stage == 5){");
code("ShootProjectile(dir, closevector, \"Ball of Fire\", \"Wadjet Spit\", 0, 10, 8000);");
code("}");
code("}");
code("}");
code("case kbGetProtoUnitID(\"Arrow\"):");
code("{");
code("if(Stage != 5){");
code("slingvector = kbGetBlockPosition(\"\"+i);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("dir = vector(0,0,0);");
code("closevector = vector(0,0,0);");
code("target = vector(0,0,0);");
code("closest = 10000;");
code("closestid = 0;");
code("for(a=xGetDatabaseCount(dPoachers) ; > 0){");
code("xDatabaseNext(dPoachers);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dPoachers, xUnitID));");
code("xUnitSelect(dPoachers, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dPoachers, xUnitID);");
code("}");
code("}");
code("}");
code("closevector = kbGetBlockPosition(\"\"+closestid);");
code("xsSetContextPlayer(cNumberNonGaiaPlayers);");
code("dest = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(kbGetBlockID(\"\"+closestid))));");
code("xsSetContextPlayer(0);");
code("dir = xsVectorNormalize(dest-closevector);");
code("baseCos = 0.996195;");
code("baseSin = 0.087156;");
code("dir = rotationMatrix(dir, 0.965926, -0.258819);");
code("for(a = 1; < 6){");
code("for(b = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("if(xGetInt(dPoachers, xUnitID) == closestid){");
code("unitcheck = xGetString(dPoachers, xPoacherType);");
code("continue;");
code("}");
code("}");
code("if(unitcheck == \"Sentinel Main\"){");
code("IGUnit = true;");
code("IGName = closestid;");
code("}");
code("ShootProjectile(dir, closevector, \"Lampades Bolt\", \"Wadjet Spit\", 0, 2, 7000);");
code("dir = rotationMatrix(dir, baseCos, baseSin);");
code("}");
code("}");
code("if(Stage == 5){");
code("slingvector = kbGetBlockPosition(\"\"+i);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("dir = vector(0,0,0);");
code("closevector = vector(0,0,0);");
code("target = vector(0,0,0);");
code("closest = 10000;");
code("closestid = 0;");
code("for(a=xGetDatabaseCount(dTowers) ; > 0 ){");
code("xDatabaseNext(dTowers);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dTowers, xUnitID));");
code("xUnitSelect(dTowers, xUnitID);");
code("if(trUnitDead() == false){");
code("if(xGetBool(dTowers, xConstructed) == true){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dTowers, xUnitID);");
code("index = xGetPointer(dTowers);");
code("}");
code("}");
code("}");
code("}");
code("closevector = kbGetBlockPosition(\"\"+closestid);");
code("xsSetContextPlayer(xGetInt(dTowers, xOwner, index));");
code("dest = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(kbGetBlockID(\"\"+closestid))));");
code("xsSetContextPlayer(0);");
code("dir = xsVectorNormalize(dest-closevector);");
code("IGUnit = true;");
code("IGName = closestid;");
code("unitcheck = \"Tower\";");
code("xSetPointer(dPlayerData, xGetInt(dTowers, xOwner));");
code("trBlockAllAmbientSounds();");
code("trBlockAllSounds();");
code("ShootProjectile(dir, closevector, \"Lampades Bolt\", \"Wadjet Spit\", 0, xGetInt(dPlayerData, xTowerDamage), 5000,");
code("1*xGetInt(dTowers, xOwner));");
code("trDelayedRuleActivation(\"UnblockSound\");");
code("}");
code("}");
code("case kbGetProtoUnitID(\"Spear Flaming\"):");
code("{");
code("slingvector = kbGetBlockPosition(\"\"+i);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("dir = vector(0,0,0);");
code("closevector = vector(0,0,0);");
code("target = vector(0,0,0);");
code("closest = 10000;");
code("closestid = 0;");
code("if(Stage != 5){");
code("for(a=xGetDatabaseCount(dPoachers) ; > 0){");
code("xDatabaseNext(dPoachers);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dPoachers, xUnitID));");
code("xUnitSelect(dPoachers, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dPoachers, xUnitID);");
code("}");
code("}");
code("}");
code("}");
code("else{");
code("for(a=xGetDatabaseCount(dEnemies) ; > 0){");
code("xDatabaseNext(dEnemies);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitID));");
code("xUnitSelect(dEnemies, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dEnemies, xUnitID);");
code("}");
code("}");
code("}");
code("}");
code("closevector = kbGetBlockPosition(\"\"+closestid);");
code("xsSetContextPlayer(cNumberNonGaiaPlayers);");
code("dest = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(kbGetBlockID(\"\"+closestid))));");
code("xsSetContextPlayer(0);");
code("dir = xsVectorNormalize(dest-closevector);");
code("if(Stage == 4){");
code("baseCos = 0.965926;");
code("baseSin = 0.258819;");
code("dir = rotationMatrix(dir, 0.866025, -0.5);");
code("for(a = 1; < 6){");
code("ShootProjectile(dir, closevector, \"Ball of Fire\", \"Maceman\", 0, 5, 4000);");
code("dir = rotationMatrix(dir, baseCos, baseSin);");
code("}");
code("}");
code("if(Stage == 5){");
code("if((ChickenLevel == 2) || (ChickenLevel == 3)){");
code("baseCos = 0.965926;");
code("baseSin = 0.258819;");
code("dir = rotationMatrix(dir, 0.866025, -0.5);");
code("for(a = 1; < 6){");
code("ShootProjectile(dir, closevector, \"Ball of Fire\", \"Wadjet Spit\", 0, 20, 6000);");
code("dir = rotationMatrix(dir, baseCos, baseSin);");
code("}");
code("}");
code("if((ChickenLevel == 4) || (ChickenLevel == 5)){");
code("baseCos = 0.965926;");
code("baseSin = 0.258819;");
code("dir = rotationMatrix(dir, 0.866025, -0.5);");
code("for(a = 1; < 6){");
code("ShootProjectile(dir, closevector, \"Ball of Fire\", \"Wadjet Spit\", 0, 40, 6000);");
code("dir = rotationMatrix(dir, baseCos, baseSin);");
code("}");
code("}");
code("}");
code("}");
code("case kbGetProtoUnitID(\"Manticore Barb\"):");
code("{");
code("slingvector = kbGetBlockPosition(\"\"+i);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("dir = vector(0,0,0);");
code("closevector = vector(0,0,0);");
code("target = vector(0,0,0);");
code("closest = 10000;");
code("closestid = 0;");
code("for(a=xGetDatabaseCount(dEnemies) ; > 0){");
code("xDatabaseNext(dEnemies);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitID));");
code("xUnitSelect(dEnemies, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dEnemies, xUnitID);");
code("}");
code("}");
code("}");
code("closevector = kbGetBlockPosition(\"\"+closestid);");
code("xsSetContextPlayer(cNumberNonGaiaPlayers);");
code("dest = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(kbGetBlockID(\"\"+closestid))));");
code("xsSetContextPlayer(0);");
code("dir = xsVectorNormalize(dest-closevector);");
code("baseCos = 0.965926;");
code("baseSin = 0.996195;");
code("dir = rotationMatrix(dir, 0.996194, -0.087156);");
code("for(a = 1; < 4){");
code("ShootProjectile(dir, closevector, \"Ball of Fire\", \"Wadjet Spit\", 0, 80, 6000);");
code("dir = rotationMatrix(dir, baseCos, baseSin);");
code("}");
code("}");
code("case kbGetProtoUnitID(\"Ball of fire Prometheus\"):");
code("{");
code("slingvector = kbGetBlockPosition(\"\"+i);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("dir = vector(0,0,0);");
code("closevector = vector(0,0,0);");
code("target = vector(0,0,0);");
code("closest = 10000;");
code("closestid = 0;");
code("for(a=xGetDatabaseCount(dEnemies) ; > 0){");
code("xDatabaseNext(dEnemies);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitID));");
code("xUnitSelect(dEnemies, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dEnemies, xUnitID);");
code("}");
code("}");
code("}");
code("closevector = kbGetBlockPosition(\"\"+closestid);");
code("xsSetContextPlayer(cNumberNonGaiaPlayers);");
code("dest = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(kbGetBlockID(\"\"+closestid))));");
code("xsSetContextPlayer(0);");
code("dir = xsVectorNormalize(dest-closevector);");
code("baseCos = 0.965926;");
code("baseSin = 0.258819;");
code("dir = rotationMatrix(dir, 0.996194, -0.087156);");
code("for(a = 1; < 8){");
code("ShootProjectile(dir, closevector, \"Ball of Fire\", \"Wadjet Spit\", 0, 100, 6000);");
code("dir = rotationMatrix(dir, baseCos, baseSin);");
code("}");
code("}");
code("case kbGetProtoUnitID(\"Arrow Flaming\"):");
code("{");
code("slingvector = kbGetBlockPosition(\"\"+i);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("dir = vector(0,0,0);");
code("closevector = vector(0,0,0);");
code("target = vector(0,0,0);");
code("closest = 10000;");
code("closestid = 0;");
code("if(Stage != 5){");
code("for(a=xGetDatabaseCount(dPoachers) ; > 0){");
code("xDatabaseNext(dPoachers);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dPoachers, xUnitID));");
code("xUnitSelect(dPoachers, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dPoachers, xUnitID);");
code("}");
code("}");
code("}");
code("}");
code("else{");
code("for(a=xGetDatabaseCount(dEnemies) ; > 0){");
code("xDatabaseNext(dEnemies);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitID));");
code("xUnitSelect(dEnemies, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dEnemies, xUnitID);");
code("}");
code("}");
code("}");
code("}");
code("closevector = kbGetBlockPosition(\"\"+closestid);");
code("xsSetContextPlayer(cNumberNonGaiaPlayers);");
code("dest = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(kbGetBlockID(\"\"+closestid))));");
code("xsSetContextPlayer(0);");
code("dir = xsVectorNormalize(dest-closevector);");
code("if(Stage == 2){");
code("baseCos = 0.965926;");
code("baseSin = 0.258819;");
code("dir = rotationMatrix(dir, 0.866025, -0.5);");
code("for(a = 1; < 6){");
code("ShootProjectile(dir, closevector, \"Lampades Bolt\", \"Wadjet Spit\");");
code("dir = rotationMatrix(dir, baseCos, baseSin);");
code("}");
code("}");
code("if(Stage == 4){");
code("for(a = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("if(xGetInt(dPoachers, xUnitID) == closestid){");
code("unitcheck = xGetString(dPoachers, xPoacherType);");
code("continue;");
code("}");
code("}");
code("if(unitcheck == \"Kebenit\"){");
code("IGUnit = true;");
code("IGName = closestid;");
code("}");
code("ShootProjectile(dir, closevector, \"Lampades Bolt\", \"Wadjet Spit\");");
code("}");
code("if(Stage == 5){");
code("if(ChickenLevel < 3){");
code("ShootProjectile(dir, closevector, \"Ball of Fire\", \"Wadjet Spit\", 0, 5, 8000);");
code("}");
code("else{");
code("ShootProjectile(dir, closevector, \"Ball of Fire\", \"Wadjet Spit\", 0, 25, 8000);");
code("}");
code("}");
code("}");
code("case kbGetProtoUnitID(\"Ballista Shot\"):");
code("{");
code("slingvector = kbGetBlockPosition(\"\"+i);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("dir = vector(0,0,0);");
code("closevector = vector(0,0,0);");
code("target = vector(0,0,0);");
code("closest = 10000;");
code("closestid = 0;");
code("for(a=xGetDatabaseCount(dPoachers) ; > 0){");
code("xDatabaseNext(dPoachers);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dPoachers, xUnitID));");
code("xUnitSelect(dPoachers, xUnitID);");
code("if(trUnitDead() == false){");
code("if(distanceBetweenVectors(dir, slingvector, true) < closest){");
code("closest = distanceBetweenVectors(dir, slingvector, true);");
code("closestid = xGetInt(dPoachers, xUnitID);");
code("}");
code("}");
code("}");
code("closevector = kbGetBlockPosition(\"\"+closestid);");
code("xsSetContextPlayer(cNumberNonGaiaPlayers);");
code("dest = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(kbGetBlockID(\"\"+closestid))));");
code("xsSetContextPlayer(0);");
code("dir = xsVectorNormalize(dest-closevector);");
code("for(a = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("if(xGetInt(dPoachers, xUnitID) == closestid){");
code("unitcheck = xGetString(dPoachers, xPoacherType);");
code("continue;");
code("}");
code("}");
code("if(unitcheck == \"Siege Ship Egyptian\"){");
code("IGUnit = true;");
code("IGName = closestid;");
code("}");
code("baseCos = 0.965926;");
code("baseSin = 0.258819;");
code("dir = rotationMatrix(dir, 0.866025, -0.5);");
code("for(a = 1; < 6){");
code("ShootProjectile(dir, closevector, \"Meteorite\", \"Wadjet Spit\", 6, 100, 6500);");
code("dir = rotationMatrix(dir, baseCos, baseSin);");
code("}");
code("}");
code("case kbGetProtoUnitID(\"Tower\"):");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trSetSelectedScale(1,0.3,1);");
code("trUnitSelectClear();");
code("dest = kbGetBlockPosition(\"\"+i);");
code("if(TutorialMode == true){");
code("int owner = kbUnitGetOwner(id);");
code("owner = owner*16;");
code("if((xsVectorGetZ(dest) > owner+8 ) || (xsVectorGetZ(dest) < owner-8 )){");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("owner = owner/16;");
code("if(trCurrentPlayer() == owner){");
code("playSound(\"cantdothat.wav\");");
code("}");
code("ColouredChatToPlayer(owner, \"1,0,0\", \"Build in your own section!\");");
code("}");
code("}");
code("xAddDatabaseBlock(dTowers, true);");
code("xSetInt(dTowers, xUnitID, i);");
code("xSetInt(dTowers, xOwner, kbUnitGetOwner(id));");
code("xSetBool(dTowers, xConstructed, false);");
code("xAddDatabaseBlock(dEnemyCollision, true);");
code("xSetInt(dEnemyCollision, xUnitID, i);");
code("}");
code("case kbGetProtoUnitID(\"Animal Attractor\"):");
code("{");
code("trTechGodPower(kbUnitGetOwner(id), \"Animal Magnetism\", 1);");
code("dest = kbGetBlockPosition(\"\"+i);");
code("scale = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+kbUnitGetOwner(id)+\"Unit\"));");
code("if(distanceBetweenVectors(dest,scale) < 144){");
code("for(a = xGetDatabaseCount(dFreeRelics); > 0){");
code("xDatabaseNext(dFreeRelics);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dFreeRelics, xUnitID));");
code("if(distanceBetweenVectors(dest,dir) < 36){");
code("xUnitSelect(dFreeRelics, xUnitID);");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("xUnitSelect(dFreeRelics, xUnitID);");
code("trUnitChangeProtoUnit(\"UI Range Indicator Norse SFX\");");
code("xUnitSelect(dFreeRelics, xSFXID);");
code("trUnitChangeProtoUnit(\"Osiris SFX\");");
code("xAddDatabaseBlock(dMines, true);");
code("xSetInt(dMines, xUnitID, xGetInt(dFreeRelics, xUnitID));");
code("xSetInt(dMines, xOwner, kbUnitGetOwner(id));");
code("xSetInt(dMines, xMineSFX, xGetInt(dFreeRelics, xSFXID));");
code("xFreeDatabaseBlock(dFreeRelics);");
code("}");
code("}");
code("}");
code("else{");
code("if(trCurrentPlayer() == kbUnitGetOwner(id)){");
code("playSound(\"cantdothat.wav\");");
code("ColouredChatToPlayer(kbUnitGetOwner(id), \"1,0,0\", \"You can't convert mines from this far away.\");");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitDestroy();");
code("}");
code("case kbGetProtoUnitID(\"Armory\"):");
code("{");
code("xAddDatabaseBlock(dEnemyCollision, true);");
code("xSetInt(dEnemyCollision, xUnitID, i);");
code("}");
code("}");
code("}");
code("if (xGetDatabaseCount(dSpyRequests) > 0) {");
code("spyreset = spyreset + 1;");
code("if (spyreset >= 10) {");
code("debugLog(\"Spy reset. Failed requests: \" + xGetDatabaseCount(dSpyRequests));");
code("xClearDatabase(dSpyRequests);");
code("spyreset = 0;");
code("}");
code("}");
code("spysearch = trGetNextUnitScenarioNameNumber();");
code("if(xGetDatabaseCount(dIncomingMissiles) > 0){");
code("for(a = xGetDatabaseCount(dIncomingMissiles) ; > 0){");
code("xDatabaseNext(dIncomingMissiles);");
code("if(xGetInt(dIncomingMissiles, xMissileSpyID) > -1){");
code("if(xGetInt(dIncomingMissiles, xMissileSpyOfSpyID) > -1){");
code("xUnitSelect(dIncomingMissiles, xMissileSpyID);");
code("trUnitChangeProtoUnit(\"Victory Marker\");");
code("xUnitSelect(dIncomingMissiles, xMissileSpyID);");
code("trSetScale(2);");
code("xUnitSelect(dIncomingMissiles, xMissileSpyOfSpyID);");
code("trSetScale(0);");
code("xFreeDatabaseBlock(dIncomingMissiles);");
code("}");
code("else if(xGetBool(dIncomingMissiles, SpyDone) == false){");
code("dest = vectorSetAsTargetVector(xGetVector(dIncomingMissiles, xMissilePos), xGetVector(dIncomingMissiles, xMissileDir),");
code("60.0);");
code("xUnitSelect(dIncomingMissiles, xUnitID);");
code("trMutateSelected(xGetInt(dIncomingMissiles, xMissileCarProto));");
code("xSetBool(dIncomingMissiles, SpyDone, true);");
code("trUnitSelectClear();");
code("xUnitSelect(dIncomingMissiles, xUnitID);");
code("trUnitMoveToPoint(xsVectorGetX(dest),0,xsVectorGetZ(dest),-1,false);");
code("xAddDatabaseBlock(dMissiles, true);");
code("xSetInt(dMissiles, xUnitID, xGetInt(dIncomingMissiles, xUnitID));");
code("xSetInt(dMissiles, xOwner, xGetInt(dIncomingMissiles, xOwner));");
code("xSetVector(dMissiles, xMissilePos, xGetVector(dIncomingMissiles, xMissilePos));");
code("xSetVector(dMissiles, xMissilePrev, xGetVector(dIncomingMissiles, xMissilePos));");
code("xSetVector(dMissiles, xMissileDir, xGetVector(dIncomingMissiles, xMissileDir));");
code("xSetInt(dMissiles, xMissileDmg, xGetInt(dIncomingMissiles, xIMissileDmg));");
code("xAddDatabaseBlock(dDestroyMe, true);");
code("xSetInt(dDestroyMe, xUnitID, xGetInt(dIncomingMissiles, xUnitID));");
code("xSetInt(dDestroyMe, xDestroyTime, trTimeMS()+xGetInt(dIncomingMissiles, xIMissileTime));");
code("xUnitSelect(dIncomingMissiles, xMissileSpyID);");
code("trUnitChangeProtoUnit(\"Huskarl\");");
code("xUnitSelect(dIncomingMissiles, xMissileSpyID);");
code("trUnitConvert(cNumberNonGaiaPlayers);");
code("xUnitSelect(dIncomingMissiles, xMissileSpyID);");
code("trSetScale(0);");
code("xUnitSelect(dIncomingMissiles, xMissileSpyID);");
code("spyEffect(xGetInt(dIncomingMissiles, xMissileProto), xGetInt(dIncomingMissiles, xMissileAnim),");
code("xsVectorSet(dIncomingMissiles, xMissileSpyOfSpyID, xGetPointer(dIncomingMissiles)), vector(1,1,1));");
code("}");
code("}");
code("}");
code("}");
code("}");
code("rule UnblockSound");
code("inactive");
code("highFrequency");
code("{");
code("trUnBlockAllAmbientSounds();");
code("trUnblockAllSounds();");
code("xsDisableSelf();");
code("}");
}
void nottud() {
code("int getMapSize(){");
code("return (252);");
code("}");
code("int getMapSizeSquared(){");
code("return (getMapSize() * getMapSize());");
code("}");
code("float startSunRed = 255.0;");
code("float startSunGreen = 255.0;");
code("float startSunBlue = 255.0;");
code("float startAmbientRed = 115.0;");
code("float startAmbientGreen = 115.0;");
code("float startAmbientBlue = 115.0;");
code("float startSunInclination = 38.0;");
code("float startSunRotation = 280.0;");
code("vector tempCameraPos = vector(0.0, 0.0, 0.0);");
code("vector tempCameraMx = vector(0.0, 0.0, 0.0);");
code("vector tempCameraMy = vector(0.0, 0.0, 0.0);");
code("vector tempCameraMz = vector(0.0, 0.0, 0.0);");
code("float tempH = 0.0;");
code("float tempT = 0.0;");
code("float tempSinH = 0.0;");
code("float tempCosH = 0.0;");
code("float tempSinT = 0.0;");
code("float tempCosT = 0.0;");
code("float tempPosX = 0.0;");
code("float tempPosY = 0.0;");
code("float tempPosZ = 0.0;");
code("int tempI = -1;");
code("float tempF = 0.0;");
code("int cameraTrackTime = 0;");
code("bool cameraFirstWaypoint = false;");
code("string tempS = \"\";");
code("string tempS2 = \"\";");
code("vector tempV = vector(0.0, 0.0, 0.0);");
code("vector tempV2 = vector(0.0, 0.0, 0.0);");
code("vector tempV3 = vector(0.0, 0.0, 0.0);");
code("int qvToInt(string name = \"\"){");
code("return (1*(0.4999999 + trQuestVarGet(name)));");
code("}");
code("int randomInt(int low = 0, int high = 0){");
code("trQuestVarSetFromRand(\"r\", low, high, true);");
code("return (qvToInt(\"r\"));");
code("}");
code("float randomFloat(float low = 0.0, float high = 0.0){");
code("trQuestVarSetFromRand(\"r\", low, high, false);");
code("return (trQuestVarGet(\"r\"));");
code("}");
code("float toMetres(float fraction = 0.0){");
code("return (fraction * getMapSize());");
code("}");
code("float toTiles(float fraction = 0.0){");
code("return (fraction * (getMapSize() / 2));");
code("}");
code("float interpolate(float from = 0.0, float to = 0.0, float fraction = 0.0){");
code("return ((1.0 - fraction) * from + fraction * to);");
code("}");
code("float interpolateRange(float from0 = 0.0, float to0 = 0.0, float from1 = 0.0, float to1 = 0.0, float pos0 = 0.0){");
code("float range0 = to0 - from0;");
code("float pos0Proportion = (pos0 - from0) / range0;");
code("return (interpolate(from1, to1, pos0Proportion));");
code("}");
code("vector interpolateVector(vector from = vector(0.0, 0.0, 0.0), vector to = vector(0.0, 0.0, 0.0), float fraction = 0.0){");
code("return (xsVectorSet(interpolate(xsVectorGetX(from), xsVectorGetX(to), fraction),");
code("interpolate(xsVectorGetY(from), xsVectorGetY(to), fraction),");
code("interpolate(xsVectorGetZ(from), xsVectorGetZ(to), fraction)));");
code("}");
code("float clamp(float minValue = 0.0, float maxValue = 0.0, float value = 0.0){");
code("return (xsMin(maxValue, xsMax(minValue, value)));");
code("}");
code("int modInt(int value = 0, int ceiling = 1){");
code("return (value - (value / ceiling) * ceiling);");
code("}");
code("float modFloat(float value = 0.0, float ceiling = 1.0){");
code("return (value - (1.0*(1*(value / ceiling))) * ceiling);");
code("}");
code("int absInt(int value = 0){");
code("if(value < 0){");
code("return (0 - value);");
code("} else {");
code("return (value);");
code("}");
code("}");
code("float circleX(float centre = 0.0, int i = 0, int total = 0, float radius = 0.0, float disp = 0){");
code("return(centre + radius * xsSin((6.283185 * i) / total + (45.0 - disp) * 0.017453));");
code("}");
code("float circleZ(float centre = 0.0, int i = 0, int total = 0, float radius = 0.0, float disp = 0){");
code("return(centre + radius * xsCos((6.283185 * i) / total + (45.0 - disp) * 0.017453));");
code("}");
code("void cameraLookAt(vector dest = vector(0.0, 0.0, 0.0), float distance = 0.0, float heading = 0.0, float tilt = 0.0,");
code("float verticalOffset = 0.0){");
code("tempH = PI * heading / 180.0;");
code("tempT = PI * tilt / 180.0;");
code("tempSinH = xsSin(tempH);");
code("tempCosH = xsCos(tempH);");
code("tempSinT = xsSin(tempT);");
code("tempCosT = xsCos(tempT);");
code("tempPosX = 0.0+xsVectorGetX(dest)-tempCosH*tempCosT*distance;");
code("tempPosY = tempSinT*distance+(xsVectorGetY(dest) + verticalOffset);");
code("tempPosZ = 0.0+xsVectorGetZ(dest)-tempSinH*tempCosT*distance;");
code("tempCameraPos = xsVectorSet(tempPosX, tempPosY, tempPosZ);");
code("tempCameraMx = xsVectorSet(tempCosH*tempCosT, 0.0-tempSinT, tempSinH*tempCosT);");
code("tempCameraMy = xsVectorSet(tempCosH*tempSinT, tempCosT, tempSinH*tempSinT);");
code("tempCameraMz = xsVectorSet(tempSinH, 0, 0.0-tempCosH);");
code("trCameraCut(tempCameraPos, tempCameraMx, tempCameraMy, tempCameraMz);");
code("}");
code("void createCameraTrack(int timeMS = 0){");
code("cameraFirstWaypoint = true;");
code("cameraTrackTime = timeMS;");
code("trackInsert();");
code("trackPlay(cameraTrackTime, -1);");
code("}");
code("void addCameraTrackWaypoint(){");
code("if(cameraFirstWaypoint){");
code("cameraFirstWaypoint = false;");
code("} else {");
code("trackAddWaypoint();");
code("}");
code("trackEditWaypoint();");
code("}");
code("void playCameraTrack(int eventId = -1){");
code("trackPlay(cameraTrackTime, eventId);");
code("}");
code("bool unitSelected(int unitName = 0, bool backwards = false){");
code("if(unitName < 0)return (false);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+unitName, backwards);");
code("return (trUnitIsSelected());");
code("}");
code("void modifyProtounitAbsoluteAllHumanPlayers(string protounit = \"\", int field = 0, float value = 0.0){");
code("for(p = 1; <= cNumberNonGaiaPlayers){");
code("if(field == 6){");
code("trModifyProtounit(protounit, p, field, -9999999999999999999.0);");
code("trModifyProtounit(protounit, p, field, value);");
code("} else if(field == 5 || field == 7 || field == 10 || field == 13){");
code("trModifyProtounit(protounit, p, field, 2147483648.0);");
code("trModifyProtounit(protounit, p, field, 2147483648.0);");
code("trModifyProtounit(protounit, p, field, value);");
code("} else {");
code("trModifyProtounit(protounit, p, field, 9999999999999999999.0);");
code("trModifyProtounit(protounit, p, field, -9999999999999999999.0);");
code("trModifyProtounit(protounit, p, field, value);");
code("}");
code("}");
code("}");
code("int getOwner(int unitName = -1){");
code("return (kbUnitGetOwner(kbGetBlockID(\"\"+(1*unitName), true)));");
code("}");
code("vector getPosition(int unitName = -1){");
code("return (kbGetBlockPosition(\"\"+(1*unitName), true));");
code("}");
code("int unitPercentDamaged(int unitName = 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+unitName, true);");
code("return (trUnitPercentDamaged());");
code("}");
code("bool unitDead(int unitName = 0, bool backwards = true){");
code("if(unitName < 0)return (false);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+unitName, backwards);");
code("return (trUnitDead());");
code("}");
code("bool unitGarrisonedIn(int unitName = 0, string container = \"\", bool backwards = true){");
code("if(unitName < 0)return (false);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+unitName, backwards);");
code("return (trUnitGetIsContained(container));");
code("}");
code("bool unitNearby(int from = -1, float distance = 0.0, int to = -1){");
code("if(from < 0 || to < 0)return (false);");
code("float distanceSquared = distance * distance;");
code("vector fromV = kbGetBlockPosition(\"\"+from, true);");
code("vector toV = kbGetBlockPosition(\"\"+to, true);");
code("float diffX = xsVectorGetX(toV) - xsVectorGetX(fromV);");
code("float diffZ = xsVectorGetZ(toV) - xsVectorGetZ(fromV);");
code("if((diffX * diffX + diffZ * diffZ) <= distanceSquared)return (true);");
code("return (false);");
code("}");
code("bool isContained(int unitName = 0, string containType = \"\"){");
code("if(unitName < 0)return (false);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+unitName, true);");
code("return (trUnitGetIsContained(containType));");
code("}");
code("vector vectorMultiply(vector v = vector(0,0,0), float amount = 0.0){");
code("return (xsVectorSet(xsVectorGetX(v)*amount,xsVectorGetY(v)*amount,xsVectorGetZ(v)*amount));");
code("}");
code("void sunVector(vector sun = vector(0,0,0)){");
code("sunColor(xsVectorGetX(sun),xsVectorGetY(sun),xsVectorGetZ(sun));");
code("}");
code("void ambientVector(vector ambient = vector(0,0,0)){");
code("ambientColor(xsVectorGetX(ambient),xsVectorGetY(ambient),xsVectorGetZ(ambient));");
code("}");
code("float clampColor(float value = 0.0){");
code("return (clamp(0.0, 255.0, value));");
code("}");
code("vector randomHue(){");
code("int hueType = randomInt(0, 2);");
code("float first = randomFloat(0.0, 255.0);");
code("float second = 255.0 - first;");
code("if(hueType == 0)return (xsVectorSet(first, second, 0.0));");
code("if(hueType == 1)return (xsVectorSet(0.0, first, second));");
code("if(hueType == 2)return (xsVectorSet(first, 0.0, second));");
code("}");
code("void look(string unitToLookAt = \"\"){");
code("trBlockAllSounds(true);");
code("uiFindType(unitToLookAt);");
code("uiClearSelection();");
code("trUnblockAllSounds();");
code("}");
code("string displayFloat(float value = 0.0){");
code("string valueAsString = \"\"+value;");
code("for(i = 0; < 6){");
code("if(xsSubString(valueAsString, 1, xsStringLength(valueAsString) - 1) != \"0\"){");
code("return (valueAsString);");
code("} else {");
code("valueAsString = xsSubString(valueAsString, xsStringLength(valueAsString) - 1, 0);");
code("}");
code("}");
code("return (xsSubString(valueAsString, xsStringLength(valueAsString) - 1, 0));");
code("}");
code("string displayTime(int seconds = 0){");
code("if(seconds < 60){");
code("return (\"\"+seconds);");
code("}");
code("int secondsPart = modInt(seconds, 60);");
code("string displaySeconds = \"\" + secondsPart;");
code("if(secondsPart < 10){");
code("displaySeconds = \"0\" + displaySeconds;");
code("}");
code("return (\"\" + (seconds / 60) + \":\" + displaySeconds);");
code("}");
code("void setSelectedUnitHeadingDegress(float heading = 0.0){");
code("float headingRadians = PI * heading / 180.0;");
code("trSetUnitOrientation(xsVectorSet(xsCos(headingRadians), 0.0, xsSin(headingRadians)), xsVectorSet(0.0, 1.0, 0.0), true);");
code("}");
code("int array0 = 0;");
code("int array1 = 0;");
code("int array2 = 0;");
code("int array3 = 0;");
code("int array4 = 0;");
code("int array5 = 0;");
code("int array6 = 0;");
code("int array7 = 0;");
code("int array8 = 0;");
code("int array9 = 0;");
code("int array10 = 0;");
code("int array11 = 0;");
code("int array12 = 0;");
code("int array13 = 0;");
code("int array14 = 0;");
code("int array15 = 0;");
code("int array16 = 0;");
code("int array17 = 0;");
code("int array18 = 0;");
code("int array19 = 0;");
code("int array20 = 0;");
code("int array21 = 0;");
code("int array22 = 0;");
code("int array23 = 0;");
code("int array24 = 0;");
code("int array25 = 0;");
code("int array26 = 0;");
code("int array27 = 0;");
code("int array28 = 0;");
code("int array29 = 0;");
code("int array30 = 0;");
code("int array31 = 0;");
code("int array32 = 0;");
code("int array33 = 0;");
code("int array34 = 0;");
code("int array35 = 0;");
code("int array36 = 0;");
code("int array37 = 0;");
code("int array38 = 0;");
code("int array39 = 0;");
code("int array40 = 0;");
code("int array41 = 0;");
code("int array42 = 0;");
code("int array43 = 0;");
code("int array44 = 0;");
code("int array45 = 0;");
code("int array46 = 0;");
code("int array47 = 0;");
code("int array48 = 0;");
code("int array49 = 0;");
code("int array50 = 0;");
code("int array51 = 0;");
code("int array52 = 0;");
code("int array53 = 0;");
code("int array54 = 0;");
code("int array55 = 0;");
code("int array56 = 0;");
code("int array57 = 0;");
code("int array58 = 0;");
code("int array59 = 0;");
code("int array60 = 0;");
code("int array61 = 0;");
code("int array62 = 0;");
code("int array63 = 0;");
code("int array64 = 0;");
code("int array65 = 0;");
code("int array66 = 0;");
code("int array67 = 0;");
code("int array68 = 0;");
code("int array69 = 0;");
code("int array70 = 0;");
code("int array71 = 0;");
code("int array72 = 0;");
code("int array73 = 0;");
code("int array74 = 0;");
code("int array75 = 0;");
code("int array76 = 0;");
code("int array77 = 0;");
code("int array78 = 0;");
code("int array79 = 0;");
code("int array80 = 0;");
code("int array81 = 0;");
code("int array82 = 0;");
code("int array83 = 0;");
code("int array84 = 0;");
code("int array85 = 0;");
code("int array86 = 0;");
code("int array87 = 0;");
code("int array88 = 0;");
code("int array89 = 0;");
code("int array90 = 0;");
code("int array91 = 0;");
code("int array92 = 0;");
code("int array93 = 0;");
code("int array94 = 0;");
code("int array95 = 0;");
code("int array96 = 0;");
code("int array97 = 0;");
code("int array98 = 0;");
code("int array99 = 0;");
code("int array100 = 0;");
code("int array101 = 0;");
code("int array102 = 0;");
code("int array103 = 0;");
code("int array104 = 0;");
code("int array105 = 0;");
code("int array106 = 0;");
code("int array107 = 0;");
code("int array108 = 0;");
code("int array109 = 0;");
code("int array110 = 0;");
code("int array111 = 0;");
code("int array112 = 0;");
code("int array113 = 0;");
code("int array114 = 0;");
code("int array115 = 0;");
code("int array116 = 0;");
code("int arraySize = 0;");
code("int randomArrayGet(int index = 0){");
code("if(index == 0)return (array0);");
code("if(index == 1)return (array1);");
code("if(index == 2)return (array2);");
code("if(index == 3)return (array3);");
code("if(index == 4)return (array4);");
code("if(index == 5)return (array5);");
code("if(index == 6)return (array6);");
code("if(index == 7)return (array7);");
code("if(index == 8)return (array8);");
code("if(index == 9)return (array9);");
code("if(index == 10)return (array10);");
code("if(index == 11)return (array11);");
code("if(index == 12)return (array12);");
code("if(index == 13)return (array13);");
code("if(index == 14)return (array14);");
code("if(index == 15)return (array15);");
code("if(index == 16)return (array16);");
code("if(index == 17)return (array17);");
code("if(index == 18)return (array18);");
code("if(index == 19)return (array19);");
code("if(index == 20)return (array20);");
code("if(index == 21)return (array21);");
code("if(index == 22)return (array22);");
code("if(index == 23)return (array23);");
code("if(index == 24)return (array24);");
code("if(index == 25)return (array25);");
code("if(index == 26)return (array26);");
code("if(index == 27)return (array27);");
code("if(index == 28)return (array28);");
code("if(index == 29)return (array29);");
code("if(index == 30)return (array30);");
code("if(index == 31)return (array31);");
code("if(index == 32)return (array32);");
code("if(index == 33)return (array33);");
code("if(index == 34)return (array34);");
code("if(index == 35)return (array35);");
code("if(index == 36)return (array36);");
code("if(index == 37)return (array37);");
code("if(index == 38)return (array38);");
code("if(index == 39)return (array39);");
code("if(index == 40)return (array40);");
code("if(index == 41)return (array41);");
code("if(index == 42)return (array42);");
code("if(index == 43)return (array43);");
code("if(index == 44)return (array44);");
code("if(index == 45)return (array45);");
code("if(index == 46)return (array46);");
code("if(index == 47)return (array47);");
code("if(index == 48)return (array48);");
code("if(index == 49)return (array49);");
code("if(index == 50)return (array50);");
code("if(index == 51)return (array51);");
code("if(index == 52)return (array52);");
code("if(index == 53)return (array53);");
code("if(index == 54)return (array54);");
code("if(index == 55)return (array55);");
code("if(index == 56)return (array56);");
code("if(index == 57)return (array57);");
code("if(index == 58)return (array58);");
code("if(index == 59)return (array59);");
code("if(index == 60)return (array60);");
code("if(index == 61)return (array61);");
code("if(index == 62)return (array62);");
code("if(index == 63)return (array63);");
code("if(index == 64)return (array64);");
code("if(index == 65)return (array65);");
code("if(index == 66)return (array66);");
code("if(index == 67)return (array67);");
code("if(index == 68)return (array68);");
code("if(index == 69)return (array69);");
code("if(index == 70)return (array70);");
code("if(index == 71)return (array71);");
code("if(index == 72)return (array72);");
code("if(index == 73)return (array73);");
code("if(index == 74)return (array74);");
code("if(index == 75)return (array75);");
code("if(index == 76)return (array76);");
code("if(index == 77)return (array77);");
code("if(index == 78)return (array78);");
code("if(index == 79)return (array79);");
code("if(index == 80)return (array80);");
code("if(index == 81)return (array81);");
code("if(index == 82)return (array82);");
code("if(index == 83)return (array83);");
code("if(index == 84)return (array84);");
code("if(index == 85)return (array85);");
code("if(index == 86)return (array86);");
code("if(index == 87)return (array87);");
code("if(index == 88)return (array88);");
code("if(index == 89)return (array89);");
code("if(index == 90)return (array90);");
code("if(index == 91)return (array91);");
code("if(index == 92)return (array92);");
code("if(index == 93)return (array93);");
code("if(index == 94)return (array94);");
code("if(index == 95)return (array95);");
code("if(index == 96)return (array96);");
code("if(index == 97)return (array97);");
code("if(index == 98)return (array98);");
code("if(index == 99)return (array99);");
code("if(index == 100)return (array100);");
code("if(index == 101)return (array101);");
code("if(index == 102)return (array102);");
code("if(index == 103)return (array103);");
code("if(index == 104)return (array104);");
code("if(index == 105)return (array105);");
code("if(index == 106)return (array106);");
code("if(index == 107)return (array107);");
code("if(index == 108)return (array108);");
code("if(index == 109)return (array109);");
code("if(index == 110)return (array110);");
code("if(index == 111)return (array111);");
code("if(index == 112)return (array112);");
code("if(index == 113)return (array113);");
code("if(index == 114)return (array114);");
code("if(index == 115)return (array115);");
code("if(index == 116)return (array116);");
code("}");
code("void randomArraySet(int index = 0, int value = 0){");
code("if(index == 0)array0 = value;");
code("if(index == 1)array1 = value;");
code("if(index == 2)array2 = value;");
code("if(index == 3)array3 = value;");
code("if(index == 4)array4 = value;");
code("if(index == 5)array5 = value;");
code("if(index == 6)array6 = value;");
code("if(index == 7)array7 = value;");
code("if(index == 8)array8 = value;");
code("if(index == 9)array9 = value;");
code("if(index == 10)array10 = value;");
code("if(index == 11)array11 = value;");
code("if(index == 12)array12 = value;");
code("if(index == 13)array13 = value;");
code("if(index == 14)array14 = value;");
code("if(index == 15)array15 = value;");
code("if(index == 16)array16 = value;");
code("if(index == 17)array17 = value;");
code("if(index == 18)array18 = value;");
code("if(index == 19)array19 = value;");
code("if(index == 20)array20 = value;");
code("if(index == 21)array21 = value;");
code("if(index == 22)array22 = value;");
code("if(index == 23)array23 = value;");
code("if(index == 24)array24 = value;");
code("if(index == 25)array25 = value;");
code("if(index == 26)array26 = value;");
code("if(index == 27)array27 = value;");
code("if(index == 28)array28 = value;");
code("if(index == 29)array29 = value;");
code("if(index == 30)array30 = value;");
code("if(index == 31)array31 = value;");
code("if(index == 32)array32 = value;");
code("if(index == 33)array33 = value;");
code("if(index == 34)array34 = value;");
code("if(index == 35)array35 = value;");
code("if(index == 36)array36 = value;");
code("if(index == 37)array37 = value;");
code("if(index == 38)array38 = value;");
code("if(index == 39)array39 = value;");
code("if(index == 40)array40 = value;");
code("if(index == 41)array41 = value;");
code("if(index == 42)array42 = value;");
code("if(index == 43)array43 = value;");
code("if(index == 44)array44 = value;");
code("if(index == 45)array45 = value;");
code("if(index == 46)array46 = value;");
code("if(index == 47)array47 = value;");
code("if(index == 48)array48 = value;");
code("if(index == 49)array49 = value;");
code("if(index == 50)array50 = value;");
code("if(index == 51)array51 = value;");
code("if(index == 52)array52 = value;");
code("if(index == 53)array53 = value;");
code("if(index == 54)array54 = value;");
code("if(index == 55)array55 = value;");
code("if(index == 56)array56 = value;");
code("if(index == 57)array57 = value;");
code("if(index == 58)array58 = value;");
code("if(index == 59)array59 = value;");
code("if(index == 60)array60 = value;");
code("if(index == 61)array61 = value;");
code("if(index == 62)array62 = value;");
code("if(index == 63)array63 = value;");
code("if(index == 64)array64 = value;");
code("if(index == 65)array65 = value;");
code("if(index == 66)array66 = value;");
code("if(index == 67)array67 = value;");
code("if(index == 68)array68 = value;");
code("if(index == 69)array69 = value;");
code("if(index == 70)array70 = value;");
code("if(index == 71)array71 = value;");
code("if(index == 72)array72 = value;");
code("if(index == 73)array73 = value;");
code("if(index == 74)array74 = value;");
code("if(index == 75)array75 = value;");
code("if(index == 76)array76 = value;");
code("if(index == 77)array77 = value;");
code("if(index == 78)array78 = value;");
code("if(index == 79)array79 = value;");
code("if(index == 80)array80 = value;");
code("if(index == 81)array81 = value;");
code("if(index == 82)array82 = value;");
code("if(index == 83)array83 = value;");
code("if(index == 84)array84 = value;");
code("if(index == 85)array85 = value;");
code("if(index == 86)array86 = value;");
code("if(index == 87)array87 = value;");
code("if(index == 88)array88 = value;");
code("if(index == 89)array89 = value;");
code("if(index == 90)array90 = value;");
code("if(index == 91)array91 = value;");
code("if(index == 92)array92 = value;");
code("if(index == 93)array93 = value;");
code("if(index == 94)array94 = value;");
code("if(index == 95)array95 = value;");
code("if(index == 96)array96 = value;");
code("if(index == 97)array97 = value;");
code("if(index == 98)array98 = value;");
code("if(index == 99)array99 = value;");
code("if(index == 100)array100 = value;");
code("if(index == 101)array101 = value;");
code("if(index == 102)array102 = value;");
code("if(index == 103)array103 = value;");
code("if(index == 104)array104 = value;");
code("if(index == 105)array105 = value;");
code("if(index == 106)array106 = value;");
code("if(index == 107)array107 = value;");
code("if(index == 108)array108 = value;");
code("if(index == 109)array109 = value;");
code("if(index == 110)array110 = value;");
code("if(index == 111)array111 = value;");
code("if(index == 112)array112 = value;");
code("if(index == 113)array113 = value;");
code("if(index == 114)array114 = value;");
code("if(index == 115)array115 = value;");
code("if(index == 116)array116 = value;");
code("}");
code("void randomArrayInitialise(int count = 0){");
code("for(i = 0; < count){");
code("randomArraySet(i, i);");
code("}");
code("arraySize = count;");
code("}");
code("int randomArrayNext(){");
code("int nextIndex = randomInt(0, arraySize - 1);");
code("int nextValue = randomArrayGet(nextIndex);");
code("randomArraySet(nextIndex, randomArrayGet(arraySize - 1));");
code("arraySize = arraySize - 1;");
code("return (nextValue);");
code("}");
code("vector randomCircleLoc(float centreX = 0.0, float centreZ = 0.0, float radius = 0.0){");
code("bool terminate = false;");
code("float posX = -1;");
code("float posZ = -1;");
code("float radiusCheck = radius * radius + radius;");
code("while(terminate == false){");
code("posX = randomFloat(0.0-radius, radius);");
code("posZ = randomFloat(0.0-radius, radius);");
code("if(posX*posX + posZ*posZ <= radiusCheck){");
code("terminate = true;");
code("}");
code("}");
code("return (xsVectorSet(posX + centreX, 0, posZ + centreZ));");
code("}");
code("vector randomOutsideCircleLoc(float centreX = 0.0, float centreZ = 0.0, float radius = 0.0){");
code("bool terminate = false;");
code("float posX = -1;");
code("float posZ = -1;");
code("float radiusCheck = radius * radius + radius;");
code("while(terminate == false){");
code("posX = randomFloat(0.0, getMapSize() / 2);");
code("posZ = randomFloat(0.0, getMapSize() / 2);");
code("float distX = centreX - posX;");
code("float distZ = centreZ - posZ;");
code("if(distX*distX + distZ*distZ > radiusCheck){");
code("terminate = true;");
code("}");
code("}");
code("return (xsVectorSet(posX, 0, posZ));");
code("}");
code("void paintCircle(int posX = 0, int posZ = 0, int radius = 0, string terrain = \"\"){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - posZ, 0.0 - radius);");
code("int tempMaxX = xsMin(getMapSize() / 2 - posX, radius);");
code("int tempMaxZ = xsMin(getMapSize() / 2 - posZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("trPaintTerrain(tempX + posX, tempZ + posZ, tempX + posX, tempZ + posZ, terrainType, terrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("void paintCircleOutline(int posX = 0, int posZ = 0, int radius = 0, string terrain = \"\", int ignore = 0){");
code("ignore = radius-2;");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - posZ, 0.0 - radius);");
code("int tempMaxX = xsMin(getMapSize() / 2 - posX, radius);");
code("int tempMaxZ = xsMin(getMapSize() / 2 - posZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("int tempRadiusCheck2 = ignore * ignore + ignore;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("if(tempRadiusCheck2 < (tempX*tempX + tempZ*tempZ)){");
code("trPaintTerrain(tempX + posX, tempZ + posZ, tempX + posX, tempZ + posZ, terrainType, terrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void replaceCircleAllBut(int posX = 0, int posZ = 0, int radius = 0, string oldTerrain = \"\", string newTerrain = \"\"){");
code("int oldTerrainType = getTerrainType(oldTerrain);");
code("int oldTerrainSubType = getTerrainSubType(oldTerrain);");
code("int newTerrainType = getTerrainType(newTerrain);");
code("int newTerrainSubType = getTerrainSubType(newTerrain);");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - posZ, 0.0 - radius);");
code("int tempMaxX = xsMin(getMapSize() / 2 - posX, radius);");
code("int tempMaxZ = xsMin(getMapSize() / 2 - posZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("int terrainType = trGetTerrainType(tempX + posX, tempZ + posZ);");
code("int terrainSubType = trGetTerrainSubType(tempX + posX, tempZ + posZ);");
code("if(terrainType != oldTerrainType || terrainSubType != oldTerrainSubType){");
code("trPaintTerrain(tempX + posX, tempZ + posZ, tempX + posX, tempZ + posZ, newTerrainType, newTerrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void paintCircleHeight(int posX = 0, int posZ = 0, int radius = 0, string terrain = \"\", float h = 0){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - posZ, 0.0 - radius);");
code("int tempMaxX = xsMin(getMapSize() / 2 - posX, radius);");
code("int tempMaxZ = xsMin(getMapSize() / 2 - posZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("trPaintTerrain(tempX + posX, tempZ + posZ, tempX + posX, tempZ + posZ, terrainType, terrainSubType, false);");
code("trChangeTerrainHeight(tempX + posX, tempZ + posZ, tempX + posX + 1, tempZ + posZ + 1, h, false);");
code("}");
code("}");
code("}");
code("}");
code("void paintCircleHeightLowerOnly(int posX = 0, int posZ = 0, int radius = 0, string terrain = \"\", float h = 0){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - posZ, 0.0 - radius);");
code("int tempMaxX = xsMin(getMapSize() / 2 - posX, radius);");
code("int tempMaxZ = xsMin(getMapSize() / 2 - posZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("trPaintTerrain(tempX + posX, tempZ + posZ, tempX + posX, tempZ + posZ, terrainType, terrainSubType, false);");
code("if(trGetTerrainHeight(tempX + posX, tempZ + posZ) > h){");
code("trChangeTerrainHeight(tempX + posX, tempZ + posZ, tempX + posX + 1, tempZ + posZ + 1, h, false);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void paintCircleHeightRaiseOnly(int posX = 0, int posZ = 0, int radius = 0, string terrain = \"\", float h = 0){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - posZ, 0.0 - radius);");
code("int tempMaxX = xsMin(getMapSize() / 2 - posX, radius);");
code("int tempMaxZ = xsMin(getMapSize() / 2 - posZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("trPaintTerrain(tempX + posX, tempZ + posZ, tempX + posX, tempZ + posZ, terrainType, terrainSubType, false);");
code("if(trGetTerrainHeight(tempX + posX, tempZ + posZ) < h){");
code("trChangeTerrainHeight(tempX + posX, tempZ + posZ, tempX + posX + 1, tempZ + posZ + 1, h, false);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void paintCircleRemovingWater(int posX = 0, int posZ = 0, int radius = 0, string terrain = \"\"){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - posZ, 0.0 - radius);");
code("int tempMaxX = xsMin(getMapSize() / 2 - posX, radius);");
code("int tempMaxZ = xsMin(getMapSize() / 2 - posZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("trPaintTerrain(tempX + posX, tempZ + posZ, tempX + posX, tempZ + posZ, terrainType, terrainSubType, false);");
code("int height = xsMax(trGetTerrainHeight(tempX + posX, tempZ + posZ), trGetWaterHeight(tempX + posX, tempZ + posZ));");
code("trChangeTerrainHeight(tempX + posX, tempZ + posZ, tempX + posX + 1, tempZ + posZ + 1, 15.0, false);");
code("trChangeTerrainHeight(tempX + posX, tempZ + posZ, tempX + posX + 1, tempZ + posZ + 1, height, false);");
code("}");
code("}");
code("}");
code("}");
code("void paintCircleHeight2(int posX = 0, int posZ = 0, int radius = 0, string terrain = \"\", float h = 0){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - posZ, 0.0 - radius);");
code("int tempMaxX = xsMin(getMapSize() / 2 - posX, radius);");
code("int tempMaxZ = xsMin(getMapSize() / 2 - posZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("trPaintTerrain(tempX + posX, tempZ + posZ, tempX + posX, tempZ + posZ, terrainType, terrainSubType, false);");
code("}");
code("}");
code("}");
code("tempRadiusCheck = (radius - 1) * (radius - 1) + (radius - 1);");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("trChangeTerrainHeight(tempX + posX, tempZ + posZ, tempX + posX + 1, tempZ + posZ + 1, h, false);");
code("}");
code("}");
code("}");
code("}");
code("void changeCircleHeight(int posX = 0, int posZ = 0, int radius = 0, float h = 0){");
code("int tempMinX = xsMax(0.0 - posX, 0.0 - radius);");
code("int tempMinZ = xsMax(0.0 - posZ, 0.0 - radius);");
code("int tempMaxX = xsMin(getMapSize() / 2 - posX, radius);");
code("int tempMaxZ = xsMin(getMapSize() / 2 - posZ, radius);");
code("int tempRadiusCheck = radius * radius + radius;");
code("for(tempZ = tempMaxZ; >= tempMinZ){");
code("for(tempX = tempMaxX; >= tempMinX){");
code("if(tempRadiusCheck >= (tempX*tempX + tempZ*tempZ)){");
code("trChangeTerrainHeight(tempX + posX, tempZ + posZ, tempX + posX + 1, tempZ + posZ + 1, h, false);");
code("}");
code("}");
code("}");
code("}");
code("void changeTerrainHeight(int amount = 0){");
code("for(z = 0; <= getMapSize() / 2) {");
code("for(x = 0; <= getMapSize() / 2) {");
code("float height = trGetTerrainHeight(x, z);");
code("trChangeTerrainHeight(x, z, x, z, height + amount, false);");
code("}");
code("}");
code("}");
code("void paintMap(string terrain = \"\"){");
code("trPaintTerrain(0, 0, getMapSize() / 2 - 1, getMapSize() / 2 - 1, getTerrainType(terrain), getTerrainSubType(terrain),");
code("false);");
code("}");
code("void smooth(int amount = 0){");
code("subModeEnter(\"Simulation\", \"Editor\");");
code("for(i = 0; < amount){");
code("terrainFilter();");
code("}");
code("subModeLeave(\"Simulation\", \"Editor\");");
code("modeEnter(\"Pregame\");");
code("modeEnter(\"Simulation\");");
code("}");
code("void changeGlobalHeight(float height = 0){");
code("subModeEnter(\"Simulation\", \"Editor\");");
code("terrainAdjustGlobalHeight(height);");
code("subModeLeave(\"Simulation\", \"Editor\");");
code("modeEnter(\"Pregame\");");
code("modeEnter(\"Simulation\");");
code("}");
code("void replaceTerrainBelowHeightMin(string oldTerrain = \"\", string newTerrain = \"\", float height = 0.0){");
code("int oldTerrainType = getTerrainType(oldTerrain);");
code("int oldTerrainSubType = getTerrainSubType(oldTerrain);");
code("int newTerrainType = getTerrainType(newTerrain);");
code("int newTerrainSubType = getTerrainSubType(newTerrain);");
code("int maxX = getMapSize() / 2;");
code("int maxZ = getMapSize() / 2;");
code("for(z = 0; < maxZ) {");
code("for(x = 0; < maxX) {");
code("int terrainType = trGetTerrainType(x, z);");
code("int terrainSubType = trGetTerrainSubType(x, z);");
code("float height0 = trGetTerrainHeight(x, z);");
code("float height1 = trGetTerrainHeight(x + 1, z);");
code("float height2 = trGetTerrainHeight(x, z + 1);");
code("float height3 = trGetTerrainHeight(x + 1, z + 1);");
code("float minHeight = xsMin(xsMin(height0, height1), xsMin(height2, height3));");
code("if(terrainType == oldTerrainType && terrainSubType == oldTerrainSubType && minHeight <= height){");
code("trPaintTerrain(x, z, x, z, newTerrainType, newTerrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("void replaceTerrainBelowHeightMax(string oldTerrain = \"\", string newTerrain = \"\", float height = 0.0){");
code("int oldTerrainType = getTerrainType(oldTerrain);");
code("int oldTerrainSubType = getTerrainSubType(oldTerrain);");
code("int newTerrainType = getTerrainType(newTerrain);");
code("int newTerrainSubType = getTerrainSubType(newTerrain);");
code("int maxX = getMapSize() / 2;");
code("int maxZ = getMapSize() / 2;");
code("for(z = 0; < maxZ) {");
code("for(x = 0; < maxX) {");
code("int terrainType = trGetTerrainType(x, z);");
code("int terrainSubType = trGetTerrainSubType(x, z);");
code("float height0 = trGetTerrainHeight(x, z);");
code("float height1 = trGetTerrainHeight(x + 1, z);");
code("float height2 = trGetTerrainHeight(x, z + 1);");
code("float height3 = trGetTerrainHeight(x + 1, z + 1);");
code("float maxHeight = xsMax(xsMax(height0, height1), xsMax(height2, height3));");
code("if(terrainType == oldTerrainType && terrainSubType == oldTerrainSubType && maxHeight <= height){");
code("trPaintTerrain(x, z, x, z, newTerrainType, newTerrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("void replaceTerrainAboveHeightMin(string oldTerrain = \"\", string newTerrain = \"\", float height = 0.0){");
code("int oldTerrainType = getTerrainType(oldTerrain);");
code("int oldTerrainSubType = getTerrainSubType(oldTerrain);");
code("int newTerrainType = getTerrainType(newTerrain);");
code("int newTerrainSubType = getTerrainSubType(newTerrain);");
code("int maxX = getMapSize() / 2;");
code("int maxZ = getMapSize() / 2;");
code("for(z = 0; < maxZ) {");
code("for(x = 0; < maxX) {");
code("int terrainType = trGetTerrainType(x, z);");
code("int terrainSubType = trGetTerrainSubType(x, z);");
code("float height0 = trGetTerrainHeight(x, z);");
code("float height1 = trGetTerrainHeight(x + 1, z);");
code("float height2 = trGetTerrainHeight(x, z + 1);");
code("float height3 = trGetTerrainHeight(x + 1, z + 1);");
code("float minHeight = xsMin(xsMin(height0, height1), xsMin(height2, height3));");
code("if(terrainType == oldTerrainType && terrainSubType == oldTerrainSubType && minHeight >= height){");
code("trPaintTerrain(x, z, x, z, newTerrainType, newTerrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("void replaceTerrainAboveHeightMax(string oldTerrain = \"\", string newTerrain = \"\", float height = 0.0){");
code("int oldTerrainType = getTerrainType(oldTerrain);");
code("int oldTerrainSubType = getTerrainSubType(oldTerrain);");
code("int newTerrainType = getTerrainType(newTerrain);");
code("int newTerrainSubType = getTerrainSubType(newTerrain);");
code("int maxX = getMapSize() / 2;");
code("int maxZ = getMapSize() / 2;");
code("for(z = 0; < maxZ) {");
code("for(x = 0; < maxX) {");
code("int terrainType = trGetTerrainType(x, z);");
code("int terrainSubType = trGetTerrainSubType(x, z);");
code("float height0 = trGetTerrainHeight(x, z);");
code("float height1 = trGetTerrainHeight(x + 1, z);");
code("float height2 = trGetTerrainHeight(x, z + 1);");
code("float height3 = trGetTerrainHeight(x + 1, z + 1);");
code("float maxHeight = xsMax(xsMax(height0, height1), xsMax(height2, height3));");
code("if(terrainType == oldTerrainType && terrainSubType == oldTerrainSubType && maxHeight >= height){");
code("trPaintTerrain(x, z, x, z, newTerrainType, newTerrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("void replaceTerrainAtMaxSteepness(string oldTerrain = \"\", string newTerrain = \"\", float difference = 0.0){");
code("int oldTerrainType = getTerrainType(oldTerrain);");
code("int oldTerrainSubType = getTerrainSubType(oldTerrain);");
code("int newTerrainType = getTerrainType(newTerrain);");
code("int newTerrainSubType = getTerrainSubType(newTerrain);");
code("int maxX = getMapSize() / 2;");
code("int maxZ = getMapSize() / 2;");
code("for(z = 0; < maxZ) {");
code("for(x = 0; < maxX) {");
code("int terrainType = trGetTerrainType(x, z);");
code("int terrainSubType = trGetTerrainSubType(x, z);");
code("float height0 = trGetTerrainHeight(x, z);");
code("float height1 = trGetTerrainHeight(x + 1, z);");
code("float height2 = trGetTerrainHeight(x, z + 1);");
code("float height3 = trGetTerrainHeight(x + 1, z + 1);");
code("float minHeight = xsMin(xsMin(height0, height1), xsMin(height2, height3));");
code("float maxHeight = xsMax(xsMax(height0, height1), xsMax(height2, height3));");
code("if(terrainType == oldTerrainType && terrainSubType == oldTerrainSubType && (maxHeight - minHeight <= difference)){");
code("trPaintTerrain(x, z, x, z, newTerrainType, newTerrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("void replaceTerrainAtMinSteepness(string oldTerrain = \"\", string newTerrain = \"\", float difference = 0.0){");
code("int oldTerrainType = getTerrainType(oldTerrain);");
code("int oldTerrainSubType = getTerrainSubType(oldTerrain);");
code("int newTerrainType = getTerrainType(newTerrain);");
code("int newTerrainSubType = getTerrainSubType(newTerrain);");
code("int maxX = getMapSize() / 2;");
code("int maxZ = getMapSize() / 2;");
code("for(z = 0; < maxZ) {");
code("for(x = 0; < maxX) {");
code("int terrainType = trGetTerrainType(x, z);");
code("int terrainSubType = trGetTerrainSubType(x, z);");
code("float height0 = trGetTerrainHeight(x, z);");
code("float height1 = trGetTerrainHeight(x + 1, z);");
code("float height2 = trGetTerrainHeight(x, z + 1);");
code("float height3 = trGetTerrainHeight(x + 1, z + 1);");
code("float minHeight = xsMin(xsMin(height0, height1), xsMin(height2, height3));");
code("float maxHeight = xsMax(xsMax(height0, height1), xsMax(height2, height3));");
code("if(terrainType == oldTerrainType && terrainSubType == oldTerrainSubType && (maxHeight - minHeight >= difference)){");
code("trPaintTerrain(x, z, x, z, newTerrainType, newTerrainSubType, false);");
code("}");
code("}");
code("}");
code("}");
code("bool unitOnTerrain(int unitName = 0, string terrain = \"\"){");
code("if(unitName < 0)return (false);");
code("vector unitPosV = kbGetBlockPosition(\"\"+unitName, true);");
code("int unitPosX = xsVectorGetX(unitPosV) / 2.0;");
code("int unitPosZ = xsVectorGetZ(unitPosV) / 2.0;");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int foundTerrainType = trGetTerrainType(unitPosX, unitPosZ);");
code("int foundTerrainSubType = trGetTerrainSubType(unitPosX, unitPosZ);");
code("if(foundTerrainType == terrainType && foundTerrainSubType == terrainSubType)return (true);");
code("return (false);");
code("}");
code("float heightAboveTerrain(vector posV = vector(0.0, 0.0, 0.0)){");
code("float tilesFloatX = xsVectorGetX(posV) / 2.0;");
code("float tilesFloatZ = xsVectorGetZ(posV) / 2.0;");
code("float tilesModX = modFloat(tilesFloatX, 1.0);");
code("float tilesModZ = modFloat(tilesFloatZ, 1.0);");
code("int minHeightX = xsFloor(tilesFloatX);");
code("int minHeightZ = xsFloor(tilesFloatZ);");
code("int maxHeightX = xsCeil(tilesFloatX);");
code("int maxHeightZ = xsCeil(tilesFloatZ);");
code("float terrainHeightMinMin = trGetTerrainHeight(minHeightX, minHeightZ);");
code("float terrainHeightMaxMin = trGetTerrainHeight(maxHeightX, minHeightZ);");
code("float terrainHeightMinMax = trGetTerrainHeight(minHeightX, maxHeightZ);");
code("float terrainHeightMaxMax = trGetTerrainHeight(maxHeightX, maxHeightZ);");
code("float heightMinZ = interpolate(terrainHeightMinMin, terrainHeightMaxMin, tilesModX);");
code("float heightMaxZ = interpolate(terrainHeightMinMax, terrainHeightMaxMax, tilesModX);");
code("return (xsVectorGetY(posV) - interpolate(heightMinZ, heightMaxZ, tilesModZ));");
code("}");
code("void setTerrainHeightForTerrain(string oldTerrain = \"\", float h = 0.0){");
code("int oldTerrainType = getTerrainType(oldTerrain);");
code("int oldTerrainSubType = getTerrainSubType(oldTerrain);");
code("int maxX = getMapSize() / 2;");
code("int maxZ = getMapSize() / 2;");
code("for(z = 0; < maxZ) {");
code("for(x = 0; < maxX) {");
code("int terrainType = trGetTerrainType(x, z);");
code("int terrainSubType = trGetTerrainSubType(x, z);");
code("if(terrainType == oldTerrainType && terrainSubType == oldTerrainSubType){");
code("trChangeTerrainHeight(x, z, x + 1, z + 1, h, false);");
code("}");
code("}");
code("}");
code("}");
code("vector getRandomTileMatchingTerrain(string terrain = \"\", int border = 0){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int maxX = getMapSize() / 2 - border;");
code("int maxZ = getMapSize() / 2 - border;");
code("int matchCount = 0;");
code("int foundTerrainType = 0;");
code("int foundTerrainSubType =0;");
code("for(z = border; < maxZ) {");
code("for(x = border; < maxX) {");
code("foundTerrainType = trGetTerrainType(x, z);");
code("foundTerrainSubType = trGetTerrainSubType(x, z);");
code("if(foundTerrainType == terrainType && foundTerrainSubType == terrainSubType){");
code("matchCount = matchCount + 1;");
code("}");
code("}");
code("}");
code("int choice = randomInt(0, matchCount - 1);");
code("matchCount = 0;");
code("for(z = border; < maxZ) {");
code("for(x = border; < maxX) {");
code("foundTerrainType = trGetTerrainType(x, z);");
code("foundTerrainSubType = trGetTerrainSubType(x, z);");
code("if(foundTerrainType == terrainType && foundTerrainSubType == terrainSubType){");
code("if(matchCount == choice)return (xsVectorSet(x, 0, z));");
code("matchCount = matchCount + 1;");
code("}");
code("}");
code("}");
code("return (vector(-1.0, -1.0, -1.0));");
code("}");
code("void TerrainTileDBSet(string terrain = \"\", int db = 0, int request = 0){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int maxX = getMapSize() / 2 - 0;");
code("int maxZ = getMapSize() / 2 - 0;");
code("int matchCount = 0;");
code("int foundTerrainType = 0;");
code("int foundTerrainSubType =0;");
code("tempV = vector(0,0,0);");
code("for(z = 0; < maxZ) {");
code("for(x = 0; < maxX) {");
code("foundTerrainType = trGetTerrainType(x, z);");
code("foundTerrainSubType = trGetTerrainSubType(x, z);");
code("if(foundTerrainType == terrainType && foundTerrainSubType == terrainSubType){");
code("tempV = xsVectorSet(x*2+2,0,z*2+2);");
code("xAddDatabaseBlock(db, true);");
code("xSetVector(db, request, tempV);");
code("}");
code("}");
code("}");
code("}");
code("vector calculateUpVectorAtTile(int posX = 0, int posZ = 0){");
code("float heightX0Z0 = trGetTerrainHeight(posX, posZ);");
code("float heightX1Z0 = trGetTerrainHeight(posX + 1, posZ);");
code("float heightX0Z1 = trGetTerrainHeight(posX, posZ + 1);");
code("float heightX1Z1 = trGetTerrainHeight(posX + 1, posZ + 1);");
code("float vectorX = heightX1Z0 + heightX1Z1 - heightX0Z0 - heightX0Z1;");
code("float vectorZ = heightX0Z1 + heightX1Z1 - heightX0Z0 - heightX1Z0;");
code("return (xsVectorSet(vectorX,0,vectorZ));");
code("}");
code("int deployLocUsingCineBlock(float posX = 0.0, float posZ = 0.0, string unit = \"\", int p = 0){");
code("int cineBlockId = deployLoc(posX, posZ, \"Cinematic Block\", p);");
code("trUnitSelectClear();");
code("if(cineBlockId == -1)return (cineBlockId);");
code("trUnitSelect(\"\"+cineBlockId, true);");
code("trUnitChangeProtoUnit(unit);");
code("return (cineBlockId);");
code("}");
code("void deployCluster(float posX = 0.0, float posZ = 0.0, string unit = \"\", int p = 0, int count = 0, float radius = 0.0,");
code("bool forceOnMap = false){");
code("for(i = 0; < count){");
code("vector loc = randomCircleLoc(posX, posZ, radius);");
code("float finalPosX = xsVectorGetX(loc);");
code("float finalPosZ = xsVectorGetZ(loc);");
code("if(forceOnMap){");
code("finalPosX = clamp(0.0, toMetres(1.0), finalPosX);");
code("finalPosZ = clamp(0.0, toMetres(1.0), finalPosZ);");
code("}");
code("deployLoc(finalPosX, finalPosZ, unit, p);");
code("}");
code("}");
code("void dC(float pX = 0.0, float pZ = 0.0, string u = \"\", int p = 0, int c = 0, float r = 0.0, int c2 = 0,");
code("float r2 = 0.0, bool forceOnMap = false){");
code("for(i = 0; < c2){");
code("vector loc = randomCircleLoc(pX, pZ, r2);");
code("float finalPosX = xsVectorGetX(loc);");
code("float finalPosZ = xsVectorGetZ(loc);");
code("deployCluster(finalPosX, finalPosZ, u, p, c, r, forceOnMap);");
code("}");
code("}");
code("void dM(string u = \"\", int p = 0, int c = 0, float r = 0.0, int c2 = 0){");
code("for(i = 0; < c2){");
code("deployCluster(randomFloat(0.0, toMetres(1.0)), randomFloat(0.0, toMetres(1.0)), u, p, c, r);");
code("}");
code("}");
code("void paintTrees(string terrain = \"\", string tree = \"\"){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int k = 0;");
code("for(i = 0; < getMapSize() / 2) {");
code("for(j = 0; < getMapSize() / 2) {");
code("if(k == 0 && trGetTerrainType(i, j) == terrainType && trGetTerrainSubType(i, j) == terrainSubType){");
code("deployLoc(i * 2  + 1, j * 2 + 1, \"Victory Marker\", 0);");
code("}");
code("k = 1 - k;");
code("}");
code("}");
code("int temp = trGetNextUnitScenarioNameNumber()-10;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeInArea(0, 0, \"Victory Marker\", tree, 999.0);");
code("}");
code("void paintTrees2(string terrain = \"\", string tree = \"\"){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("int k = 0;");
code("for(i = 0; < (getMapSize() / 2)) {");
code("for(j = 0; < (getMapSize() / 2)) {");
code("if(k == 0 && trGetTerrainType(i, j) == terrainType && trGetTerrainSubType(i, j) == terrainSubType){");
code("deployLoc(i * 2  + 1, j * 2 + 1, \"Victory Marker\", 0);");
code("}");
code("k = 1 - k;");
code("}");
code("k = 1 - k;");
code("}");
code("int temp = trGetNextUnitScenarioNameNumber()-10;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeInArea(0, 0, \"Victory Marker\", tree, 999.0);");
code("}");
code("void paintUnit(string terrain = \"\", string unit = \"\", int p = 0, float c = 0.1){");
code("int terrainType = getTerrainType(terrain);");
code("int terrainSubType = getTerrainSubType(terrain);");
code("for(i = 0; < getMapSize() / 2) {");
code("for(j = 0; < getMapSize() / 2) {");
code("if(trGetTerrainType(i, j) == terrainType && trGetTerrainSubType(i, j) == terrainSubType && randomFloat(0.0, 1.0) <= c){");
code("deployLoc(i * 2 + 1, j * 2 + 1, unit, p);");
code("}");
code("}");
code("}");
code("}");
code("void clearMap(string terrain = \"\", float height = 0.0){");
code("trChangeTerrainHeight(0, 0, getMapSize() / 2, getMapSize() / 2, 15, false);");
code("trChangeTerrainHeight(0, 0, getMapSize() / 2, getMapSize() / 2, height, false);");
code("trPaintTerrain(0, 0, getMapSize() / 2 - 1, getMapSize() / 2 - 1, 0,0, false);");
code("refreshPassability();");
code("trPaintTerrain(0, 0, getMapSize() / 2 - 1, getMapSize() / 2 - 1, getTerrainType(terrain), getTerrainSubType(terrain),");
code("false);");
code("trRenderSnow(0.0);");
code("trSetCloudData(1.5, 0.6, 0.6, 2, 0, 1);");
code("}");
code("float randomFloatWeighted(float min = 0.0, float max = 1.0, int weight = 1){");
code("float value = max;");
code("return (value);");
code("}");
code("void paintWaterKeepingMapPassable(float waterHeight = 0.0, float depth = 1.0, vector waterColour = vector(1.0, 1.0,");
code("1.0)){");
code("int oldTerrainType = trGetTerrainType(0, 0);");
code("int oldTerrainSubType = trGetTerrainSubType(0, 0);");
code("trCoverTerrainWithWater(waterHeight, 1.0,\"Aegean Sea\");");
code("trPaintWaterColor(waterColour,0,0,toTiles(1.0)+1,toTiles(1.0)+1);");
code("trChangeTerrainHeight(0, 0, (getMapSize() / 2), (getMapSize() / 2), waterHeight - depth, false);");
code("trPaintTerrain(0, 0, (getMapSize() / 2) - 1, (getMapSize() / 2) - 1, oldTerrainType, oldTerrainSubType, false);");
code("}");
code("void createStartTown(){");
code("string baseTerrain = \"ShorelineJungleA\";");
code("int mapId = 0;");
code("clearMap(\"ShorelineJungleA\", 0.0);");
code("paintWaterKeepingMapPassable(0.0, 5.0, vector(0.2, 0.6, 0.8));");
code("int sideChosen = randomInt(0, 3);");
code("for(i = 0; < 100) {");
code("if(sideChosen == 0)tempV = xsVectorSet(randomFloat(0, toTiles(1.0)), 0.0, randomFloat(toTiles(0.25), toTiles(1.0)));");
code("if(sideChosen == 1)tempV = xsVectorSet(randomFloat(toTiles(0.25), toTiles(1.0)), 0.0, randomFloat(0, toTiles(1.0)));");
code("if(sideChosen == 2)tempV = xsVectorSet(randomFloat(0, toTiles(1.0)), 0.0, randomFloat(0, toTiles(0.75)));");
code("if(sideChosen == 3)tempV = xsVectorSet(randomFloat(0, toTiles(0.75)), 0.0, randomFloat(0, toTiles(1.0)));");
code("for(j = 0; < 5) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("paintCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.04),");
code("\"GrassDirt50\", randomFloatWeighted(1.0, 2.0, 2));");
code("}");
code("}");
code("for(i = 0; < 30) {");
code("if(sideChosen == 0)tempV = xsVectorSet(randomFloat(0, toTiles(1.0)), 0.0, randomFloat(toTiles(0.6), toTiles(1.0)));");
code("if(sideChosen == 1)tempV = xsVectorSet(randomFloat(toTiles(0.6), toTiles(1.0)), 0.0, randomFloat(0, toTiles(1.0)));");
code("if(sideChosen == 2)tempV = xsVectorSet(randomFloat(0, toTiles(1.0)), 0.0, randomFloat(0, toTiles(0.4)));");
code("if(sideChosen == 3)tempV = xsVectorSet(randomFloat(0, toTiles(0.4)), 0.0, randomFloat(0, toTiles(1.0)));");
code("for(j = 0; < 20) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("paintCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.04),");
code("\"GrassB\", randomFloatWeighted(2.0, 5.0, 2));");
code("}");
code("}");
code("for(i = 0; < 10) {");
code("if(sideChosen == 0)tempV = xsVectorSet(randomFloat(0, toTiles(1.0)), 0.0, randomFloat(toTiles(0.8), toTiles(1.0)));");
code("if(sideChosen == 1)tempV = xsVectorSet(randomFloat(toTiles(0.8), toTiles(1.0)), 0.0, randomFloat(0, toTiles(1.0)));");
code("if(sideChosen == 2)tempV = xsVectorSet(randomFloat(0, toTiles(1.0)), 0.0, randomFloat(0, toTiles(0.2)));");
code("if(sideChosen == 3)tempV = xsVectorSet(randomFloat(0, toTiles(0.2)), 0.0, randomFloat(0, toTiles(1.0)));");
code("for(j = 0; < 20) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 15.0);");
code("paintCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.04),");
code("\"ForestFloorOak\", randomFloatWeighted(4.0, 8.0, 2));");
code("}");
code("}");
code("smooth(10);");
code("replaceTerrainBelowHeightMax(\"ShorelineJungleA\", \"CoralC\", -1.0);");
code("replaceTerrainBelowHeightMax(\"CoralC\", \"Black\", -2.0);");
code("refreshPassability();");
code("paintTrees(\"ForestFloorOak\", \"Oak Tree\");");
code("paintUnit(\"GrassDirt50\", \"Market\", 0, 0.001);");
code("paintUnit(\"GrassDirt50\", \"Academy\", 0, 0.001);");
code("paintUnit(\"GrassDirt50\", \"Temple\", 0, 0.001);");
code("paintUnit(\"GrassDirt50\", \"Armory\", 0, 0.001);");
code("paintUnit(\"GrassDirt50\", \"House\", 0, 0.01);");
code("paintUnit(\"GrassDirt50\", \"Oak Tree\", 0, 0.01);");
code("paintUnit(\"GrassDirt50\", \"Fence Stone\", 0, 0.004);");
code("paintUnit(\"GrassDirt50\", \"Grass\", 0, 0.01);");
code("paintUnit(\"GrassDirt50\", \"Seagull\", 0, 0.001);");
code("paintUnit(\"GrassDirt50\", \"Militia\", 0, 0.005);");
code("paintUnit(\"GrassDirt50\", \"Toxotes\", 0, 0.005);");
code("paintUnit(\"GrassDirt50\", \"Hippikon\", 0, 0.005);");
code("paintUnit(\"GrassB\", \"Storehouse\", 0, 0.01);");
code("paintUnit(\"GrassB\", \"Wood Pile 1\", 0, 0.001);");
code("paintUnit(\"GrassB\", \"Wood Pile 2\", 0, 0.001);");
code("paintUnit(\"GrassB\", \"Wood Pile 3\", 0, 0.001);");
code("paintUnit(\"GrassB\", \"Villager Greek\", 0, 0.01);");
code("paintUnit(\"GrassB\", \"Oak Stump\", 0, 0.1);");
code("paintUnit(\"GrassB\", \"Oak Tree\", 0, 0.1);");
code("paintUnit(\"CoralC\", \"Dock\", 0, 0.02);");
code("paintUnit(\"Black\", \"Fish - Herring\", 0, 0.01);");
code("paintUnit(\"Black\", \"Fishing Ship Greek\", 0, 0.004);");
code("int setna = trGetNextUnitScenarioNameNumber();");
code("if(sideChosen==0)deployCluster(randomFloat(toMetres(0.2), toMetres(0.8)), toMetres(0.5),");
code("\"Setna\", 0, 1, 10.0, true);");
code("if(sideChosen==1)deployCluster(toMetres(0.5), randomFloat(toMetres(0.2), toMetres(0.8)),");
code("\"Setna\", 0, 1, 10.0, true);");
code("if(sideChosen==2)deployCluster(randomFloat(toMetres(0.2), toMetres(0.8)), toMetres(0.5),");
code("\"Setna\", 0, 1, 10.0, true);");
code("if(sideChosen==3)deployCluster(toMetres(0.5), randomFloat(toMetres(0.2), toMetres(0.8)),");
code("\"Setna\", 0, 1, 10.0, true);");
code("int bird = trGetNextUnitScenarioNameNumber();");
code("if(sideChosen==0)deployCluster(toMetres(0.5), toMetres(0.05), \"Oar Footprint\", cNumberNonGaiaPlayers, 1, 10.0, true);");
code("if(sideChosen==1)deployCluster(toMetres(0.05), toMetres(0.5), \"Oar Footprint\", cNumberNonGaiaPlayers, 1, 10.0, true);");
code("if(sideChosen==2)deployCluster(toMetres(0.5), toMetres(0.95), \"Oar Footprint\", cNumberNonGaiaPlayers, 1, 10.0, true);");
code("if(sideChosen==3)deployCluster(toMetres(0.95), toMetres(0.5), \"Oar Footprint\", cNumberNonGaiaPlayers, 1, 10.0, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bird, true);");
code("trUnitChangeProtoUnit(\"Victory Marker\");");
code("for(p = 1; <= cNumberNonGaiaPlayers) {");
code("if(sideChosen==0)deployCluster(toMetres(0.5), toMetres(0.05), \"Transport Ship Greek\", p, 1, 10.0, true);");
code("if(sideChosen==1)deployCluster(toMetres(0.05), toMetres(0.5), \"Transport Ship Greek\", p, 1, 10.0, true);");
code("if(sideChosen==2)deployCluster(toMetres(0.5), toMetres(0.95), \"Transport Ship Greek\", p, 1, 10.0, true);");
code("if(sideChosen==3)deployCluster(toMetres(0.95), toMetres(0.5), \"Transport Ship Greek\", p, 1, 10.0, true);");
code("}");
code("}");
code("void createMarsh(){");
code("DestroyNumber = trGetNextUnitScenarioNameNumber();");
code("int currentId = 0;");
code("for(n = DontDestroyBelow ; < DestroyNumber){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+n);");
code("trUnitDestroy();");
code("}");
code("clearMap(\"SandC\", -5.0);");
code("paintWaterKeepingMapPassable(0.0, 1.0, vector(0.2, 0.4, 0.8));");
code("for(i = 0; < 50) {");
code("tempV = xsVectorSet(randomInt(toTiles(0), toTiles(1.0)), 0.0, randomInt(toTiles(0), toTiles(1.0)));");
code("for(k = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 4.0);");
code("paintCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(randomFloat(0.0, 0.03)), \"SavannahB\", -5.0);");
code("}");
code("}");
code("for(i = 0; < 40) {");
code("int centrePosX = randomInt(toTiles(0), toTiles(1.0));");
code("int centrePosZ = randomInt(toTiles(0), toTiles(1.0));");
code("for(j = 0; < 10) {");
code("tempV = randomCircleLoc(centrePosX, centrePosZ, 5.0);");
code("for(k = 0; < 3) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("paintCircleHeight2(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(randomFloat(0.0, 0.04)), \"DirtA\", 2.0);");
code("}");
code("}");
code("}");
code("for(i = 0; < 250) {");
code("tempV = xsVectorSet(randomInt(toTiles(0), toTiles(1.0)), 0.0, randomInt(toTiles(0), toTiles(1.0)));");
code("for(k = 0; < 5) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 4.0);");
code("replaceCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(randomFloatWeighted(0.0, 0.05, 2)),");
code("\"SavannahB\", \"SavannahA\");");
code("}");
code("}");
code("for(i = 0; < 250) {");
code("tempV = xsVectorSet(randomInt(toTiles(0), toTiles(1.0)), 0.0, randomInt(toTiles(0), toTiles(1.0)));");
code("for(k = 0; < 5) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 2.0);");
code("replaceCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(randomFloatWeighted(0.0, 0.05, 2)),");
code("\"DirtA\", \"SavannahC\");");
code("}");
code("}");
code("vector tileForStart = vector(0,0,0);");
code("tileForStart = getRandomTileMatchingTerrain(\"SavannahC\", 30);");
code("int StartTileX = xsVectorGetX(tileForStart);");
code("int StartTileZ = xsVectorGetZ(tileForStart);");
code("float StartHeight = trGetTerrainHeight(StartTileX, StartTileZ);");
code("float StartMetreX = StartTileX*2+1;");
code("float StartMetreZ = StartTileZ*2+1;");
code("trVectorQuestVarSet(\"dir\", xsVectorSet(11, 0, 0));");
code("trVectorQuestVarSet(\"CentreMap\", xsVectorSet(StartMetreX, 0, StartMetreZ));");
code("paintCircleHeight2(StartTileX, StartTileZ, 8, \"GrassDirt75\", StartHeight+1);");
code("float baseCos = xsCos(6.283185 / (cNumberNonGaiaPlayers-1));");
code("float baseSin = xsSin(6.283185 / (cNumberNonGaiaPlayers-1));");
code("int heading = 90;");
code("for(p=1; < cNumberNonGaiaPlayers) {");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"base\", trVectorQuestVarGet(\"CentreMap\") + trVectorQuestVarGet(\"dir\"));");
code("heading = heading-(360/(cNumberNonGaiaPlayers-1));");
code("if(heading > 360){");
code("heading = heading-360;");
code("}");
code("if(heading < 0){");
code("heading = heading+360;");
code("}");
code("if(xGetBool(dPlayerData, xPlayerActive) == true){");
code("CreateRhino(p, trVectorQuestVarGetX(\"base\"), trVectorQuestVarGetZ(\"base\"), heading);");
code("}");
code("trPlayerKillAllGodPowers(p);");
code("trVectorQuestVarSet(\"dir\", rotationMatrix(trVectorQuestVarGet(\"dir\"), baseCos, baseSin));");
code("trUnitSelectClear();");
code("}");
code("int ABORT = 0;");
code("vector tileForMinigame = vector(0,0,0);");
code("tileForMinigame = getRandomTileMatchingTerrain(\"SavannahC\", 11);");
code("while(distanceBetweenVectors(tileForStart, tileForMinigame, true) < 3000){");
code("tileForMinigame = getRandomTileMatchingTerrain(\"SavannahC\", 11);");
code("ABORT = ABORT+1;");
code("if(ABORT >500){");
code("break;");
code("trChatSend(0, \"ERROR NO MINIGAME TILE\");");
code("}");
code("}");
code("int MinigameTileX = xsVectorGetX(tileForMinigame);");
code("int MinigameTileZ = xsVectorGetZ(tileForMinigame);");
code("float MinigameHeight = trGetTerrainHeight(MinigameTileX, MinigameTileZ);");
code("float MinigameMetreX = MinigameTileX*2+1;");
code("float MinigameMetreZ = MinigameTileZ*2+1;");
code("PaintAtlantisArea(MinigameTileX-1, MinigameTileZ-1, MinigameTileX+1, MinigameTileZ+1, 5, 4);");
code("trChangeTerrainHeight(MinigameTileX-1, MinigameTileZ-1, MinigameTileX+1, MinigameTileZ+1, MinigameHeight, false);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", MinigameMetreX, MinigameMetreZ,0);");
code("trQuestVarSet(\"MinigameStartID\", currentId);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", MinigameMetreX, MinigameMetreZ,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Healing SFX\");");
code("trQuestVarSet(\"MinigameStartSFX\", currentId);");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Torch\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitSetAnimationPath(\"0,1,0,0,1,1,1\");");
code("StageVector = tileForMinigame;");
code("for(i = 0; <54){");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Fence Wood\", 20, i*4+20, 0);");
code("xAddDatabaseBlock(dFences, true);");
code("xSetInt(dFences, xUnitID, currentId);");
code("xSetInt(dFences, xSegment, 1);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Fence Wood\", 106, i*4+20, 0);");
code("xAddDatabaseBlock(dFences, true);");
code("xSetInt(dFences, xUnitID, currentId);");
code("if(i < 26){");
code("xSetInt(dFences, xSegment, 5);");
code("}");
code("else{");
code("xSetInt(dFences, xSegment, 6);");
code("}");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Fence Wood\", 232, i*4+20, 0);");
code("xAddDatabaseBlock(dFences, true);");
code("xSetInt(dFences, xUnitID, currentId);");
code("xSetInt(dFences, xSegment, 2);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Fence Wood\", i*4+20, 20, 90);");
code("xAddDatabaseBlock(dFences, true);");
code("xSetInt(dFences, xUnitID, currentId);");
code("xSetInt(dFences, xSegment, 3);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Fence Wood\", i*4+20, 106, 90);");
code("xAddDatabaseBlock(dFences, true);");
code("xSetInt(dFences, xUnitID, currentId);");
code("if(i < 26){");
code("xSetInt(dFences, xSegment, 7);");
code("}");
code("else{");
code("xSetInt(dFences, xSegment, 8);");
code("}");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Fence Wood\", i*4+20, 232, 90);");
code("xAddDatabaseBlock(dFences, true);");
code("xSetInt(dFences, xUnitID, currentId);");
code("xSetInt(dFences, xSegment, 4);");
code("}");
code("for(i = 0; < 25) {");
code("tempV = xsVectorSet(randomInt(toTiles(0), toTiles(1.0)), 0.0, randomInt(toTiles(0), toTiles(1.0)));");
code("for(k = 0; < 5) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 2.0);");
code("replaceCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(randomFloatWeighted(0.0, 0.05, 2)),");
code("\"DirtA\", \"SavannahB\");");
code("paintCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.04),");
code("\"SavannahC\", randomFloatWeighted(1.0, 5.0, 2));");
code("tempV3 = randomCircleLoc(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), 2.0);");
code("replaceCircle(xsVectorGetX(tempV3), xsVectorGetZ(tempV3), toTiles(randomFloatWeighted(0.0, 0.01, 1)),");
code("\"SavannahC\", \"SavannahD\");");
code("paintCircleHeight(xsVectorGetX(tempV3), xsVectorGetZ(tempV3), toTiles(0.01),");
code("\"SavannahA\", randomFloatWeighted(1.0, 2.0, 2));");
code("deployCluster(xsVectorGetX(tempV3)*2, xsVectorGetZ(tempV3)*2, \"Bush\", 0, 8, 10.0, false);");
code("deployCluster(xsVectorGetX(tempV3)*2, xsVectorGetZ(tempV3)*2, \"Grass\", 0, 18, 10.0, false);");
code("deployCluster(xsVectorGetX(tempV3)*2, xsVectorGetZ(tempV3)*2, \"Savannah Tree\", 0, 2, 7.0, false);");
code("}");
code("}");
code("smooth(5);");
code("vector tileForEnd = getRandomTileMatchingTerrain(\"SavannahC\", 10);");
code("int EndTileX = xsVectorGetX(tileForEnd);");
code("int EndTileZ = xsVectorGetZ(tileForEnd);");
code("float EndHeight = trGetTerrainHeight(EndTileX, EndTileZ);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForEnd),2*xsVectorGetZ(tileForEnd),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("FlagSFXID = currentId;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForEnd),2*xsVectorGetZ(tileForEnd),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("FlagUnitID = currentId;");
code("float EndMetreX = EndTileX*2+1;");
code("float EndMetreZ = EndTileZ*2+1;");
code("for(a=0 ; < 60){");
code("}");
code("paintUnit(\"SavannahA\", \"Water Reeds\", 0, 0.4);");
code("paintUnit(\"SavannahA\", \"Rock River Sandy\", 0, 0.2);");
code("paintUnit(\"SavannahC\", \"Rock Sandstone Small\", 0, 0.01);");
code("paintUnit(\"SavannahC\", \"Sand Drift Plain\", 0, 0.002);");
code("paintUnit(\"SavannahC\", \"Rock Sandstone Big\", 0, 0.015);");
code("paintUnit(\"SavannahC\", \"Dust Devil\", 0, 0.005);");
code("refreshPassability();");
code("int chestnum = xsMax(4,PlayersActive/2+1);");
code("ABORT = 0;");
code("tileForStart = tileForStart*2;");
code("while(chestnum > 0){");
code("trQuestVarSetFromRand(\"x\", 0, 126);");
code("trQuestVarSetFromRand(\"z\", 0, 126);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 1*trQuestVarGet(\"x\"),1*trQuestVarGet(\"z\"), 0);");
code("if(trCountUnitsInArea(\"\"+currentId, 0, \"Great Box\", 40) == 0){");
code("if(xsVectorGetY(kbGetBlockPosition(\"\"+currentId)) > 0){");
code("if(distanceBetweenVectors(tileForStart, kbGetBlockPosition(\"\"+currentId)) > 1500){");
code("CreateChest(1*trQuestVarGet(\"x\"),1*trQuestVarGet(\"z\"));");
code("chestnum = chestnum-1;");
code("}");
code("}");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT >500){");
code("trChatSend(0, \"ERROR NO CHESTS\");");
code("break;");
code("}");
code("}");
code("paintCircleHeight2(StartTileX, StartTileZ, 8, \"GrassDirt75\", StartHeight+1);");
code("LeaveTerrain = \"IceA\";");
code("Stage = 2;");
code("StageRequirement = 50;");
code("StageScore = 0;");
code("PlayersDead = 0;");
code("EndPoint = tileForEnd;");
code("MinigameFound = false;");
code("InMinigame = false;");
code("xsEnableRule(\"Reset Blackmap\");");
code("}");
code("void createGoatArea(){");
code("trBlockAllSounds();");
code("DestroyNumber = trGetNextUnitScenarioNameNumber();");
code("int currentId = 0;");
code("for(n = NewDestroyNumber ; < DestroyNumber){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+n);");
code("trUnitDestroy();");
code("}");
code("string baseTerrain = \"SnowA\";");
code("trSetCivAndCulture(0, 7, 2);");
code("clearMap(\"Black\", -5.0);");
code("int centrePosX = randomInt(toTiles(0.45), toTiles(0.55));");
code("int centrePosZ = randomInt(toTiles(0.45), toTiles(0.55));");
code("int ABORT = 0;");
code("for(i = 0; < 40) {");
code("tempV = randomCircleLoc(centrePosX, centrePosZ, 80.0);");
code("for(j = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 20.0);");
code("paintCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.02), \"CliffNorseB\", 10.0);");
code("}");
code("}");
code("for(i = 0; < 20) {");
code("tempV = randomCircleLoc(centrePosX, centrePosZ, 80.0);");
code("for(j = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 5.0);");
code("paintCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.01), \"ShorelineAtlanticB\");");
code("}");
code("}");
code("for(i = 0; < 40) {");
code("tempV = randomCircleLoc(centrePosX, centrePosZ, 80.0);");
code("for(j = 0; < 20) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 4.0);");
code("paintCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), 2, \"SnowGrass50\");");
code("for(k = 0; < 2) {");
code("tempV3 = randomCircleLoc(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), 1.0);");
code("paintCircle(xsVectorGetX(tempV3), xsVectorGetZ(tempV3), 1, \"SnowGrass25\");");
code("}");
code("}");
code("}");
code("smooth(4);");
code("replaceTerrainBelowHeightMax(\"CliffEgyptianB\", \"CliffEgyptianA\", 4.0);");
code("replaceTerrainAboveHeightMax(\"SandD\", \"SandC\", 6.0);");
code("replaceTerrainAboveHeightMax(\"SandC\", \"CliffNorseA\", 0.0);");
code("replaceTerrainAboveHeightMin(\"Black\", \"SnowA\", -999.0);");
code("replaceTerrainAtMinSteepness(\"SnowA\", \"CliffNorseA\", 1.5);");
code("replaceTerrainAtMinSteepness(\"SnowGrass25\", \"CliffNorseA\", 1.5);");
code("replaceTerrainAtMinSteepness(\"SnowGrass50\", \"CliffNorseA\", 1.5);");
code("replaceTerrainAtMinSteepness(\"ShorelineAtlanticB\", \"UnderwaterRockC\", 1.5);");
code("vector tileForEnd = getRandomTileMatchingTerrain(\"SnowA\", 10);");
code("int EndTileX = xsVectorGetX(tileForEnd);");
code("int EndTileZ = xsVectorGetZ(tileForEnd);");
code("float EndHeight = 6;");
code("float EndMetreX = EndTileX*2+1;");
code("float EndMetreZ = EndTileZ*2+1;");
code("vector tileForStart = getRandomTileMatchingTerrain(\"SnowA\", 10);");
code("while(distanceBetweenVectors(tileForStart, tileForEnd, true) < 3000-ABORT){");
code("tileForStart = getRandomTileMatchingTerrain(\"SnowA\", 10);");
code("ABORT = ABORT +1;");
code("if(ABORT > 500){");
code("trChatSend(0, \"ERROR - CANT PAINT END AREA\");");
code("break;");
code("}");
code("}");
code("int StartTileX = xsVectorGetX(tileForStart);");
code("int StartTileZ = xsVectorGetZ(tileForStart);");
code("float StartHeight = 8;");
code("float StartMetreX = StartTileX*2+1;");
code("float StartMetreZ = StartTileZ*2+1;");
code("trVectorQuestVarSet(\"dir\", xsVectorSet(11, 0, 0));");
code("trVectorQuestVarSet(\"CentreMap\", xsVectorSet(StartMetreX, 0, StartMetreZ));");
code("LeaveTerrain = \"IceA\";");
code("paintCircleHeight2(StartTileX, StartTileZ, 8, \"CliffNorseA\", StartHeight);");
code("paintCircleHeight2(StartTileX, StartTileZ, 7, \"OlympusA\", StartHeight);");
code("paintCircleHeight2(EndTileX, EndTileZ, 8, \"CliffNorseA\", EndHeight);");
code("paintCircleHeight2(EndTileX, EndTileZ, 7, \"OlympusA\", EndHeight);");
code("paintCircleHeight2(EndTileX, EndTileZ, 5, LeaveTerrain, EndHeight);");
code("float baseCos = xsCos(6.283185 / (cNumberNonGaiaPlayers-1));");
code("float baseSin = xsSin(6.283185 / (cNumberNonGaiaPlayers-1));");
code("int heading = 90;");
code("for(p=1; < cNumberNonGaiaPlayers) {");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"base\", trVectorQuestVarGet(\"CentreMap\") + trVectorQuestVarGet(\"dir\"));");
code("heading = heading-(360/(cNumberNonGaiaPlayers-1));");
code("if(heading > 360){");
code("heading = heading-360;");
code("}");
code("if(heading < 0){");
code("heading = heading+360;");
code("}");
code("if(xGetBool(dPlayerData, xPlayerActive) == true){");
code("CreateGoat(p, trVectorQuestVarGetX(\"base\"), trVectorQuestVarGetZ(\"base\"), heading);");
code("}");
code("trPlayerKillAllGodPowers(p);");
code("trVectorQuestVarSet(\"dir\", rotationMatrix(trVectorQuestVarGet(\"dir\"), baseCos, baseSin));");
code("trUnitSelectClear();");
code("}");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForEnd),2*xsVectorGetZ(tileForEnd),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trMutateSelected(kbGetProtoUnitID(\"Osiris Box Glow\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0\");");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForEnd),2*xsVectorGetZ(tileForEnd),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Flag\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0\");");
code("FlagUnitID = currentId;");
code("for(i = 0; < 10) {");
code("tempV = getRandomTileMatchingTerrain(\"CliffNorseB\", 5);");
code("for(j = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 8.0);");
code("paintCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.01), \"IceB\");");
code("}");
code("}");
code("for(i = 0; < 10) {");
code("tempV = getRandomTileMatchingTerrain(\"SnowA\", 5);");
code("for(j = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 8.0);");
code("paintCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.01), \"IceB\");");
code("}");
code("}");
code("replaceTerrainAtMinSteepness(\"IceB\", \"RiverIcyC\", 1.5);");
code("ABORT = 0;");
code("vector tileForMinigame = vector(0,0,0);");
code("tileForMinigame = getRandomTileMatchingTerrain(\"CliffNorseB\", 15);");
code("while((distanceBetweenVectors(tileForStart, tileForMinigame, true) < 3000) && (distanceBetweenVectors(tileForEnd,");
code("tileForMinigame, true) < 3000)){");
code("tileForMinigame = getRandomTileMatchingTerrain(\"CliffNorseB\", 20);");
code("ABORT = ABORT+1;");
code("if(ABORT >500){");
code("break;");
code("trChatSend(0, \"ERROR NO MINIGAME TILE\");");
code("}");
code("}");
code("int MinigameTileX = xsVectorGetX(tileForMinigame);");
code("int MinigameTileZ = xsVectorGetZ(tileForMinigame);");
code("float MinigameHeight = trGetTerrainHeight(MinigameTileX, MinigameTileZ);");
code("float MinigameMetreX = MinigameTileX*2+1;");
code("float MinigameMetreZ = MinigameTileZ*2+1;");
code("PaintAtlantisArea(MinigameTileX-1, MinigameTileZ-1, MinigameTileX+1, MinigameTileZ+1, 5, 4);");
code("trChangeTerrainHeight(MinigameTileX-1, MinigameTileZ-1, MinigameTileX+1, MinigameTileZ+1, MinigameHeight, false);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", MinigameMetreX, MinigameMetreZ,0);");
code("trQuestVarSet(\"MinigameStartID\", currentId);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", MinigameMetreX, MinigameMetreZ,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Healing SFX\");");
code("trQuestVarSet(\"MinigameStartSFX\", currentId);");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Torch\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitSetAnimationPath(\"0,1,0,0,1,1,1\");");
code("StageVector = tileForMinigame;");
code("int chestnum = xsMax(4,cNumberNonGaiaPlayers/2+1);");
code("while(chestnum > 0){");
code("trQuestVarSetFromRand(\"x\", 0, 252);");
code("trQuestVarSetFromRand(\"z\", 0, 252);");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) == getTerrainType(baseTerrain)) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) == getTerrainSubType(baseTerrain))){");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 1*trQuestVarGet(\"x\"),1*trQuestVarGet(\"z\"), 0);");
code("if(trCountUnitsInArea(\"\"+currentId, 0, \"Great Box\", 60) == 0){");
code("CreateChest(1*trQuestVarGet(\"x\"),1*trQuestVarGet(\"z\"));");
code("chestnum = chestnum-1;");
code("}");
code("}");
code("}");
code("ABORT = 0;");
code("int shrinenum = xsMax(12,cNumberNonGaiaPlayers*4);");
code("while(shrinenum > 0){");
code("trQuestVarSetFromRand(\"x\", 0, 252);");
code("trQuestVarSetFromRand(\"z\", 0, 252);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 1*trQuestVarGet(\"x\"),1*trQuestVarGet(\"z\"), 0);");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"IceA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"IceA\"))){");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"OlympusA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"OlympusA\"))){");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"CliffNorseA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"CliffNorseA\"))){");
code("if(trCountUnitsInArea(\"\"+currentId, 0, \"Shrine\", 20) == 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Shrine\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"2,0,0,0,0\");");
code("xAddDatabaseBlock(dInterractables, true);");
code("xSetInt(dInterractables, xUnitID, currentId);");
code("xSetInt(dInterractables, xType, 2);");
code("xSetInt(dInterractables, xSubtype, 0);");
code("xSetInt(dInterractables, xSquare1, 0);");
code("shrinenum = shrinenum-1;");
code("}");
code("}");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT >500){");
code("break;");
code("trChatSend(0, \"ERROR SHRINE\");");
code("}");
code("}");
code("}");
code("int runenum = xsMin(12,cNumberNonGaiaPlayers*4);");
code("while(runenum > 0){");
code("trQuestVarSetFromRand(\"x\", 0, 126);");
code("trQuestVarSetFromRand(\"z\", 0, 126);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"temph\",0,360,true);");
code("UnitCreate(0, \"Cinematic Block\", 2*trQuestVarGet(\"x\"),2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"));");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"IceA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"IceA\"))){");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"OlympusA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"OlympusA\"))){");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"CliffNorseA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"CliffNorseA\"))){");
code("if(trCountUnitsInArea(\"\"+currentId, 0, \"Shrine\", 20) == 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Runestone\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trSetScale(2);");
code("xAddDatabaseBlock(dInterractables, true);");
code("xSetInt(dInterractables, xUnitID, currentId);");
code("xSetInt(dInterractables, xType, 3);");
code("xSetInt(dInterractables, xSubtype, 0);");
code("xSetInt(dInterractables, xSquare1, 0);");
code("xSetInt(dInterractables, xSquare2, 0);");
code("runenum = runenum-1;");
code("}");
code("}");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT >500){");
code("break;");
code("trChatSend(0, \"ERROR RUNE\");");
code("}");
code("}");
code("}");
code("int camnum = xsMax(2,cNumberNonGaiaPlayers/4);");
code("while(camnum > 0){");
code("trQuestVarSetFromRand(\"x\", 0, 126);");
code("trQuestVarSetFromRand(\"z\", 0, 126);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"temph\",0,360,true);");
code("UnitCreate(0, \"Cinematic Block\", 2*trQuestVarGet(\"x\"),2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"));");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"IceA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"IceA\"))){");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"OlympusA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"OlympusA\"))){");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"CliffNorseA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"CliffNorseA\"))){");
code("if(trCountUnitsInArea(\"\"+currentId, 0, \"Outpost\", 20) == 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trSetSelectedScale(1,0.4,1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"0,1,0,0,0\");");
code("FloatingUnitAnimIdle(\"Camera\", 2*trQuestVarGet(\"x\"), 4, 2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"),1,1,1);");
code("xAddDatabaseBlock(dInterractables, true);");
code("xSetInt(dInterractables, xUnitID, currentId);");
code("xSetInt(dInterractables, xType, 5);");
code("xSetInt(dInterractables, xSubtype, 0);");
code("xSetInt(dInterractables, xSquare1, 1*trQuestVarGet(\"temph\"));");
code("xSetInt(dInterractables, xSquare2, 1*trQuestVarGet(\"QVHero\"));");
code("camnum = camnum-1;");
code("}");
code("}");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT >500){");
code("break;");
code("trChatSend(0, \"ERROR RUNE\");");
code("}");
code("}");
code("}");
code("int helpnum = xsMin(8,cNumberNonGaiaPlayers*2);");
code("int temp = 0;");
code("while(helpnum > 0){");
code("trQuestVarSetFromRand(\"x\", 0, 126);");
code("trQuestVarSetFromRand(\"z\", 0, 126);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"temph\",0,360,true);");
code("UnitCreate(0, \"Cinematic Block\", 2*trQuestVarGet(\"x\"),2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"));");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"IceA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"IceA\"))){");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"OlympusA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"OlympusA\"))){");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"CliffNorseA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"CliffNorseA\"))){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*trQuestVarGet(\"x\"),2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trMutateSelected(kbGetProtoUnitID(\"Milestone\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"2,0,0,0,0,0,0\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex finish linked\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("xAddDatabaseBlock(dHelp, true);");
code("xSetInt(dHelp, xUnitID, temp);");
code("xSetInt(dHelp, xSubID, currentId);");
code("helpnum = helpnum-1;");
code("}");
code("}");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT >500){");
code("break;");
code("trChatSend(0, \"ERROR Mile\");");
code("}");
code("}");
code("SpawnShop(\"Vision\", \"vision\", iModulo(2,trTime())+1);");
code("SpawnShop(\"Vortex\", \"vortex\", iModulo(3,trTime())+2);");
code("SpawnShop(\"Bolt\", \"bolt\", iModulo(4,trTime())+3);");
code("refreshPassability();");
code("int templeSafeArea = trGetNextUnitScenarioNameNumber();");
code("paintUnit(\"SnowGrass25\", \"Pine Snow\", 0, 0.07);");
code("paintUnit(\"SnowGrass50\", \"Pine Snow\", 0, 0.12);");
code("paintUnit(\"SnowA\", \"Pine Snow\", 0, 0.035);");
code("paintUnit(\"SnowA\", \"Rock River Icy\", 0, 0.02);");
code("paintUnit(\"SnowA\", \"Frost Drift\", 0, 0.01);");
code("paintUnit(\"CliffNorseB\", \"Ice Block\", 0, 0.02);");
code("paintUnit(\"CliffNorseB\", \"Rock Granite Sprite\", 0, 0.04);");
code("paintUnit(\"CliffNorseB\", \"Rock Granite Small\", 0, 0.01);");
code("paintUnit(\"ShorelineAtlanticB\", \"Snow Drift Barracks\", 0, 0.02);");
code("paintUnit(\"ShorelineAtlanticB\", \"Frost Drift\", 0, 0.04);");
code("paintUnit(\"IceB\", \"Snow Drift Tower\", 0, 0.02);");
code("paintUnit(\"IceB\", \"Frost Drift\", 0, 0.04);");
code("LeaveTerrain = \"IceA\";");
code("Stage = 3;");
code("StageRequirement = 60;");
code("StageScore = 0;");
code("PlayersDead = 0;");
code("EndPoint = tileForEnd;");
code("MinigameFound = false;");
code("InMinigame = false;");
code("xsEnableRule(\"Reset Blackmap\");");
code("trUnblockAllSounds();");
code("}");
code("void createUluru(){");
code("string baseTerrain = \"CliffEgyptianB\";");
code("trSetCivAndCulture(0, 0, 0);");
code("clearMap(\"Black\", -5.0);");
code("int centrePosX = randomInt(toTiles(0.45), toTiles(0.55));");
code("int centrePosZ = randomInt(toTiles(0.45), toTiles(0.55));");
code("for(i = 0; < 10) {");
code("tempV = randomCircleLoc(centrePosX, centrePosZ, 20.0);");
code("for(j = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 30.0);");
code("paintCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.08), \"CliffEgyptianB\", 20.0);");
code("}");
code("}");
code("smooth(20);");
code("replaceTerrainBelowHeightMin(\"CliffEgyptianB\", \"CliffEgyptianA\", 12.0);");
code("replaceTerrainAboveHeightMax(\"SandC\", \"CliffNorseA\", 8.0);");
code("replaceTerrainAboveHeightMax(\"SandD\", \"SandC\", 14.0);");
code("refreshPassability();");
code("paintUnit(\"Black\", \"Pine\", 0, 0.002);");
code("paintUnit(\"Black\", \"Oak Tree\", 0, 0.01);");
code("replaceTerrainAboveHeightMin(\"Black\", \"SandC\", -999.0);");
code("refreshPassability();");
code("int templeSafeArea = trGetNextUnitScenarioNameNumber();");
code("deployCluster(2.0*centrePosX, 2.0*centrePosZ, \"Temple Underworld\", 0, 1, 20.0, true);");
code("paintUnit(\"OlympusTile\", \"Ruins\", 0, 0.01);");
code("paintUnit(\"OlympusTile\", \"Columns\", 0, 0.01);");
code("paintUnit(\"OlympusTile\", \"Fallen Columns\", 0, 0.01);");
code("}");
code("void BuildSandMaze(){");
code("clearMap(\"SandC\", 2.0);");
code("for(i = 0; < 100){");
code("tempV = xsVectorSet(toTiles(randomFloat(0.2, 0.8)), 0.0, toTiles(randomFloat(0.2, 0.8)));");
code("tempF = randomInt(0, 2) * 10 - 5;");
code("for(j = 0; < 4) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("changeCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.05), tempF);");
code("}");
code("}");
code("smooth(3);");
code("replaceTerrainAtMaxSteepness(\"SandC\", \"CliffEgyptianA\", 0.8);");
code("trChangeTerrainHeight(0, 0, toTiles(1.0), toTiles(1.0), 0, false);");
code("setTerrainHeightForTerrain(\"CliffEgyptianA\", 5.0);");
code("smooth(2);");
code("setTerrainHeightForTerrain(\"SandC\", 0.0);");
code("replaceTerrainAboveHeightMin(\"CliffEgyptianA\", \"ForestfloorPalm\", 4.0);");
code("replaceTerrainBelowHeightMax(\"CliffEgyptianA\", \"SandC\", 0.0);");
code("smooth(1);");
code("paintTrees(\"ForestfloorPalm\", \"Palm\");");
code("refreshPassability();");
code("}");
code("void createForestArea(){");
code("string baseTerrain = \"GrassA\";");
code("int mapId = 2;");
code("int centrePosX = 0;");
code("int centrePosZ= 0;");
code("clearMap(\"ForestFloorOak\", 5.0);");
code("for(i = 0; < 30) {");
code("centrePosX = randomInt(toTiles(0), toTiles(1.0));");
code("centrePosZ = randomInt(toTiles(0), toTiles(1.0));");
code("for(j = 0; < 3) {");
code("tempV = randomCircleLoc(centrePosX, centrePosZ, 20.0);");
code("for(k = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("paintCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(randomFloat(0.0, 0.03)), \"GrassA\", 3.0);");
code("}");
code("}");
code("}");
code("for(i = 0; < 8) {");
code("centrePosX = randomInt(toTiles(0), toTiles(1.0));");
code("centrePosZ = randomInt(toTiles(0), toTiles(1.0));");
code("for(j = 0; < 3) {");
code("tempV = randomCircleLoc(centrePosX, centrePosZ, 20.0);");
code("for(k = 0; < 4) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("int floatCircleSize = toTiles(randomFloat(0.0, 0.04));");
code("changeCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), floatCircleSize, 15.0);");
code("replaceCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), floatCircleSize, \"ForestFloorOak\", \"ForestFloorPine\");");
code("replaceCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), floatCircleSize, \"GrassA\", \"SnowGrass75\");");
code("}");
code("}");
code("}");
code("replaceTerrainAtMinSteepness(\"GrassA\", \"CliffGreekA\", 2.0);");
code("for(i = 0; < 30) {");
code("tempV = xsVectorSet(toTiles(randomFloat(0.0, 1.0)), 0.0, toTiles(randomFloat(0.0, 1.0)));");
code("for(j = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("replaceCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.02), \"GrassA\", \"GrassDirt25\");");
code("}");
code("}");
code("for(i = 0; < 30) {");
code("tempV = xsVectorSet(toTiles(randomFloat(0.0, 1.0)), 0.0, toTiles(randomFloat(0.0, 1.0)));");
code("for(j = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("replaceCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.01), \"GrassA\", \"GrassDirt50\");");
code("}");
code("}");
code("refreshPassability();");
code("paintTrees(\"ForestFloorOak\", \"Oak Autumn\");");
code("paintTrees(\"ForestFloorPine\", \"Pine\");");
code("paintUnit(\"GrassA\", \"Flowers\", 0, 0.025);");
code("paintUnit(\"GrassDirt25\", \"Grass\", 0, 0.025);");
code("paintUnit(\"GrassDirt50\", \"Bush\", 0, 0.025);");
code("}");
code("void createDeepForestArea(){");
code("DestroyNumber = trGetNextUnitScenarioNameNumber();");
code("for(n = DontDestroyBelow ; < DestroyNumber){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+n);");
code("trUnitDestroy();");
code("}");
code("string baseTerrain = \"GaiaCreepA\";");
code("int ABORT = 0;");
code("int centrePosX = 0;");
code("int centrePosZ= 0;");
code("int currentId = trGetNextUnitScenarioNameNumber();");
code("clearMap(\"ForestFloorPine\", 5.0);");
code("for(i = 0; < 10) {");
code("centrePosX = randomInt(toTiles(0), toTiles(1.0));");
code("centrePosZ = randomInt(toTiles(0), toTiles(1.0));");
code("for(j = 0; < 10) {");
code("tempV = randomCircleLoc(centrePosX, centrePosZ, 20.0);");
code("for(k = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 40.0);");
code("paintCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(randomFloat(0.0, 0.03)), \"GaiaCreepA\", 5.0);");
code("}");
code("}");
code("}");
code("vector tileForEnd = getRandomTileMatchingTerrain(\"GaiaCreepA\", 10);");
code("int EndTileX = xsVectorGetX(tileForEnd);");
code("int EndTileZ = xsVectorGetZ(tileForEnd);");
code("float EndHeight = trGetTerrainHeight(EndTileX, EndTileZ);");
code("float EndMetreX = EndTileX*2+1;");
code("float EndMetreZ = EndTileZ*2+1;");
code("vector tileForStart = getRandomTileMatchingTerrain(\"GaiaCreepA\", 10);");
code("while(distanceBetweenVectors(tileForStart, tileForEnd, true) < 3000-ABORT){");
code("tileForStart = getRandomTileMatchingTerrain(\"GaiaCreepA\", 10);");
code("ABORT = ABORT +1;");
code("if(ABORT > 500){");
code("trChatSend(0, \"ERROR - CANT PAINT END AREA\");");
code("break;");
code("}");
code("}");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForEnd),2*xsVectorGetZ(tileForEnd),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trMutateSelected(kbGetProtoUnitID(\"Osiris Box Glow\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0\");");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForEnd),2*xsVectorGetZ(tileForEnd),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Flag\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0\");");
code("FlagUnitID = currentId;");
code("int StartTileX = xsVectorGetX(tileForStart);");
code("int StartTileZ = xsVectorGetZ(tileForStart);");
code("float StartHeight = trGetTerrainHeight(StartTileX, StartTileZ);");
code("float StartMetreX = StartTileX*2+1;");
code("float StartMetreZ = StartTileZ*2+1;");
code("ABORT = 0;");
code("vector tileForTrack = getRandomTileMatchingTerrain(\"GaiaCreepA\", 40);");
code("while(((distanceBetweenVectors(tileForTrack, tileForStart, true) < 2000)) || ((distanceBetweenVectors(tileForTrack,");
code("tileForEnd, true) < 2000)) || (xsVectorGetX(tileForTrack) > 100)){");
code("tileForTrack = getRandomTileMatchingTerrain(\"GaiaCreepA\", 10);");
code("ABORT = ABORT +1;");
code("if(ABORT > 500){");
code("trChatSend(0, \"ERROR - CANT PAINT BONUS AREA\");");
code("break;");
code("}");
code("}");
code("trPaintTerrain(xsVectorGetX(tileForTrack)-3,xsVectorGetZ(tileForTrack)-3,xsVectorGetX(tileForTrack)+33,");
code("xsVectorGetZ(tileForTrack)+13,3,9,false);");
code("trPaintTerrain(xsVectorGetX(tileForTrack),xsVectorGetZ(tileForTrack),xsVectorGetX(tileForTrack)+30,");
code("xsVectorGetZ(tileForTrack)+10,2,13,false);");
code("PaintAtlantisArea(xsVectorGetX(tileForTrack),xsVectorGetZ(tileForTrack)+4,xsVectorGetX(tileForTrack)+2,");
code("xsVectorGetZ(tileForTrack)+6,0,71);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForTrack)+2,2*xsVectorGetZ(tileForTrack)+11,0);");
code("trQuestVarSet(\"MinigameStartID\", currentId);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForTrack)+2,2*xsVectorGetZ(tileForTrack)+11,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Healing SFX\");");
code("trQuestVarSet(\"MinigameStartSFX\", currentId);");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Torch\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitSetAnimationPath(\"0,1,0,0,1,1,1\");");
code("StageVector = tileForTrack;");
code("LeaveTerrain = \"IceA\";");
code("paintCircleHeight2(StartTileX, StartTileZ, 8, \"GrassDirt25\", StartHeight);");
code("paintCircleHeight2(EndTileX, EndTileZ, 8, LeaveTerrain, EndHeight);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("paintUnit(\"ForestFloorPine\", \"Rotting Log\", 0, 0.015);");
code("for(i = currentId; < trGetNextUnitScenarioNameNumber()){");
code("tempV = kbGetBlockPosition(\"\"+i, true);");
code("trQuestVarSetFromRand(\"tempheading\", 1, 2, true);");
code("if(1*trQuestVarGet(\"tempheading\") == 1){");
code("trPaintTerrain(0.5 * xsVectorGetX(tempV)-2, 0.5 * xsVectorGetZ(tempV),0.5 * xsVectorGetX(tempV)+2,");
code("0.5 * xsVectorGetZ(tempV),getTerrainType(\"CliffA\"), getTerrainSubType(\"CliffA\"),false);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i);");
code("trSetSelectedScale(2,3,2);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i);");
code("setSelectedUnitHeadingDegress(90);");
code("}");
code("else{");
code("trPaintTerrain(0.5 * xsVectorGetX(tempV), 0.5 * xsVectorGetZ(tempV)-2,0.5 * xsVectorGetX(tempV),");
code("0.5 * xsVectorGetZ(tempV)+2,getTerrainType(\"CliffA\"), getTerrainSubType(\"CliffA\"),false);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i);");
code("trSetSelectedScale(2,3,2);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i);");
code("setSelectedUnitHeadingDegress(0);");
code("}");
code("xAddDatabaseBlock(dLogs, true);");
code("xSetInt(dLogs, xUnitID, i);");
code("xSetVector(dLogs, xUnitPos, kbGetBlockPosition(\"\"+i, true));");
code("}");
code("paintTrees(\"ForestFloorPine\", \"Pine\");");
code("paintUnit(\"GaiaCreepA\", \"Blowing Leaves\", 0, 0.01);");
code("paintUnit(\"GaiaCreepA\", \"Mist\", 0, 0.004);");
code("paintUnit(\"GaiaCreepA\", \"Tamarisk Tree Dead\", 0, 0.004);");
code("paintUnit(\"GaiaCreepA\", \"Tamarisk Tree\", 0, 0.004);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("paintUnit(\"GaiaCreepA\", \"Berry Bush\", 0, 0.004);");
code("for(i = currentId; < trGetNextUnitScenarioNameNumber()){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i);");
code("trSetSelectedScale(2,4,2);");
code("xAddDatabaseBlock(dBerryBush, true);");
code("xSetInt(dBerryBush, xUnitID, i);");
code("xSetVector(dBerryBush, xUnitPos, kbGetBlockPosition(\"\"+i, true));");
code("}");
code("paintUnit(\"GaiaCreepA\", \"GaiaCreepFlowers\", 0, 0.1);");
code("paintUnit(\"GaiaCreepA\", \"Bush\", 0, 0.12);");
code("paintUnit(\"GaiaCreepA\", \"Grass\", 0, 0.12);");
code("paintUnit(\"GaiaCreepA\", \"Rock Limestone Small\", 0, 0.02);");
code("paintUnit(\"GaiaCreepA\", \"Rock Granite Small\", 0, 0.02);");
code("trVectorQuestVarSet(\"dir\", xsVectorSet(11, 0, 0));");
code("trVectorQuestVarSet(\"CentreMap\", xsVectorSet(StartMetreX, 0, StartMetreZ));");
code("float baseCos = xsCos(6.283185 / (cNumberNonGaiaPlayers-1));");
code("float baseSin = xsSin(6.283185 / (cNumberNonGaiaPlayers-1));");
code("int heading = 90;");
code("for(p=1; < cNumberNonGaiaPlayers) {");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"base\", trVectorQuestVarGet(\"CentreMap\") + trVectorQuestVarGet(\"dir\"));");
code("heading = heading-(360/(cNumberNonGaiaPlayers-1));");
code("if(heading > 360){");
code("heading = heading-360;");
code("}");
code("if(heading < 0){");
code("heading = heading+360;");
code("}");
code("if(xGetBool(dPlayerData, xPlayerActive) == true){");
code("CreateGazelle(p, trVectorQuestVarGetX(\"base\"), trVectorQuestVarGetZ(\"base\"), heading);");
code("}");
code("trPlayerKillAllGodPowers(p);");
code("trVectorQuestVarSet(\"dir\", rotationMatrix(trVectorQuestVarGet(\"dir\"), baseCos, baseSin));");
code("trUnitSelectClear();");
code("}");
code("for(a = 1 ; <30){");
code("currentId  = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", xsVectorGetX(tileForTrack),xsVectorGetZ(tileForTrack)+5,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId );");
code("trUnitChangeInArea(0,0,\"Tamarisk Tree Dead\",\"Cinematic Block\", 15);");
code("}");
code("int chestnum = xsMax(4,cNumberNonGaiaPlayers/2+1);");
code("while(chestnum > 0){");
code("trQuestVarSetFromRand(\"x\", 0, 252);");
code("trQuestVarSetFromRand(\"z\", 0, 252);");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) == getTerrainType(baseTerrain)) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) == getTerrainSubType(baseTerrain))){");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 1*trQuestVarGet(\"x\"),1*trQuestVarGet(\"z\"), 0);");
code("if(trCountUnitsInArea(\"\"+currentId, 0, \"Great Box\", 60) == 0){");
code("CreateChest(1*trQuestVarGet(\"x\"),1*trQuestVarGet(\"z\"));");
code("chestnum = chestnum-1;");
code("}");
code("}");
code("}");
code("refreshPassability();");
code("Stage = 1;");
code("StageRequirement = 40;");
code("StageScore = 0;");
code("PlayersDead = 0;");
code("EndPoint = tileForEnd;");
code("ChestsFound = 0;");
code("MinigameFound = false;");
code("InMinigame = false;");
code("xsEnableRule(\"Reset Blackmap\");");
code("}");
code("void createCrocArea(){");
code("trBlockAllSounds();");
code("trSetCivAndCulture(0, 0, 0);");
code("DestroyNumber = trGetNextUnitScenarioNameNumber();");
code("int currentId = 0;");
code("for(n = NewDestroyNumber ; < DestroyNumber){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+n);");
code("trUnitDestroy();");
code("}");
code("string baseTerrain = \"RiverSandyC\";");
code("clearMap(\"RiverSandyC\", 0.0);");
code("paintWaterKeepingMapPassable(15.0, 20.0, vector(0.4588,0.6588,0.5098));");
code("for(i = 0; < 100){");
code("tempV = xsVectorSet(toTiles(randomFloat(0.0, 1.0)), 0.0, toTiles(randomFloat(0.0, 1.0)));");
code("tempF = randomInt(0, 2) * 10 - 5;");
code("for(j = 0; < 8) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("changeCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.05), tempF);");
code("}");
code("}");
code("smooth(4);");
code("replaceTerrainAtMaxSteepness(\"RiverSandyC\", \"ShorelineSandA\", 1.0);");
code("trChangeTerrainHeight(0, 0, toTiles(1.0), toTiles(1.0), 5.0, false);");
code("smooth(2);");
code("setTerrainHeightForTerrain(\"RiverSandyC\", 2.0);");
code("smooth(1);");
code("for(i = 0; < 11) {");
code("changeTerrainHeight(1.0);");
code("changeGlobalHeight(-1.0);");
code("}");
code("replaceTerrainAboveHeightMin(\"ShorelineSandA\", \"DirtA\", 5.0);");
code("for(i = 0; < 20) {");
code("tempV = xsVectorSet(randomFloat(0, toTiles(1.0)), 0.0, randomFloat(0, toTiles(1.0)));");
code("for(j = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("replaceCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.04), \"DirtA\", \"SavannahA\");");
code("}");
code("}");
code("for(i = 0; < 40) {");
code("tempV = xsVectorSet(randomFloat(0, toTiles(1.0)), 0.0, randomFloat(0, toTiles(1.0)));");
code("for(j = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("replaceCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.02), \"SavannahA\", \"SavannahD\");");
code("}");
code("}");
code("for(i = 0; < 40) {");
code("tempV = xsVectorSet(randomFloat(0, toTiles(1.0)), 0.0, randomFloat(0, toTiles(1.0)));");
code("for(j = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("replaceCircle(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.02), \"DirtA\", \"SandC\");");
code("}");
code("}");
code("int ABORT = 0;");
code("vector tileForEnd = getRandomTileMatchingTerrain(\"DirtA\", 10);");
code("int EndTileX = xsVectorGetX(tileForEnd);");
code("int EndTileZ = xsVectorGetZ(tileForEnd);");
code("float EndHeight = 6;");
code("float EndMetreX = EndTileX*2+1;");
code("float EndMetreZ = EndTileZ*2+1;");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForEnd),2*xsVectorGetZ(tileForEnd),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trMutateSelected(kbGetProtoUnitID(\"Osiris Box Glow\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0\");");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForEnd),2*xsVectorGetZ(tileForEnd),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Flag\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0\");");
code("FlagUnitID = currentId;");
code("vector tileForStart = getRandomTileMatchingTerrain(\"RiverSandyC\", 10);");
code("while(distanceBetweenVectors(tileForStart, tileForEnd, true) < 3000-ABORT){");
code("tileForStart = getRandomTileMatchingTerrain(\"RiverSandyC\", 10.0);");
code("ABORT = ABORT +1;");
code("if(ABORT > 10){");
code("trChatSend(0, \"ERROR - CANT PAINT END AREA\");");
code("break;");
code("}");
code("}");
code("int StartTileX = xsVectorGetX(tileForStart);");
code("int StartTileZ = xsVectorGetZ(tileForStart);");
code("float StartHeight = trGetTerrainHeight(StartTileX, StartTileZ);");
code("float StartMetreX = StartTileX*2+1;");
code("float StartMetreZ = StartTileZ*2+1;");
code("trVectorQuestVarSet(\"dir\", xsVectorSet(11, 0, 0));");
code("trVectorQuestVarSet(\"CentreMap\", xsVectorSet(StartMetreX, 0, StartMetreZ));");
code("LeaveTerrain = \"IceA\";");
code("paintCircleHeight2(StartTileX, StartTileZ, 8, \"SandD\", 6);");
code("paintCircleHeight2(EndTileX, EndTileZ, 8, \"CliffEgyptianB\", EndHeight);");
code("paintCircleHeight2(EndTileX, EndTileZ, 7, LeaveTerrain, EndHeight);");
code("float baseCos = xsCos(6.283185 / (cNumberNonGaiaPlayers-1));");
code("float baseSin = xsSin(6.283185 / (cNumberNonGaiaPlayers-1));");
code("int heading = 90;");
code("for(p=1; < cNumberNonGaiaPlayers) {");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"base\", trVectorQuestVarGet(\"CentreMap\") + trVectorQuestVarGet(\"dir\"));");
code("heading = heading-(360/(cNumberNonGaiaPlayers-1));");
code("if(heading > 360){");
code("heading = heading-360;");
code("}");
code("if(heading < 0){");
code("heading = heading+360;");
code("}");
code("if(xGetBool(dPlayerData, xPlayerActive) == true){");
code("CreateCroc(p, trVectorQuestVarGetX(\"base\"), trVectorQuestVarGetZ(\"base\"), heading);");
code("}");
code("trPlayerKillAllGodPowers(p);");
code("trVectorQuestVarSet(\"dir\", rotationMatrix(trVectorQuestVarGet(\"dir\"), baseCos, baseSin));");
code("trUnitSelectClear();");
code("}");
code("ABORT = 0;");
code("vector tileForMinigame = vector(0,0,0);");
code("tileForMinigame = getRandomTileMatchingTerrain(\"SavannahD\", 11);");
code("while((distanceBetweenVectors(tileForStart, tileForMinigame, true) < 3000) && (distanceBetweenVectors(tileForEnd,");
code("tileForMinigame, true) < 3000)){");
code("tileForMinigame = getRandomTileMatchingTerrain(\"SavannahD\", 11);");
code("ABORT = ABORT+1;");
code("if(ABORT >500){");
code("break;");
code("trChatSend(0, \"ERROR NO MINIGAME TILE\");");
code("}");
code("}");
code("int MinigameTileX = xsVectorGetX(tileForMinigame);");
code("int MinigameTileZ = xsVectorGetZ(tileForMinigame);");
code("float MinigameHeight = trGetTerrainHeight(MinigameTileX, MinigameTileZ);");
code("float MinigameMetreX = MinigameTileX*2+1;");
code("float MinigameMetreZ = MinigameTileZ*2+1;");
code("PaintAtlantisArea(MinigameTileX-1, MinigameTileZ-1, MinigameTileX+1, MinigameTileZ+1, 5, 4);");
code("trChangeTerrainHeight(MinigameTileX-1, MinigameTileZ-1, MinigameTileX+1, MinigameTileZ+1, MinigameHeight, false);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", MinigameMetreX, MinigameMetreZ,0);");
code("trQuestVarSet(\"MinigameStartID\", currentId);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", MinigameMetreX, MinigameMetreZ,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Healing SFX\");");
code("trQuestVarSet(\"MinigameStartSFX\", currentId);");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Torch\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitSetAnimationPath(\"0,1,0,0,1,1,1\");");
code("StageVector = tileForMinigame;");
code("paintTrees2(\"SavannahA\", \"Palm\");");
code("paintTrees2(\"SavannahD\", \"Palm Stump\");");
code("int chestnum = PlayersActive+1;");
code("ABORT = 0;");
code("while(chestnum > 0){");
code("tempV = getRandomTileMatchingTerrain(\"SandC\", 5);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", xsVectorGetX(tempV), xsVectorGetZ(tempV), 0);");
code("if(trCountUnitsInArea(\"\"+currentId, 0, \"Great Box\", 50) == 0){");
code("CreateChest(xsVectorGetX(tempV), xsVectorGetZ(tempV));");
code("chestnum = chestnum-1;");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT >500){");
code("trChatSend(0, \"ERROR NO CHESTS\");");
code("break;");
code("}");
code("}");
code("int runenum = xsMin(8,cNumberNonGaiaPlayers*3);");
code("int temp = 0;");
code("while(runenum > 0){");
code("trQuestVarSetFromRand(\"x\", 0, 126);");
code("trQuestVarSetFromRand(\"z\", 0, 126);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"temph\",0,360,true);");
code("UnitCreate(0, \"Cinematic Block\", 2*trQuestVarGet(\"x\"),2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"));");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"IceA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"IceA\"))){");
code("if(trCountUnitsInArea(\"\"+currentId, 0, \"Great Box\", 20) == 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*trQuestVarGet(\"x\"),2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trMutateSelected(kbGetProtoUnitID(\"Milestone\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0,0\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex finish linked\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("xAddDatabaseBlock(dHelp, true);");
code("xSetInt(dHelp, xUnitID, temp);");
code("xSetInt(dHelp, xSubID, currentId);");
code("runenum = runenum-1;");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT >500){");
code("break;");
code("trChatSend(0, \"ERROR Mile\");");
code("}");
code("}");
code("}");
code("modifyProtounitAbsolute(\"Zebra\", 0, 1, 6);");
code("paintUnit(\"ShorelineSandA\", \"Water Reeds\", 0, 0.05);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("paintUnit(\"RiverSandyC\", \"Dwarf\", 0, 0.025);");
code("for(i = currentId; < trGetNextUnitScenarioNameNumber()){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i);");
code("trUnitChangeProtoUnit(\"Papyrus\");");
code("}");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("paintUnit(\"RiverSandyC\", \"Dwarf\", 0, 0.05);");
code("for(i = currentId; < trGetNextUnitScenarioNameNumber()){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i);");
code("trUnitChangeProtoUnit(\"Seaweed\");");
code("}");
code("paintUnit(\"RiverSandyC\", \"Dwarf\", 0, 0.015);");
code("for(i = currentId; < trGetNextUnitScenarioNameNumber()){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i);");
code("trMutateSelected(kbGetProtoUnitID(\"Rock River Sandy\"));");
code("}");
code("paintUnit(\"RiverSandyC\", \"Mist\", 0, 0.001);");
code("paintUnit(\"DirtA\", \"Rock Sandstone Small\", 0, 0.05);");
code("refreshPassability();");
code("LeaveTerrain = \"IceA\";");
code("Stage = 4;");
code("StageRequirement = 70;");
code("StageScore = 0;");
code("PlayersDead = 0;");
code("EndPoint = tileForEnd;");
code("MinigameFound = false;");
code("InMinigame = false;");
code("xsEnableRule(\"Reset Blackmap\");");
code("trUnblockAllSounds();");
code("if(QuickStart == 0){");
code("trSetLighting(\"night\", 0.1);");
code("}");
code("TerrainTileDBSet(\"ShorelineSandA\", dShore, xShoreLoc);");
code("TerrainTileDBSet(\"DirtA\", dDirtA, xDirtLoc);");
code("TerrainTileDBSet(\"RiverSandyC\", dRiver, xRiverLoc);");
code("}");
code("void SpawnEdible(int num = 0){");
code("int currentId = 0;");
code("tempV = vector(0,0,0);");
code("while(num > 0){");
code("trQuestVarSetFromRand(\"temp\", 1, xGetDatabaseCount(dShore));");
code("xSetPointer(dShore, 1*trQuestVarGet(\"temp\"));");
code("tempV = xGetVector(dShore, xShoreLoc);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", xsVectorGetX(tempV), xsVectorGetZ(tempV), 0);");
code("if(xsVectorGetY(kbGetBlockPosition(\"\"+currentId)) > 4){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Zebra\");");
code("xAddDatabaseBlock(dEdibles, true);");
code("xSetInt(dEdibles, xUnitID, currentId);");
code("xSetInt(dEdibles, xType, 1);");
code("num = num-1;");
code("Zebras = Zebras+1;");
code("}");
code("}");
code("}");
code("void SpawnRelic(int num = 0){");
code("int temp = 0;");
code("int currentId = 0;");
code("while(num > 0){");
code("trQuestVarSetFromRand(\"x\", 0, 126);");
code("trQuestVarSetFromRand(\"z\", 0, 126);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"temph\",0,360,true);");
code("UnitCreate(0, \"Cinematic Block\", 2*trQuestVarGet(\"x\"),2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"));");
code("if((trGetTerrainType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainType(\"IceA\")) &&");
code("(trGetTerrainSubType(1*trQuestVarGet(\"x\"), 1*trQuestVarGet(\"z\")) != getTerrainSubType(\"IceA\"))){");
code("if(trCountUnitsInArea(\"\"+currentId, 0, \"Great Box\", 20) == 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*trQuestVarGet(\"x\"),2*trQuestVarGet(\"z\"), 1*trQuestVarGet(\"temph\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trSetScale(0.5);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trMutateSelected(kbGetProtoUnitID(\"Tower Mirror\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(0);");
code("xAddDatabaseBlock(dRelics, true);");
code("xSetInt(dRelics, xUnitID, currentId);");
code("xSetInt(dRelics, xSubID, temp);");
code("num = num-1;");
code("}");
code("}");
code("}");
code("}");
code("void SpawnCrocPoacher1(int num = 0){");
code("int temp = 0;");
code("int ABORT = 0;");
code("vector spawn = vector(0,0,0);");
code("vector EP = EndPoint*2;");
code("int allow = 0;");
code("if(InMinigame == false){");
code("while(num > 0){");
code("trQuestVarSetFromRand(\"temp\", 1, xGetDatabaseCount(dShore));");
code("xSetPointer(dShore, 1*trQuestVarGet(\"temp\"));");
code("spawn = xGetVector(dShore, xShoreLoc);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", xsVectorGetX(spawn), xsVectorGetZ(spawn), 0);");
code("if((distanceBetweenVectors(spawn, EP, true) > 1000)){");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((distanceBetweenVectors(spawn, kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnitID)),true) < 1000) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true)){");
code("allow = 1;");
code("}");
code("}");
code("if(allow == 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Chu Ko Nu\");");
code("xAddDatabaseBlock(dPoachers, true);");
code("xSetInt(dPoachers, xUnitID, temp);");
code("xSetString(dPoachers, xPoacherType, \"Chu Ko Nu\");");
code("xSetInt(dPoachers, xMoveTime, 0);");
code("xAddDatabaseBlock(dEdibles, true);");
code("xSetInt(dEdibles, xUnitID, temp);");
code("xSetInt(dEdibles, xType, 2);");
code("num = num-1;");
code("PoachersTarget = PoachersTarget+1;");
code("}");
code("}");
code("else if(allow == 1){");
code("allow = 0;");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT > 200){");
code("debugLog(\"Error chokonu\");");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("void SpawnCrocPoacher2(int num = 0){");
code("int temp = 0;");
code("int ABORT = 0;");
code("vector spawn = vector(0,0,0);");
code("vector EP = EndPoint*2;");
code("int allow = 0;");
code("if(InMinigame == false){");
code("while(num > 0){");
code("trQuestVarSetFromRand(\"temp\", 1, xGetDatabaseCount(dRiver));");
code("xSetPointer(dRiver, 1*trQuestVarGet(\"temp\"));");
code("spawn = xGetVector(dRiver, xRiverLoc);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", xsVectorGetX(spawn), xsVectorGetZ(spawn), 0);");
code("if((distanceBetweenVectors(spawn, EP, true) > 1000)){");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((distanceBetweenVectors(spawn, kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnitID)),true) < 1000) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true)){");
code("allow = 1;");
code("}");
code("}");
code("if(allow == 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Kebenit\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(0.6);");
code("xAddDatabaseBlock(dPoachers, true);");
code("xSetInt(dPoachers, xUnitID, temp);");
code("xSetString(dPoachers, xPoacherType, \"Kebenit\");");
code("xSetInt(dPoachers, xMoveTime, 0);");
code("xAddDatabaseBlock(dEdibles, true);");
code("xSetInt(dEdibles, xUnitID, temp);");
code("xSetInt(dEdibles, xType, 3);");
code("num = num-1;");
code("PoachersTarget = PoachersTarget+1;");
code("}");
code("}");
code("else if(allow == 1){");
code("allow = 0;");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT > 200){");
code("debugLog(\"ErroKebenit\");");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("void SpawnCrocPoacher3(int num = 0){");
code("int temp = 0;");
code("int ABORT = 0;");
code("vector spawn = vector(0,0,0);");
code("vector EP = EndPoint*2;");
code("int allow = 0;");
code("if(InMinigame == false){");
code("while(num > 0){");
code("trQuestVarSetFromRand(\"temp\", 1, xGetDatabaseCount(dShore));");
code("xSetPointer(dShore, 1*trQuestVarGet(\"temp\"));");
code("spawn = xGetVector(dShore, xShoreLoc);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", xsVectorGetX(spawn), xsVectorGetZ(spawn), 0);");
code("if((distanceBetweenVectors(spawn, EP, true) > 1000)){");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((distanceBetweenVectors(spawn, kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnitID)),true) < 1000) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true)){");
code("allow = 1;");
code("}");
code("}");
code("if(allow == 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Sentinel Main\");");
code("xAddDatabaseBlock(dPoachers, true);");
code("xSetInt(dPoachers, xUnitID, temp);");
code("xSetString(dPoachers, xPoacherType, \"Sentinel Main\");");
code("xSetInt(dPoachers, xMoveTime, 0);");
code("xAddDatabaseBlock(dEdibles, true);");
code("xSetInt(dEdibles, xUnitID, temp);");
code("xSetInt(dEdibles, xType, 4);");
code("num = num-1;");
code("PoachersTarget = PoachersTarget+1;");
code("}");
code("}");
code("else if(allow == 1){");
code("allow = 0;");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT > 200){");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("void SpawnCrocPoacher4(int num = 0){");
code("int temp = 0;");
code("int ABORT = 0;");
code("vector spawn = vector(0,0,0);");
code("vector EP = EndPoint*2;");
code("int allow = 0;");
code("if(InMinigame == false){");
code("while(num > 0){");
code("trQuestVarSetFromRand(\"temp\", 1, xGetDatabaseCount(dDirtA));");
code("xSetPointer(dDirtA, 1*trQuestVarGet(\"temp\"));");
code("spawn = xGetVector(dDirtA, xDirtLoc);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", xsVectorGetX(spawn), xsVectorGetZ(spawn), 0);");
code("if((distanceBetweenVectors(spawn, EP, true) < 1000)){");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((distanceBetweenVectors(spawn, kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnitID)),true) < 1200) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true)){");
code("allow = 1;");
code("}");
code("}");
code("if(allow == 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Peltast\");");
code("xAddDatabaseBlock(dPoachers, true);");
code("xSetInt(dPoachers, xUnitID, temp);");
code("xSetString(dPoachers, xPoacherType, \"Peltast\");");
code("xSetInt(dPoachers, xMoveTime, 0);");
code("xAddDatabaseBlock(dEdibles, true);");
code("xSetInt(dEdibles, xUnitID, temp);");
code("xSetInt(dEdibles, xType, 5);");
code("num = num-1;");
code("PoachersTarget = PoachersTarget+1;");
code("}");
code("}");
code("else if(allow == 1){");
code("allow = 0;");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT > 200){");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("void UberCrocPoacher(int num = 0){");
code("int temp = 0;");
code("int ABORT = 0;");
code("vector spawn = vector(0,0,0);");
code("vector EP = EndPoint*2;");
code("int allow = 0;");
code("if(InMinigame == false){");
code("while(num > 0){");
code("trQuestVarSetFromRand(\"temp\", 1, xGetDatabaseCount(dRiver));");
code("xSetPointer(dRiver, 1*trQuestVarGet(\"temp\"));");
code("spawn = xGetVector(dRiver, xRiverLoc);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", xsVectorGetX(spawn), xsVectorGetZ(spawn), 0);");
code("if((distanceBetweenVectors(spawn, EP, true) > 1000)){");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((distanceBetweenVectors(spawn, kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnitID)),true) < 2800) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true)){");
code("allow = 1;");
code("}");
code("}");
code("if(allow == 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Siege Ship Egyptian\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("xAddDatabaseBlock(dPoachers, true);");
code("xSetInt(dPoachers, xUnitID, temp);");
code("xSetString(dPoachers, xPoacherType, \"Siege Ship Egyptian\");");
code("xSetInt(dPoachers, xMoveTime, 0);");
code("num = num-1;");
code("PoachersTarget = PoachersTarget+1;");
code("}");
code("}");
code("else if(allow == 1){");
code("allow = 0;");
code("}");
code("ABORT = ABORT+1;");
code("if(ABORT > 200){");
code("debugLog(\"ErroKebenit\");");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("void createChickenArea(){");
code("xResetDatabase(dFreeRelics);");
code("xResetDatabase(dHeldRelics);");
code("xResetDatabase(dTowers);");
code("xResetDatabase(dEnemies);");
code("xResetDatabase(dShore);");
code("trBlockAllSounds();");
code("DestroyNumber = trGetNextUnitScenarioNameNumber();");
code("int currentId = 0;");
code("for(n = NewDestroyNumber ; < DestroyNumber){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+n);");
code("trUnitDestroy();");
code("}");
code("vector tileForStart = MapCentre*0.5;");
code("int StartTileX = xsVectorGetX(tileForStart);");
code("int StartTileZ = xsVectorGetZ(tileForStart);");
code("string baseTerrain = \"GrassB\";");
code("trSetCivAndCulture(0, 0, 0);");
code("int centrePosX = randomInt(toTiles(0.45), toTiles(0.55));");
code("int centrePosZ = randomInt(toTiles(0.45), toTiles(0.55));");
code("int ABORT = 0;");
code("clearMap(\"GrassB\", 2.0);");
code("for(i = 0; < 100){");
code("tempV = xsVectorSet(toTiles(randomFloat(0,1)), 0.0, toTiles(randomFloat(0,1)));");
code("tempF = randomInt(0, 2) * 10 - 5;");
code("for(j = 0; < 6) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 10.0);");
code("changeCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(0.025), tempF);");
code("}");
code("}");
code("smooth(3);");
code("replaceTerrainAtMaxSteepness(\"GrassB\", \"CliffA\", 0.8);");
code("trChangeTerrainHeight(0, 0, toTiles(1.0), toTiles(1.0), 0, false);");
code("setTerrainHeightForTerrain(\"CliffA\", 5.0);");
code("smooth(2);");
code("setTerrainHeightForTerrain(\"GrassB\", 0.0);");
code("replaceTerrainAboveHeightMin(\"CliffA\", \"ForestFloorTundra\", 4.0);");
code("replaceTerrainBelowHeightMax(\"CliffA\", \"GrassB\", 0.0);");
code("smooth(1);");
code("paintCircleHeight(StartTileX, StartTileZ, 16, \"GrassDirt75\", 6);");
code("paintCircleHeight(StartTileX, StartTileZ, 12, \"GrassDirt50\", 6.5);");
code("paintCircleHeight(StartTileX, StartTileZ, 8, \"GrassDirt25\", 7);");
code("smooth(2);");
code("TerrainTileDBSet(baseTerrain, dShore, xShoreLoc);");
code("replaceCircle(StartTileX,StartTileZ,100,baseTerrain,\"RiverGrassyA\");");
code("replaceCircle(StartTileX,StartTileZ,100,\"CliffA\",\"CliffNorseA\");");
code("replaceCircle(StartTileX,StartTileZ,100,\"ForestFloorTundra\",\"ForestFloorJungle\");");
code("replaceCircle(StartTileX,StartTileZ,50,\"RiverGrassyA\",\"RiverGrassyC\");");
code("replaceCircle(StartTileX,StartTileZ,50,\"CliffNorseA\",\"CliffEgyptianA\");");
code("replaceCircle(StartTileX,StartTileZ,50,\"ForestFloorJungle\",\"ForestFloorMarsh\");");
code("replaceCircle(StartTileX,StartTileZ,30,\"RiverGrassyC\",\"GrassB\");");
code("replaceCircle(StartTileX,StartTileZ,30,\"CliffEgyptianA\",\"HadesCliff\");");
code("replaceCircle(StartTileX,StartTileZ,30,\"ForestFloorMarsh\",\"ForestFloorOak\");");
code("paintTrees2(\"ForestfloorJungle\", \"Pine Dead Burning\");");
code("paintTrees2(\"ForestFloorMarsh\", \"Tundra Tree\");");
code("paintTrees2(\"ForestFloorOak\", \"Oak Tree\");");
code("replaceCircleOutline(StartTileX,StartTileZ,52, \"BlackRock\", \"RiverGrassyA\");");
code("replaceCircleOutline(StartTileX,StartTileZ,32, \"BlackRock\", \"RiverGrassyC\");");
code("refreshPassability();");
code("replaceCircle(StartTileX,StartTileZ,130,\"CliffNorseA\",\"UnderwaterIceC\");");
code("replaceCircle(StartTileX,StartTileZ,130,\"ForestfloorJungle\",\"UnderwaterRockC\");");
code("replaceCircle(StartTileX,StartTileZ,130,\"RiverGrassyA\",\"UnderwaterRockF\");");
code("replaceCircle(StartTileX,StartTileZ,130,\"CliffEgyptianA\",\"IceC\");");
code("replaceCircle(StartTileX,StartTileZ,130,\"RiverGrassyC\",\"TundraRoadA\");");
code("replaceCircle(StartTileX,StartTileZ,130,\"ForestFloorMarsh\",\"GaiaCreepBorderSnow\");");
code("float StartHeight = 8;");
code("float StartMetreX = StartTileX*2+1;");
code("float StartMetreZ = StartTileZ*2+1;");
code("trVectorQuestVarSet(\"dir\", xsVectorSet(11, 0, 0));");
code("trVectorQuestVarSet(\"dir2\", xsVectorSet(7, 0, 0));");
code("trVectorQuestVarSet(\"CentreMap\", xsVectorSet(StartMetreX, 0, StartMetreZ));");
code("float baseCos = xsCos(6.283185 / (cNumberNonGaiaPlayers-1));");
code("float baseSin = xsSin(6.283185 / (cNumberNonGaiaPlayers-1));");
code("int heading = 90;");
code("for(p=1; < cNumberNonGaiaPlayers) {");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"base\", trVectorQuestVarGet(\"CentreMap\") + trVectorQuestVarGet(\"dir\"));");
code("trVectorQuestVarSet(\"relic\", trVectorQuestVarGet(\"CentreMap\") + trVectorQuestVarGet(\"dir2\"));");
code("heading = heading-(360/(cNumberNonGaiaPlayers-1));");
code("if(heading > 360){");
code("heading = heading-360;");
code("}");
code("if(heading < 0){");
code("heading = heading+360;");
code("}");
code("if(xGetBool(dPlayerData, xPlayerActive) == true){");
code("CreateChicken(p, trVectorQuestVarGetX(\"base\"), trVectorQuestVarGetZ(\"base\"), heading);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Relic\", trVectorQuestVarGetX(\"relic\"), trVectorQuestVarGetZ(\"relic\"), heading);");
code("NewRelic(currentId, 6);");
code("}");
code("trPlayerKillAllGodPowers(p);");
code("trVectorQuestVarSet(\"dir\", rotationMatrix(trVectorQuestVarGet(\"dir\"), baseCos, baseSin));");
code("trVectorQuestVarSet(\"dir2\", rotationMatrix(trVectorQuestVarGet(\"dir2\"), baseCos, baseSin));");
code("trUnitSelectClear();");
code("}");
code("LeaveTerrain = \"IceA\";");
code("Stage = 5;");
code("StageRequirement = 100;");
code("StageScore = 0;");
code("PlayersDead = 0;");
code("MinigameFound = false;");
code("InMinigame = false;");
code("xsEnableRule(\"Reset Blackmap\");");
code("trUnblockAllSounds();");
code("}");
code("void createCinematicMap(){");
code("DestroyNumber = trGetNextUnitScenarioNameNumber();");
code("for(n = DontDestroyBelow ; < DestroyNumber){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+n);");
code("trUnitDestroy();");
code("}");
code("string baseTerrain = \"GaiaCreepA\";");
code("int ABORT = 0;");
code("int centrePosX = 0;");
code("int centrePosZ= 0;");
code("int currentId = trGetNextUnitScenarioNameNumber();");
code("clearMap(\"ForestFloorPine\", 5.0);");
code("for(i = 0; < 10) {");
code("centrePosX = randomInt(toTiles(0), toTiles(1.0));");
code("centrePosZ = randomInt(toTiles(0), toTiles(1.0));");
code("for(j = 0; < 10) {");
code("tempV = randomCircleLoc(centrePosX, centrePosZ, 20.0);");
code("for(k = 0; < 10) {");
code("tempV2 = randomCircleLoc(xsVectorGetX(tempV), xsVectorGetZ(tempV), 40.0);");
code("paintCircleHeight(xsVectorGetX(tempV2), xsVectorGetZ(tempV2), toTiles(randomFloat(0.0, 0.03)), \"GaiaCreepA\", 5.0);");
code("}");
code("}");
code("}");
code("vector tileForEnd = vector(110,0,110);");
code("int EndTileX = xsVectorGetX(tileForEnd);");
code("int EndTileZ = xsVectorGetZ(tileForEnd);");
code("float EndHeight = trGetTerrainHeight(EndTileX, EndTileZ);");
code("float EndMetreX = EndTileX*2+1;");
code("float EndMetreZ = EndTileZ*2+1;");
code("vector tileForStart = vector(12,0,12);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForEnd),2*xsVectorGetZ(tileForEnd),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trMutateSelected(kbGetProtoUnitID(\"Osiris Box Glow\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0\");");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForEnd),2*xsVectorGetZ(tileForEnd),315);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Flag\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0\");");
code("FlagUnitID = currentId;");
code("int StartTileX = xsVectorGetX(tileForStart);");
code("int StartTileZ = xsVectorGetZ(tileForStart);");
code("float StartHeight = trGetTerrainHeight(StartTileX, StartTileZ);");
code("float StartMetreX = StartTileX*2+1;");
code("float StartMetreZ = StartTileZ*2+1;");
code("ABORT = 0;");
code("vector tileForTrack = vector(30,0,30);");
code("PaintAtlantisArea(xsVectorGetX(tileForTrack),xsVectorGetZ(tileForTrack)+4,xsVectorGetX(tileForTrack)+2,");
code("xsVectorGetZ(tileForTrack)+6,0,71);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForTrack)+2,2*xsVectorGetZ(tileForTrack)+11,0);");
code("trQuestVarSet(\"MinigameStartID\", currentId);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 2*xsVectorGetX(tileForTrack)+2,2*xsVectorGetZ(tileForTrack)+11,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId);");
code("trUnitChangeProtoUnit(\"Healing SFX\");");
code("trQuestVarSet(\"MinigameStartSFX\", currentId);");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Torch\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitSetAnimationPath(\"0,1,0,0,1,1,1\");");
code("paintCircleHeight2(StartTileX, StartTileZ, 8, \"GrassDirt25\", StartHeight);");
code("paintCircleHeight2(EndTileX, EndTileZ, 8, \"IceA\", EndHeight);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("paintTrees(\"ForestFloorPine\", \"Pine\");");
code("paintUnit(\"GaiaCreepA\", \"Blowing Leaves\", 0, 0.01);");
code("paintUnit(\"GaiaCreepA\", \"Mist\", 0, 0.004);");
code("paintUnit(\"GaiaCreepA\", \"Tamarisk Tree Dead\", 0, 0.004);");
code("paintUnit(\"GaiaCreepA\", \"Tamarisk Tree\", 0, 0.004);");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("paintUnit(\"GaiaCreepA\", \"Berry Bush\", 0, 0.004);");
code("for(i = currentId; < trGetNextUnitScenarioNameNumber()){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i);");
code("trSetSelectedScale(2,4,2);");
code("}");
code("paintUnit(\"GaiaCreepA\", \"GaiaCreepFlowers\", 0, 0.1);");
code("paintUnit(\"GaiaCreepA\", \"Bush\", 0, 0.12);");
code("paintUnit(\"GaiaCreepA\", \"Grass\", 0, 0.12);");
code("paintUnit(\"GaiaCreepA\", \"Rock Limestone Small\", 0, 0.02);");
code("paintUnit(\"GaiaCreepA\", \"Rock Granite Small\", 0, 0.02);");
code("trVectorQuestVarSet(\"dir\", xsVectorSet(11, 0, 0));");
code("trVectorQuestVarSet(\"CentreMap\", xsVectorSet(StartMetreX, 0, StartMetreZ));");
code("float baseCos = xsCos(6.283185 / (cNumberNonGaiaPlayers-1));");
code("float baseSin = xsSin(6.283185 / (cNumberNonGaiaPlayers-1));");
code("int heading = 90;");
code("for(p=1; < cNumberNonGaiaPlayers) {");
code("trVectorQuestVarSet(\"base\", trVectorQuestVarGet(\"CentreMap\") + trVectorQuestVarGet(\"dir\"));");
code("heading = heading-(360/(cNumberNonGaiaPlayers-1));");
code("if(heading > 360){");
code("heading = heading-360;");
code("}");
code("if(heading < 0){");
code("heading = heading+360;");
code("}");
code("UnitCreate(p, \"Gazelle\", trVectorQuestVarGetX(\"base\"), trVectorQuestVarGetZ(\"base\"), heading);");
code("trVectorQuestVarSet(\"dir\", rotationMatrix(trVectorQuestVarGet(\"dir\"), baseCos, baseSin));");
code("trUnitSelectClear();");
code("}");
code("currentId  = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", xsVectorGetX(tileForTrack),xsVectorGetZ(tileForTrack),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId );");
code("trUnitChangeInArea(0,0,\"Tamarisk Tree Dead\",\"Cinematic Block\", 15);");
code("trUnitChangeInArea(0,0,\"Tamarisk Tree\",\"Cinematic Block\", 15);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId );");
code("trUnitChangeInArea(0,0,\"Pine\",\"Cinematic Block\", 15);");
code("currentId  = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 90,90 ,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+currentId );");
code("trUnitChangeInArea(0,0,\"Tamarisk Tree Dead\",\"Cinematic Block\", 6);");
code("trUnitChangeInArea(0,0,\"Tamarisk Tree\",\"Cinematic Block\", 6);");
code("trUnitChangeInArea(0,0,\"Pine\",\"Cinematic Block\", 6);");
code("CreateChest(90,90);");
code("currentId  = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Throwing Axeman\",50,150,180);");
code("trUnitSelect(\"\"+currentId );");
code("trUnitChangeInArea(0,0,\"Tamarisk Tree Dead\",\"Cinematic Block\", 6);");
code("trUnitChangeInArea(0,0,\"Tamarisk Tree\",\"Cinematic Block\", 6);");
code("trUnitChangeInArea(0,0,\"Pine\",\"Cinematic Block\", 6);");
code("refreshPassability();");
code("}");
}
void choice() {
code("int PlayerCycle = 1;");
code("int ActionChoice = 0;");
code("int ChoiceEffect = 0;");
code("string YesChoiceUnitName = \"Swordsman\";");
code("string NoChoiceUnitName = \"Lancer\";");
code("rule AnswerConsequences");
code("highFrequency");
code("inactive");
code("{");
code("if(ActionChoice != 0){");
code("string stringtemp = \"\";");
code("int p = ActionChoice;");
code("int temp = 0;");
code("vector dir = vector(0,0,0);");
code("int closest = 100000;");
code("xSetPointer(dPlayerData, p);");
code("switch(ChoiceEffect)");
code("{");
code("case 0:");
code("{");
code("trChatSend(0,\"<color=1,0,1>Debug TP player \" + xGetPointer(dPlayerData) + \" said no</color>\");");
code("}");
code("case 1:");
code("{");
code("trTechGodPower(p, \"Vision\", 1);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 2:");
code("{");
code("trTechGodPower(p, \"Restoration\", 1);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 3:");
code("{");
code("trQuestVarSet(\"SkipVotes\", 1*trQuestVarGet(\"SkipVotes\")+1);");
code("trClearCounterDisplay();");
code("trSetCounterDisplay(\"</color>Votes to skip: \" + 1*trQuestVarGet(\"SkipVotes\") +\"/\" + SkipRequired);");
code("}");
code("case 4:");
code("{");
code("xSetPointer(dPlayerData, p);");
code("xSetVector(dPlayerData, xVectorHold, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("xSetInt(dPlayerData, xTeleportDue, 1);");
code("trChatSend(0,\"<color=1,0,1>Debug TP player \" + xGetPointer(dPlayerData) + \"</color>\");");
code("if(Stage == 1){");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(p, \"Roc\", 2*xsVectorGetX(StageVector)+7,2*xsVectorGetZ(StageVector)+10, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("if(trCurrentPlayer() == p){");
code("uiZoomToProto(\"\"+GazelleProto);");
code("uiLookAtProto(\"\"+GazelleProto);");
code("}");
code("}");
code("if(Stage == 2){");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(p, \"Roc\", 2*xsVectorGetX(StageVector)+2,2*xsVectorGetZ(StageVector)+2, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("if(trCurrentPlayer() == p){");
code("uiZoomToProto(\"\"+RhinoProto);");
code("uiLookAtProto(\"\"+RhinoProto);");
code("}");
code("}");
code("if(Stage == 3){");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(p, \"Roc\", 2*xsVectorGetX(StageVector)+2,2*xsVectorGetZ(StageVector)+2, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("if(trCurrentPlayer() == p){");
code("uiZoomToProto(\"\"+GoatProto);");
code("uiLookAtProto(\"\"+GoatProto);");
code("}");
code("}");
code("if(Stage == 4){");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(p, \"Roc\", 2*xsVectorGetX(StageVector)+2,2*xsVectorGetZ(StageVector)+2, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("if(trCurrentPlayer() == p){");
code("uiZoomToProto(\"\"+CrocProto);");
code("uiLookAtProto(\"\"+CrocProto);");
code("}");
code("}");
code("}");
code("case 5:");
code("{");
code("trModifyProtounit(\"\"+GazelleProto, p, 0, 1);");
code("trModifyProtounit(\"Hero Greek Bellerophon\", p, 0, 1);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 6:");
code("{");
code("trModifyProtounit(\"\"+GazelleProto, p, 2, 4);");
code("trModifyProtounit(\"Hero Greek Bellerophon\", p, 2, 4);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 7:");
code("{");
code("trModifyProtounit(\"\"+GazelleProto, p, 1, 0.5);");
code("trModifyProtounit(\"Hero Greek Bellerophon\", p, 1, 0.5);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 8:");
code("{");
code("trModifyProtounit(\"\"+GazelleProto, p, 1, 1);");
code("trModifyProtounit(\"Hero Greek Bellerophon\", p, 1, 1);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 9:");
code("{");
code("trModifyProtounit(\"\"+GazelleProto, p, 2, 6);");
code("trModifyProtounit(\"Hero Greek Bellerophon\", p, 2, 6);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 10:");
code("{");
code("trModifyProtounit(\"\"+GazelleProto, p, 0, 2);");
code("trModifyProtounit(\"Hero Greek Bellerophon\", p, 0, 2);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 11:");
code("{");
code("xSetInt(dPlayerData, xHPRegenTime, 30);");
code("xSetInt(dPlayerData, xHPRegen, xGetInt(dPlayerData, xHPRegen)+1);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 12:");
code("{");
code("trModifyProtounit(\"\"+RhinoProto, p, 0, 2);");
code("trModifyProtounit(\"\"+RhinoDrinkProto, p, 0, 2);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 13:");
code("{");
code("xSetFloat(dPlayerData, xRhinoWalk, (xGetFloat(dPlayerData, xRhinoWalk)+0.5));");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 14:");
code("{");
code("xSetFloat(dPlayerData, xRhinoRun, (xGetFloat(dPlayerData, xRhinoRun)+1.5));");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 15:");
code("{");
code("xSetInt(dPlayerData, xRhinoChargeTimeMax, (xGetInt(dPlayerData, xRhinoChargeTimeMax)+2));");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 16:");
code("{");
code("xSetFloat(dPlayerData, xRhinoDrinkTime, (xGetFloat(dPlayerData, xRhinoDrinkTime)-1));");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 17:");
code("{");
code("xSetInt(dPlayerData, xHPRegenTime, 20);");
code("xSetInt(dPlayerData, xHPRegen, xGetInt(dPlayerData, xHPRegen)+1);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 18:");
code("{");
code("xSetFloat(dPlayerData, xRhinoRun, (xGetFloat(dPlayerData, xRhinoRun)*1.2));");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 19:");
code("{");
code("trModifyProtounit(\"\"+RhinoProto, p, 0, 5);");
code("trModifyProtounit(\"\"+RhinoDrinkProto, p, 0, 5);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 20:");
code("{");
code("xSetInt(dPlayerData, xRhinoChargeTimeMax, (xGetInt(dPlayerData, xRhinoChargeTimeMax)+5));");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 21:");
code("{");
code("trModifyProtounit(\"\"+GoatProto, p, 0, 2);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 22:");
code("{");
code("trModifyProtounit(\"\"+GoatProto, p, 1, 0.5);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 23:");
code("{");
code("trModifyProtounit(\"\"+GoatProto, p, 2, 4);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 24:");
code("{");
code("xSetInt(dPlayerData, xHPRegenTime, 30);");
code("xSetInt(dPlayerData, xHPRegen, xGetInt(dPlayerData, xHPRegen)+1);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 25:");
code("{");
code("trModifyProtounit(\"\"+GoatProto, p, 0, 3);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 26:");
code("{");
code("trModifyProtounit(\"\"+GoatProto, p, 1, 0.75);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 27:");
code("{");
code("if(xGetDatabaseCount(dPoachers) > 0){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Timeshift In\");");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitSetAnimationPath(\"0,1,1,0,0,0\");");
code("}");
code("xFreeDatabaseBlock(dPoachers);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 28:");
code("{");
code("ShrineTimeMin = ShrineTimeMin+10;");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 29:");
code("{");
code("ShrineTimeMax = ShrineTimeMax+20;");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 30:");
code("{");
code("for(x = xGetDatabaseCount(dInterractables); > 0){");
code("xDatabaseNext(dInterractables);");
code("if(xGetInt(dInterractables, xType) == 2){");
code("if(xGetInt(dInterractables, xSubtype) == 1){");
code("xSetInt(dInterractables, xSquare1, xGetInt(dInterractables, xSquare1)+60);");
code("}");
code("}");
code("}");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 31:");
code("{");
code("trModifyProtounit(\"\"+GoatProto, p, 0, 6);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 32:");
code("{");
code("trModifyProtounit(\"\"+GoatProto, p, 1, 1.5);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 33:");
code("{");
code("stringtemp = \" has discovered the number of active shrines required to progress is \";");
code("trMessageSetText(trStringQuestVarGet(\"p\"+p+\"name\") + stringtemp + ShrineTarget + \".\", 10000);");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("case 34:");
code("{");
code("stringtemp = \" has discovered this act has a total of \";");
code("trMessageSetText(trStringQuestVarGet(\"p\"+p+\"name\") + stringtemp + ShrinesMax + \" shrines.\", 10000);");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("case 35:");
code("{");
code("CrocGrow(p);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 36:");
code("{");
code("trModifyProtounit(\"\"+CrocProto, p, 0, 5);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 37:");
code("{");
code("trModifyProtounit(\"\"+CrocProto, p, 2, 4);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 38:");
code("{");
code("xSetFloat(dPlayerData, xCrocLandSpeed, xGetFloat(dPlayerData, xCrocLandSpeed)+0.4);");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 1, xGetFloat(dPlayerData, xCrocLandSpeed));");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 39:");
code("{");
code("xSetFloat(dPlayerData, xCrocWaterSpeed, xGetFloat(dPlayerData, xCrocWaterSpeed)+0.6);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 40:");
code("{");
code("xSetInt(dPlayerData, xCrocSprintDuration, xGetInt(dPlayerData, xCrocSprintDuration)+1000);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 41:");
code("{");
code("xSetInt(dPlayerData, xCrocSprintRechargeTime, xGetInt(dPlayerData, xCrocSprintRechargeTime)-2);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 42:");
code("{");
code("xSetFloat(dPlayerData, xCrocSprintSpeed, xGetFloat(dPlayerData, xCrocSprintSpeed)+0.3);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 43:");
code("{");
code("xSetInt(dPlayerData, xHPRegenTime, 20);");
code("xSetInt(dPlayerData, xHPRegen, xGetInt(dPlayerData, xHPRegen)+1);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 44:");
code("{");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xAnswer, 1);");
code("}");
code("case 45:");
code("{");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xAnswer, 0);");
code("}");
code("case 46:");
code("{");
code("xSetInt(dPlayerData, xHPRegenTime, 20);");
code("xSetInt(dPlayerData, xHPRegen, xGetInt(dPlayerData, xHPRegen)+2);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 47:");
code("{");
code("xSetInt(dPlayerData, xCrocSprintDuration, xGetInt(dPlayerData, xCrocSprintDuration)+2000);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 48:");
code("{");
code("xSetInt(dPlayerData, xCrocSprintRechargeTime, xGetInt(dPlayerData, xCrocSprintRechargeTime)-4);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 49:");
code("{");
code("temp = 0;");
code("for(a=xGetDatabaseCount(dEdibles) ; > 0){");
code("xDatabaseNext(dEdibles);");
code("if(xGetInt(dEdibles, xType) == 1){");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dEdibles, xUnitID));");
code("if(distanceBetweenVectors(dir, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")), true) < closest){");
code("closest = distanceBetweenVectors(dir, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")), true);");
code("temp = xGetInt(dEdibles, xUnitID);");
code("}");
code("}");
code("}");
code("dir = kbGetBlockPosition(\"\"+temp);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("trMinimapFlare(p,10,dir,true);");
code("}");
code("}");
code("case 50:");
code("{");
code("SpawnEdible(2);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 51:");
code("{");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreateV(0, \"Zebra\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("xAddDatabaseBlock(dEdibles, true);");
code("xSetInt(dEdibles, xUnitID, temp);");
code("xSetInt(dEdibles, xType, 1);");
code("xSetInt(dEdibles, xSubtype, 0);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 52:");
code("{");
code("xSetFloat(dPlayerData, xCrocFood, xGetFloat(dPlayerData, xCrocFood)+4);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 53:");
code("{");
code("temp = 0;");
code("for(a=xGetDatabaseCount(dInterractables) ; > 0){");
code("xDatabaseNext(dInterractables);");
code("if(xGetInt(dInterractables, xType) == 2){");
code("if(xGetInt(dInterractables, xSubtype) == 0){");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dInterractables, xUnitID));");
code("if(distanceBetweenVectors(dir, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")), true) < closest){");
code("closest = distanceBetweenVectors(dir, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")), true);");
code("temp = xGetInt(dInterractables, xUnitID);");
code("}");
code("}");
code("}");
code("}");
code("dir = kbGetBlockPosition(\"\"+temp);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("trMinimapFlare(p,10,dir,true);");
code("}");
code("}");
code("case 54:");
code("{");
code("temp = 0;");
code("for(a=xGetDatabaseCount(dRelics) ; > 0){");
code("xDatabaseNext(dRelics);");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dRelics, xUnitID));");
code("if(distanceBetweenVectors(dir, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")), true) < closest){");
code("closest = distanceBetweenVectors(dir, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")), true);");
code("temp = xGetInt(dRelics, xUnitID);");
code("}");
code("}");
code("dir = kbGetBlockPosition(\"\"+temp);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("trMinimapFlare(p,10,dir,true);");
code("}");
code("}");
code("case 55:");
code("{");
code("ShrineTimeMax = ShrineTimeMax+10;");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("case 56:");
code("{");
code("for(x = xGetDatabaseCount(dInterractables); > 0){");
code("xDatabaseNext(dInterractables);");
code("if(xGetInt(dInterractables, xType) == 2){");
code("if(xGetInt(dInterractables, xSubtype) == 1){");
code("xSetInt(dInterractables, xSquare1, xGetInt(dInterractables, xSquare1)+15);");
code("}");
code("}");
code("}");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"researchcomplete.wav\", \"\Yeebaagooon\Zoo Quest\SelectBonus.mp3\");");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"P\"+ActionChoice+\"YesAction\", 0);");
code("trQuestVarSet(\"P\"+ActionChoice+\"NoAction\", 0);");
code("trQuestVarSet(\"P\"+ActionChoice+\"ChoiceDialog\", 0);");
code("ActionChoice = 0;");
code("if(trCurrentPlayer() == p){");
code("if(Stage == 1){");
code("uiZoomToProto(\"\"+GazelleProto);");
code("}");
code("if(Stage == 2){");
code("uiZoomToProto(\"\"+RhinoProto);");
code("}");
code("if(Stage == 3){");
code("uiZoomToProto(\"\"+GoatProto);");
code("}");
code("if(Stage == 4){");
code("uiZoomToProto(xGetString(dPlayerData, xCrocProto));");
code("}");
code("if(Stage == 5){");
code("uiZoomToProto(\"\"+ChickenProto);");
code("}");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("void PlayerChoice(int p = 0, string prompt = \"Question\", string answerone = \"Answer 1\", int effectone = 0,");
code("string answertwo = \"Answer 2\", int effecttwo = 0, int timeout = 10000){");
code("int temp = 0;");
code("if(kbGetBlockID(\"\"+1*trQuestVarGet(\"P\"+p+\"Yes\")) == -1){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(p, \"Cinematic Block\", p*3, 1, 0);");
code("trQuestVarSet(\"P\"+p+\"Yes\", temp);");
code("debugLog(\"Choice selector dead\");");
code("}");
code("if(kbGetBlockID(\"\"+1*trQuestVarGet(\"P\"+p+\"No\")) == -1){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(p, \"Cinematic Block\", p*3, 1, 0);");
code("trQuestVarSet(\"P\"+p+\"No\", temp);");
code("debugLog(\"Choice selector dead\");");
code("}");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"\"+NoChoiceUnitName);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trSetSelectedScale(0,0,0);");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"\"+YesChoiceUnitName);");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trSetSelectedScale(0,0,0);");
code("trQuestVarSet(\"P\"+p+\"YesAction\", effectone);");
code("trQuestVarSet(\"P\"+p+\"NoAction\", effecttwo);");
code("if(trCurrentPlayer() == p){");
code("trShowChoiceDialog(prompt, answerone, p, answertwo, p+12);");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 1);");
code("trQuestVarSet(\"P\"+p+\"ChoiceTimer\", trTimeMS()+timeout);");
code("xsEnableRule(\"ChoiceTimeout\" + p);");
code("}");
code("void ChooseYes(int p = 0){");
code("if(trCurrentPlayer() == p){");
code("trackInsert();");
code("trackAddWaypoint();");
code("trackPlay(10, EVENT_REMOVE_CAM_TRACKS);");
code("trUnitSelectClear();");
code("trBlockAllSounds();");
code("uiFindType(\"\"+YesChoiceUnitName);");
code("uiTransformSelectedUnit(\"\"+YesChoiceUnitName + \" Hero\");");
code("}");
code("}");
code("void ChooseNo(int p = 0){");
code("p = p-12;");
code("if(trCurrentPlayer() == p){");
code("trackInsert();");
code("trackAddWaypoint();");
code("trackPlay(10,EVENT_REMOVE_CAM_TRACKS);");
code("trUnitSelectClear();");
code("trBlockAllSounds();");
code("uiFindType(\"\"+NoChoiceUnitName);");
code("uiTransformSelectedUnit(\"\"+NoChoiceUnitName + \" Hero\");");
code("}");
code("}");
code("rule DetectAnswers");
code("highFrequency");
code("active");
code("{");
code("for(p = 1; <cNumberNonGaiaPlayers){");
code("if(trPlayerUnitCountSpecific(p, \"\"+YesChoiceUnitName + \" Hero\") != 0){");
code("trChatSend(0, \"Yes registered\");");
code("ChoiceEffect = 1*trQuestVarGet(\"P\"+p+\"YesAction\");");
code("ActionChoice = p;");
code("xsEnableRule(\"AnswerConsequences\");");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("if(trPlayerUnitCountSpecific(p, \"\"+NoChoiceUnitName + \" Hero\") != 0){");
code("trChatSend(0, \"No registered\");");
code("ChoiceEffect = 1*trQuestVarGet(\"P\"+p+\"NoAction\");");
code("ActionChoice = p;");
code("xsEnableRule(\"AnswerConsequences\");");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("}");
code("}");
code("rule SetupChoiceUnits");
code("highFrequency");
code("inactive");
code("{");
code("xsDisableSelf();");
code("int temp = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(p, \"Cinematic Block\", p*3, 1, 0);");
code("trQuestVarSet(\"P\"+p+\"Yes\", temp);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(p, \"Cinematic Block\", p*3, 3, 0);");
code("trQuestVarSet(\"P\"+p+\"No\", temp);");
code("}");
code("DontDestroyBelow = trGetNextUnitScenarioNameNumber();");
code("}");
code("rule ChoiceTimeout1");
code("highFrequency");
code("inactive");
code("{");
code("int p =1;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout2");
code("highFrequency");
code("inactive");
code("{");
code("int p =2;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout3");
code("highFrequency");
code("inactive");
code("{");
code("int p =3;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout4");
code("highFrequency");
code("inactive");
code("{");
code("int p =4;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout5");
code("highFrequency");
code("inactive");
code("{");
code("int p =5;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout6");
code("highFrequency");
code("inactive");
code("{");
code("int p =6;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout7");
code("highFrequency");
code("inactive");
code("{");
code("int p =7;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout8");
code("highFrequency");
code("inactive");
code("{");
code("int p =8;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout9");
code("highFrequency");
code("inactive");
code("{");
code("int p =9;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout10");
code("highFrequency");
code("inactive");
code("{");
code("int p =10;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout11");
code("highFrequency");
code("inactive");
code("{");
code("int p =11;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChoiceTimeout12");
code("highFrequency");
code("inactive");
code("{");
code("int p =12;");
code("if(trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"ChoiceTimer\")){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 1){");
code("if(trCurrentPlayer() == p){");
code("gadgetUnreal(\"ShowChoiceBox\");");
code("}");
code("trQuestVarSet(\"P\"+p+\"ChoiceDialog\", 0);");
code("trUnitSelectByQV(\"P\"+p+\"No\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectByQV(\"P\"+p+\"Yes\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
}
void text() {
code("void startNPCDialog(int npc = 0) {");
code("if (trQuestVarGet(\"currentNPCProgress\") == 0) {");
code("xsEnableRule(\"npc_talk_01\");");
code("trQuestVarSet(\"currentNPC\", npc);");
code("trQuestVarSet(\"currentNPCProgress\", 0);");
code("}");
code("}");
code("int npcDiag(int npc = 0, int dialog = 0) {");
code("dialog = dialog + 1;");
code("string extra = \"\";");
code("int p = trCurrentPlayer();");
code("xSetPointer(dPlayerData, p);");
code("switch(npc)");
code("{");
code("case 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("trShowImageDialog(\"icons\special e son of osiris icon 64\", \"Hello!\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(\"sfx a spy\", \"Test\");");
code("}");
code("case 3:");
code("{");
code("trShowImageDialog(\"icons\infantry g hoplite icon 64\", \"Success!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiZoomToProto(\"\"+GazelleProto);");
code("uiLookAtProto(\"\"+GazelleProto);");
code("uiMessageBox(\"Welcome to Zoo Quest. Here's a quick tutorial before we begin.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Press 'Q' to jump - you will always jump forward.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("p = trCurrentPlayer();");
code("if(1*trQuestVarGet(\"P\"+p+\"FirstJump\") == 0){");
code("uiMessageBox(\"Press 'Q' to jump - you will always jump forward.\");");
code("}");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Great! Now make it to the end line and we can begin the map.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Just remember to move after a jump.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"This is a treasure chest, come close to unlock it.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Now we play as the mighty Rhino.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Press 'Q' to toggle the charge ability when you are moving.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Use it to smash through the fence.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 7:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Charging is thristy work, you'll need to replenish stamina by drinking.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Press 'W' to drink when you are near water (can be map water).\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"You'll be immobilised while you drink, so be careful.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"Drink from the fountain to complete this tutorial.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 8:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The mountain goat has a slightly different jump mechanic.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"It will jump directly to the cursor (or as close as allowed) and can double jump.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 9:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Press 'W' to interract with nearby objects (such as the shrine).\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"There are several types of object you can interract with in the act.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 10:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Now we play as a fearsome Crocodile!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"You have the ability to swim, so head over to the first island.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 11:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"You will notice you are much slower on land.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"You can use 'Q' for a short sprint on land or water.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"If you use it within \" + xGetInt(dPlayerData,");
code("xCrocBonusTime) + \" seconds of leaving the water, you'll go extra fast.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"Unlike the Rhino charge, this sprint lasts a set time and then recharges.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 12:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"In this act you start off small and weak.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"But by eating zebras you will grow in size and power.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Click attack will not work. Press 'W' to kill the zebra when in range.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 13:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"You can't right click. Move close and use 'W' to kill.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 14:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"For the final act - it's chicken time.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"These devious creatures can build!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Use 'Q' to build a tower at your pointer.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 15:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Your towers will fire missiles at the enemy!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Use 'W' to craft an upgrade at the cursor.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"This usually takes a lot longer, but is shorter in tutorial mode.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 16:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Click on a relic to find out what it does.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Garrison it in your Chicken to gain its benefit.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case 17:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Press 'E' for all towers to fire at the cursor.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"This ability ignores range and happens instantly.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Obviously, it comes with a rehcrage time.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("}");
code("return(dialog);");
code("}");
code("rule npc_talk_01");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trQuestVarSet(\"currentNPCProgress\",");
code("npcDiag(1*trQuestVarGet(\"currentNPC\"), 1*trQuestVarGet(\"currentNPCProgress\")));");
code("if (trQuestVarGet(\"currentNPCProgress\") > 0) {");
code("trDelayedRuleActivation(\"npc_talk_02\");");
code("}");
code("}");
code("rule npc_talk_02");
code("inactive");
code("highFrequency");
code("{");
code("if ((trQuestVarGet(\"currentNPCProgress\") > 0) &&");
code("(trIsGadgetVisible(\"ingame-messagedialog\") == false) &&");
code("(trIsGadgetVisible(\"ShowImageBox\") == false)) {");
code("trDelayedRuleActivation(\"npc_talk_01\");");
code("xsDisableSelf();");
code("}");
code("}");
}
void setup() {
code("rule EventSetHandler");
code("active");
code("highFrequency");
code("{");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("trEventSetHandler(p, \"ChooseYes\");");
code("trEventSetHandler(12+p, \"ChooseNo\");");
code("}");
code("trEventSetHandler(25, \"CustomContent\");");
code("trEventSetHandler(EVENT_REMOVE_CAM_TRACKS, \"removeCamTracks\");");
code("trEventSetHandler(27, \"DeerMinigameGo\");");
code("for(i=EVENT_BUILD_HOUSE; <= EVENT_BUILD_STOREHOUSE) {");
code("trEventSetHandler(i, \"hotkeyAbility\");");
code("}");
code("trEventSetHandler(EVENT_BUILD_AT_CURSOR, \"buildAtCursor\");");
code("trEventSetHandler(32, \"SpawnDeerPoachers\");");
code("trEventSetHandler(33, \"TutForceEnd\");");
code("trEventSetHandler(34, \"RhinoMinigameGo\");");
code("trEventSetHandler(35, \"RhinoMGTimeout\");");
code("trEventSetHandler(36, \"GoatMinigameGo\");");
code("trEventSetHandler(37, \"GoatMGTimeout\");");
code("trEventSetHandler(38, \"CrocMinigameGo\");");
code("trEventSetHandler(39, \"CrocMGTimeout\");");
code("trEventSetHandler(40, \"ChickenWave1\");");
code("trEventSetHandler(41, \"ChickenWave1End\");");
code("trEventSetHandler(42, \"ChickenWave2\");");
code("trEventSetHandler(43, \"ChickenWave2End\");");
code("trEventSetHandler(44, \"ChickenWave3\");");
code("trEventSetHandler(45, \"ChickenWave3End\");");
code("trEventSetHandler(46, \"CineGo\");");
code("xsDisableSelf();");
code("}");
code("rule Initialise");
code("active");
code("highFrequency");
code("runImmediately");
code("{");
code("characterDialog(\"Waiting for everyone to connect.\", \" \", \"icons\special e son of osiris icon 64\");");
code("trUIFadeToColor(0, 0, 0, 0, 10000, false);");
code("trFadeOutAllSounds(0.1);");
code("trFadeOutMusic(0.1);");
code("if(QuickStart == 0){");
code("}");
code("trBlockAllSounds(true);");
code("trArmyDispatch(\"0,0\", \"Cinematic Block\", 1, 0, 0, 0, 0, false);");
code("for(p = 1; <= cNumberNonGaiaPlayers){");
code("deployLocHeading(0, p*2, \"Victory Marker\", p, 180);");
code("}");
code("trSetFogAndBlackmap(false, false);");
code("xsDisableSelf();");
code("}");
code("rule START");
code("active");
code("highFrequency");
code("{");
code("trPlayerKillAllGodPowers(0);");
code("for(p = 1; <= cNumberNonGaiaPlayers){");
code("trSetCivAndCulture(p, 3, 1);");
code("trPlayerGrantResources(p, \"Food\", -10000.0);");
code("trPlayerGrantResources(p, \"Wood\", -10000.0);");
code("trPlayerGrantResources(p, \"Gold\", -10000.0);");
code("trPlayerGrantResources(p, \"Favor\", -10000.0);");
code("trPlayerKillAllGodPowers(p);");
code("}");
code("xsDisableRule(\"BasicVC1\");");
code("xsDisableRule(\"BasicVC2\");");
code("gadgetUnreal(\"ShowImageBox-BordersTop\");");
code("gadgetUnreal(\"ShowImageBox-BordersBottom\");");
code("gadgetUnreal(\"ShowImageBox-BordersLeft\");");
code("gadgetUnreal(\"ShowImageBox-BordersRight\");");
code("gadgetUnreal(\"ShowImageBox-BordersLeftTop\");");
code("gadgetUnreal(\"ShowImageBox-BordersLeftBottom\");");
code("gadgetUnreal(\"ShowImageBox-BordersRightBottom\");");
code("gadgetUnreal(\"ShowImageBox-BordersRightTop\");");
code("gadgetUnreal(\"ShowImageBox-CloseButton\");");
code("pause(0);");
code("characterDialog(\"Initialising map\", \" \", \"icons\special e son of osiris icon 64\");");
code("xsEnableRule(\"load1\");");
code("xsDisableSelf();");
code("map(\"q\", \"game\", \"trackInsert(); trackAddWaypoint();trackPlay(-1,28);\");");
code("map(\"w\", \"game\", \"trackInsert(); trackAddWaypoint();trackPlay(-1,29);\");");
code("map(\"e\", \"game\", \"trackInsert(); trackAddWaypoint();trackPlay(-1,30);\");");
code("map(\"r\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
for(p=1; < cNumberNonGaiaPlayers) {
code("trStringQuestVarSet(\"p"+p+"name\", \""+rmGetPlayerName(p)+"\");");
}
code("}");
code("rule load1");
code("inactive");
code("highFrequency");
code("{");
code("characterDialog(\"Loading map.\", \"\"+MapVersion+\"\", \"icons\special e son of osiris icon 64\");");
code("xsEnableRule(\"load2\");");
code("trBlockAllSounds(false);");
code("xsDisableSelf();");
code("while(cNumberNonGaiaPlayers>=trQuestVarGet(\"PlayerID\")) {");
code("trQuestVarSet(\"PlayerID2\", 0);");
code("while(cNumberNonGaiaPlayers>=trQuestVarGet(\"PlayerID2\")) {");
code("trPlayerSetDiplomacy(trQuestVarGet(\"PlayerID\"), trQuestVarGet(\"PlayerID2\"), \"Ally\");");
code("trPlayerSetDiplomacy(trQuestVarGet(\"PlayerID2\"), trQuestVarGet(\"PlayerID\"), \"Ally\");");
code("trQuestVarSet(\"PlayerID2\", trQuestVarGet(\"PlayerID2\")+1);}");
code("trQuestVarSet(\"PlayerID\", trQuestVarGet(\"PlayerID\")+1);}");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trPlayerSetDiplomacy(0, p, \"Enemy\");");
code("trPlayerSetDiplomacy(cNumberNonGaiaPlayers, p, \"Enemy\");");
code("trPlayerSetDiplomacy(p, cNumberNonGaiaPlayers, \"Enemy\");");
code("trPlayerSetDiplomacy(p, 0, \"Neutral\");");
code("}");
code("trPlayerSetDiplomacy(0, cNumberNonGaiaPlayers, \"Enemy\");");
code("trTechSetStatus(0, 304, 4);");
code("PlayersActive = cNumberNonGaiaPlayers;");
code("PlayersActive = PlayersActive-1;");
code("aiSet(\"NoAI\", cNumberNonGaiaPlayers);");
code("}");
code("rule load2");
code("inactive");
code("highFrequency");
code("{");
code("characterDialog(\"Loading map..\", \"\"+MapVersion+\"\", \"icons\special e son of osiris icon 64\");");
code("xsEnableRule(\"load3\");");
code("xsEnableRule(\"Stats\");");
code("xsEnableRule(\"SetupChoiceUnits\");");
code("xsDisableSelf();");
code("}");
code("rule load3");
code("inactive");
code("highFrequency");
code("{");
code("if((trTime()-cActivationTime) >= 1){");
code("characterDialog(\"Loading map...\", \"\"+MapVersion+\"\", \"icons\special e son of osiris icon 64\");");
code("for(p = 1; <= cNumberNonGaiaPlayers){");
code("trPlayerGrantResources(p, \"Food\", -10000.0);");
code("trPlayerGrantResources(p, \"Wood\", -10000.0);");
code("trPlayerGrantResources(p, \"Gold\", -10000.0);");
code("trPlayerGrantResources(p, \"Favor\", -10000.0);");
code("trPlayerKillAllGodPowers(p);");
code("trSoundPlayFN(\"\Yeebaagooon\Zoo Quest\test sound.mp3\", \"1\", 25, \"\",\"\");");
code("}");
code("xsEnableRule(\"load4\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule load4");
code("inactive");
code("highFrequency");
code("{");
code("if((trTime()-cActivationTime) >= 1){");
code("trUnblockAllSounds();");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,1,false);");
code("trOverlayTextColour(255, 125, 0);");
code("gadgetUnreal(\"ShowImageBox\");");
code("trOverlayText(MapName, 8.0, 594, 28, 1000);");
code("trSetUnitIdleProcessing(true);");
code("xsDisableSelf();");
code("gadgetReal(\"ShowImageBox-BordersTop\");");
code("gadgetReal(\"ShowImageBox-BordersBottom\");");
code("gadgetReal(\"ShowImageBox-BordersLeft\");");
code("gadgetReal(\"ShowImageBox-BordersRight\");");
code("gadgetReal(\"ShowImageBox-BordersLeftTop\");");
code("gadgetReal(\"ShowImageBox-BordersLeftBottom\");");
code("gadgetReal(\"ShowImageBox-BordersRightBottom\");");
code("gadgetReal(\"ShowImageBox-BordersRightTop\");");
code("gadgetReal(\"ShowImageBox-CloseButton\");");
code("if(QuickStart == 6){");
code("xsEnableRule(\"BuildCineScene\");");
code("}");
code("if(QuickStart == 5){");
code("xsEnableRule(\"TutorialTerrainChicken\");");
code("}");
code("if(QuickStart == 4){");
code("xsEnableRule(\"TutorialTerrainCrocodile\");");
code("}");
code("if(QuickStart == 3){");
code("xsEnableRule(\"TutorialTerrainGoat\");");
code("}");
code("if(QuickStart == 2){");
code("xsEnableRule(\"TutorialTerrainRhino\");");
code("}");
code("if(QuickStart == 1){");
code("xsEnableRule(\"BuildDeerArea\");");
code("xsEnableRule(\"Animations\");");
code("xsEnableRule(\"Jump\");");
code("xsEnableRule(\"JumpEnd\");");
code("trDelayedRuleActivation(\"VectorSecond\");");
code("}");
code("if(QuickStart == 0){");
code("xsEnableRule(\"TutorialTerrain\");");
code("}");
code("xsEnableRule(\"CustomContentChat\");");
code("xsEnableRule(\"ysearch\");");
code("xsEnableRule(\"DestroyConstant\");");
code("xsEnableRule(\"Animations\");");
code("trDelayedRuleActivation(\"Help_Chat\");");
code("}");
code("}");
code("void CustomContent(int p = 0){");
code("xsDisableSelf();");
code("trQuestVarSet(\"CustomContent\", 1);");
code("}");
code("rule CustomContentChat");
code("inactive");
code("highFrequency");
code("{");
code("if(1*trQuestVarGet(\"CustomContent\") == 1){");
code("playSound(\"\Yeebaagooon\Zoo Quest\Skillpoint.mp3\");");
code("ColouredIconChat(\"1,0.5,0\", \"icons\special e son of osiris icon 64\",\"Custom Content enabled!\");");
code("}");
code("xsDisableSelf();");
code("}");
}
void techstat() {
code("rule Technologies");
code("inactive");
code("highFrequency");
code("{");
code("for(p = 1; <= cNumberNonGaiaPlayers){");
code("trTechSetStatus(p, 1, 4);");
code("trTechSetStatus(p, 2, 4);");
code("trTechSetStatus(p, 116, 4);");
code("trTechSetStatus(p, 29, 4);");
code("trTechSetStatus(p, 353, 0);");
code("trTechSetStatus(p, 394, 0);");
code("trTechSetStatus(p, 510, 0);");
code("trTechSetStatus(p, 145, 0);");
code("trTechSetStatus(p, 144, 0);");
code("trTechSetStatus(p, 143, 0);");
code("trTechSetStatus(p, 379, 0);");
code("trTechSetStatus(p, 28, 4);");
code("trTechSetStatus(p, 30, 4);");
code("trTechSetStatus(p, 350, 4);");
code("trTechSetStatus(p, 27, 4);");
code("trTechSetStatus(p, 126, 0);");
code("trTechSetStatus(p, 350, 0);");
code("for(n=930; > 0) {");
code("trForbidProtounit(p,kbGetProtoUnitName(n));");
code("}");
code("}");
code("xsDisableSelf();");
code("}");
code("void modifyBuildableProto(string proto = \"\", int p = 0) {");
code("trModifyProtounit(proto, p, 55, 4);");
code("modifyProtounitAbsolute(proto, p, 2, 0);");
code("trUnforbidProtounit(p, proto);");
code("for(i=16; <= 19) {");
code("trModifyProtounit(proto, p, i, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, i, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, i, 0.0);");
code("}");
code("}");
code("rule Stats");
code("inactive");
code("highFrequency");
code("{");
code("trModifyProtounit(\"Dwarf\", 0, 55, 4);");
code("trModifyProtounit(\"Kronny Birth\", 0, 8, 0.3);");
code("trModifyProtounit(\"Palm\", 0, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Osiris\", 1, 2, 9000);");
code("modifyProtounitAbsolute(\"Throwing Axeman\", cNumberNonGaiaPlayers, 2, 36);");
code("modifyProtounitAbsolute(\"Throwing Axeman\", cNumberNonGaiaPlayers, 0, 100);");
code("modifyProtounitAbsolute(\"Throwing Axeman\", cNumberNonGaiaPlayers, 30, 1);");
code("modifyProtounitAbsolute(\"Throwing Axeman\", cNumberNonGaiaPlayers, 11, 25);");
code("modifyProtounitAbsolute(\"Slinger\", cNumberNonGaiaPlayers, 2, 28);");
code("modifyProtounitAbsolute(\"Slinger\", cNumberNonGaiaPlayers, 0, 20);");
code("modifyProtounitAbsolute(\"Slinger\", cNumberNonGaiaPlayers, 30, 2);");
code("modifyProtounitAbsolute(\"Slinger\", cNumberNonGaiaPlayers, 11, 20);");
code("modifyProtounitAbsolute(\"Chu Ko Nu\", cNumberNonGaiaPlayers, 2, 34);");
code("modifyProtounitAbsolute(\"Chu Ko Nu\", cNumberNonGaiaPlayers, 0, 50);");
code("modifyProtounitAbsolute(\"Chu Ko Nu\", cNumberNonGaiaPlayers, 11, 24);");
code("modifyProtounitAbsolute(\"Chu Ko Nu\", cNumberNonGaiaPlayers, 30, 2);");
code("modifyProtounitAbsolute(\"Lampades Bolt\", cNumberNonGaiaPlayers, 1, 5);");
code("modifyProtounitAbsolute(\"Lampades Bolt\", cNumberNonGaiaPlayers, 8, 10);");
code("modifyProtounitAbsolute(\"Javelin Flaming\", cNumberNonGaiaPlayers, 1, 6);");
code("modifyProtounitAbsolute(\"Javelin Flaming\", cNumberNonGaiaPlayers, 8, 10);");
code("modifyProtounitAbsolute(\"Maceman\", 0, 1, 14);");
code("modifyProtounitAbsolute(\"Villager Egyptian\", cNumberNonGaiaPlayers, 0, 10000);");
code("modifyProtounitAbsolute(\"Kebenit\", cNumberNonGaiaPlayers, 0, 10);");
code("modifyProtounitAbsolute(\"Kebenit\", cNumberNonGaiaPlayers, 31, 1);");
code("modifyProtounitAbsolute(\"Kebenit\", cNumberNonGaiaPlayers, 13, 1);");
code("modifyProtounitAbsolute(\"Kebenit\", cNumberNonGaiaPlayers, 26, 0);");
code("modifyProtounitAbsolute(\"Kebenit\", cNumberNonGaiaPlayers, 2, 20);");
code("modifyProtounitAbsolute(\"Kebenit\", cNumberNonGaiaPlayers, 11, 14);");
code("modifyProtounitAbsolute(\"Titan Atlantean\", 0, 2, 0);");
code("modifyProtounitAbsolute(\"Titan Gate Dead\", 0, 2, 0);");
code("modifyProtounitAbsolute(\"Shrine\", 0, 2, 0);");
code("modifyProtounitAbsolute(\"Monument\", 0, 2, 0);");
code("modifyProtounitAbsolute(\"Runestone\", 0, 2, 0);");
code("modifyProtounitAbsolute(\"Frost Drift\", 0, 2, 0);");
code("modifyProtounitAbsolute(\"Torch\", 0, 2, 0);");
code("modifyProtounitAbsolute(\"Flag\", 0, 2, 2);");
code("modifyProtounitAbsolute(\"Spy Eye\", 0, 2, 2);");
code("modifyProtounitAbsolute(\"Zebra\", 0, 1, 0);");
code("modifyProtounitAbsolute(\"Zebra\", 0, 0, 1);");
code("modifyProtounitAbsolute(\"Cinematic Block\", 0, 2, 2);");
code("modifyProtounitAbsolute(\"Sentinel Main\", cNumberNonGaiaPlayers, 0, 30);");
code("modifyProtounitAbsolute(\"Sentinel Main\", cNumberNonGaiaPlayers, 31, 2);");
code("modifyProtounitAbsolute(\"Sentinel Main\", cNumberNonGaiaPlayers, 26, 0);");
code("modifyProtounitAbsolute(\"Peltast\", cNumberNonGaiaPlayers, 0, 30);");
code("modifyProtounitAbsolute(\"Peltast\", cNumberNonGaiaPlayers, 31, 5);");
code("modifyProtounitAbsolute(\"Peltast\", cNumberNonGaiaPlayers, 26, 0);");
code("modifyProtounitAbsolute(\"Peltast\", cNumberNonGaiaPlayers, 2, 30);");
code("modifyProtounitAbsolute(\"Peltast\", cNumberNonGaiaPlayers, 11, 24);");
code("modifyProtounitAbsolute(\"Siege Ship Egyptian\", cNumberNonGaiaPlayers, 0, 250);");
code("modifyProtounitAbsolute(\"Siege Ship Egyptian\", cNumberNonGaiaPlayers, 13, 1);");
code("modifyProtounitAbsolute(\"Siege Ship Egyptian\", cNumberNonGaiaPlayers, 32, 100);");
code("for(p = 1; <= cNumberNonGaiaPlayers){");
code("trTechSetStatus(p, 27 ,4);");
code("trTechSetStatus(p, 28 ,4);");
code("modifyProtounitAbsolute(\"Rocket\", p, 1, 5);");
code("modifyProtounitAbsolute(\"Rocket\", p, 8, 10);");
code("modifyProtounitAbsolute(\"Wadjet Spit\", p, 1, 9);");
code("modifyProtounitAbsolute(\"Wadjet Spit\", p, 8, 10);");
code("modifyProtounitAbsolute(\"Maceman\", p, 1, 14);");
code("trModifyProtounit(\"Dwarf\", p, 55, 4);");
code("trModifyProtounit(\"Animal Attractor\", p, 55, 4);");
code("trModifyProtounit(\"Hero Greek Bellerophon\", p, 55, 4);");
code("modifyProtounitAbsolute(\"\"+GazelleProto, p, 0, 2);");
code("modifyProtounitAbsolute(\"\"+GazelleProto, p, 2, 22);");
code("modifyProtounitAbsolute(\"Hero Greek Bellerophon\", p, 0, 2);");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 0, 10);");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 9, 30);");
code("modifyProtounitAbsolute(\"\"+RhinoDrinkProto, p, 0, 10);");
code("modifyProtounitAbsolute(\"\"+RhinoDrinkProto, p, 1, 0);");
code("modifyProtounitAbsolute(\"\"+RhinoDrinkProto, p, 2, 10);");
code("modifyProtounitAbsolute(\"\"+RhinoDrinkProto, p, 14, 0);");
code("modifyProtounitAbsolute(\"\"+RhinoDrinkProto, p, 15, 0);");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 1, xGetFloat(dPlayerData, xRhinoWalk));");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 2, 22);");
code("modifyProtounitAbsolute(\"\"+GoatProto, p, 0, 6);");
code("modifyProtounitAbsolute(\"\"+GoatProto, p, 5, 0);");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 0, 5);");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 1, xGetFloat(dPlayerData, xCrocLandSpeed));");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 2, 10);");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 22, 10000);");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 0, 5);");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 1, xGetFloat(dPlayerData, xCrocLandSpeed));");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 2, 10);");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 22, 10000);");
code("for(a = 24; <= 29){");
code("modifyProtounitAbsolute(\"\"+GazelleProto, p, a, 0);");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, a, 0);");
code("modifyProtounitAbsolute(\"\"+GoatProto, p, a, 0);");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, a, 0);");
code("modifyProtounitAbsolute(\"\"+ChickenProto, p, a, 0);");
code("modifyProtounitAbsolute(\"Tower\", p, a, 0);");
code("modifyProtounitAbsolute(\"Hero Greek Bellerophon\", p, a, 0);");
code("}");
code("for(a = 27; <= 32){");
code("modifyProtounitAbsolute(\"\"+ChickenProto, p, a, 0);");
code("modifyProtounitAbsolute(\"Tower\", p, a, 0);");
code("}");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 27, 15);");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 11, 2);");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 12, 2);");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 13, 0);");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 29, 5);");
code("modifyBuildableProto(\"House\", p);");
code("modifyBuildableProto(\"Granary\", p);");
code("modifyBuildableProto(\"Storehouse\", p);");
code("modifyProtounitAbsolute(\"House\", p, 16, -1);");
code("modifyProtounitAbsolute(\"Granary\", p, 17, -1);");
code("modifyProtounitAbsolute(\"Storehouse\", p, 18, -1);");
code("trModifyProtounit(\"\"+YesChoiceUnitName, p, 55, 4);");
code("trModifyProtounit(\"\"+YesChoiceUnitName, p, 1, -10);");
code("trModifyProtounit(\"\"+YesChoiceUnitName, p, 2, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName, p, 2, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName, p, 2, 0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 2, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 2, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 2, 0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 6, -100);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 16, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 17, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 18, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 19, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 16, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 17, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 18, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+YesChoiceUnitName + \" Hero\", p, 19, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName, p, 55, 4);");
code("trModifyProtounit(\"\"+NoChoiceUnitName, p, 1, -10);");
code("trModifyProtounit(\"\"+NoChoiceUnitName, p, 2, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName, p, 2, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName, p, 2, 0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 2, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 2, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 2, 0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 6, -100);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 16, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 17, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 18, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 19, 9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 16, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 17, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 18, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+NoChoiceUnitName + \" Hero\", p, 19, -9999999999999999999.0);");
code("trModifyProtounit(\"\"+CrocProto, p, 55, 3);");
code("trModifyProtounit(\"Petsuchos\", p, 55, 3);");
code("modifyProtounitAbsolute(\"Tower\", p, 16, 0);");
code("modifyProtounitAbsolute(\"Tower\", p, 17, 0);");
code("modifyProtounitAbsolute(\"Tower\", p, 18, 0);");
code("modifyProtounitAbsolute(\"Tower\", p, 19, 0);");
code("modifyProtounitAbsolute(\"Tower\", p, 13, 1);");
code("modifyProtounitAbsolute(\"Tower\", p, 12, 0);");
code("modifyProtounitAbsolute(\"Tower\", p, 11, 20);");
code("modifyProtounitAbsolute(\"Tower\", p, 2, 22);");
code("modifyProtounitAbsolute(\"Tower\", p, 0, 100);");
code("modifyProtounitAbsolute(\"\"+ChickenProto, p, 0, 100);");
code("modifyProtounitAbsolute(\"Tower\", p, 5, 1);");
code("modifyProtounitAbsolute(\"Tower\", p, 31, xGetInt(dPlayerData, xTowerDamage));");
code("modifyProtounitAbsolute(\"Tower\", p, 10, 10);");
code("modifyProtounitAbsolute(\"Tower\", p, 4, 10);");
code("modifyProtounitAbsolute(\"Armory\", p, 10, 1);");
code("modifyProtounitAbsolute(\"Armory\", p, 4, 100);");
code("}");
code("trModifyProtounit(\"Huskarl\", 0, 55, 4);");
code("trModifyProtounit(\"Trident Soldier\", 0, 55, 4);");
code("trModifyProtounit(\"Dwarf\", 0, 55, 4);");
code("trModifyProtounit(\"Huskarl\", cNumberNonGaiaPlayers, 55, 4);");
code("trModifyProtounit(\"Trident Soldier\", cNumberNonGaiaPlayers, 55, 4);");
code("trModifyProtounit(\"Dwarf\", cNumberNonGaiaPlayers, 55, 4);");
code("trModifyProtounit(\"Invisible Target\", 0, 55, 4);");
code("trModifyProtounit(\"Invisible Target\", cNumberNonGaiaPlayers, 55, 4);");
code("trModifyProtounit(\"Maceman\", 0, 55, 4);");
code("trModifyProtounit(\"Maceman\", cNumberNonGaiaPlayers, 55, 4);");
code("modifyProtounitAbsolute(\"Militia\", cNumberNonGaiaPlayers, 0, 10);");
code("modifyProtounitAbsolute(\"Militia\", cNumberNonGaiaPlayers, 27, 2);");
code("xsDisableSelf();");
code("}");
}
void tutorialdeer() {
code("rule TutorialTerrain");
code("highFrequency");
code("inactive");
code("{");
code("xsDisableSelf();");
code("TutorialMode = true;");
code("clearMap(\"black\", 5.0);");
code("trPaintTerrain(0,0,35,cNumberNonGaiaPlayers*8,2,4);");
code("int temp = 0;");
code("for(t=0 ; < cNumberNonGaiaPlayers){");
code("for(x=0 ; < 36){");
code("if(iModulo(7,x) == 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", x*2, t*16+8, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Berry Bush\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetSelectedScale(2,3,2);");
code("}");
code("else{");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", x*2, t*16+8, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Gaia Forest Tree\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetSelectedScale(2,0.3,1);");
code("}");
code("}");
code("}");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trPaintTerrain(5,((p*8)-2),30,((p*8+4)-2),0,2);");
code("PaintAtlantisArea(6,p*8-1,8,p*8+1,0,8);");
code("trPaintTerrain(28,p*8+2,28,p*8-2,0,74);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 20, p*16, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Rotting Log\");");
code("trSetSelectedScale(2,3,2);");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 32, p*16, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Rotting Log\");");
code("trSetSelectedScale(2,3,2);");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 46, p*16, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Rotting Log\");");
code("trSetSelectedScale(2,3,2);");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("trPaintTerrain(10,p*8+2,10,p*8-2,2,4);");
code("trPaintTerrain(16,p*8+2,16,p*8-2,2,4);");
code("trPaintTerrain(23,p*8+2,23,p*8-2,2,4);");
code("trQuestVarSet(\"P\"+p+\"Unit\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(p, \"\"+GazelleProto, 14, p*16, 90);");
code("trSetSelectedScale(0,1,0);");
code("UnitCreate(0, \"Revealer to Player\", 16, p*16, 90);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("spyEffect(kbGetProtoUnitID(\"Gazelle\"),0, xsVectorSet(dPlayerData,xSpyID,p), vector(1,1,1));");
code("trQuestVarSet(\"P\"+p+\"CanHaveVision\", 1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitMoveToPoint(16,0,p*16+1, -1, false);");
code("xSetPointer(dPlayerData, xPlayerUnitID);");
code("xSetInt(dPlayerData, xPlayerUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("trVectorQuestVarSet(\"V\"+p+\"Second\", xsVectorSet(18, 0, p*16));");
code("if(trCurrentPlayer() == p){");
code("trCounterAddTime(\"cdtutorial\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Press 'Q' to jump forward.\", -1);");
code("}");
code("}");
code("trPaintTerrain(0,0,0,0,2,4,true);");
code("xsEnableRule(\"Jump\");");
code("xsEnableRule(\"JumpEnd\");");
code("trDelayedRuleActivation(\"VectorSecond\");");
code("if(QuickStart == 0){");
code("xsEnableRule(\"TutorialMsg1\");");
code("startNPCDialog(2);");
code("}");
code("playSoundCustom(\"\cinematics\29_in\music2.mp3\", \"\Yeebaagooon\Zoo Quest\Zoo Quest Theme.mp3\");");
code("}");
code("rule ResetBlackmap");
code("highFrequency");
code("inactive");
code("{");
code("if(QuickStart == 0){");
code("trSetFogAndBlackmap(true,true);");
code("trPlayerResetBlackMapForAllPlayers();");
code("}");
code("else{");
code("trSetFogAndBlackmap(false,false);");
code("}");
code("if(LOS == true){");
code("trSetFogAndBlackmap(false,false);");
code("}");
code("else{");
code("trPlayerResetBlackMapForAllPlayers();");
code("trSetFogAndBlackmap(true,true);");
code("}");
code("xsDisableSelf();");
code("}");
code("rule TutorialLoops");
code("highFrequency");
code("inactive");
code("{");
code("int temp = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((playerIsPlaying(p) == false) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("xSetBool(dPlayerData, xPlayerActive, false);");
code("PlayersActive = PlayersActive-1;");
code("trPaintTerrain(5,((p*8)-2),30,((p*8+4)-2),2,4);");
code("trUnitSelectClear();");
code("for(a = 0 ; <= xGetDatabaseCount(dTemp)){");
code("xDatabaseNext(dTemp);");
code("if(xGetInt(dTemp, xExtra) == p){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("}");
code("}");
code("if((trVectorQuestVarGetX(\"P\"+p+\"Pos\") > 58) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("trQuestVarSet(\"P\"+p+\"DoneTutorial\", 1);");
code("trQuestVarModify(\"PlayersDoneTutorial\", \"+\", 1);");
code("temp = 1*trQuestVarGet(\"PlayersDoneTutorial\");");
code("trPaintTerrain(5,((p*8)-2),30,((p*8+4)-2),2,4);");
code("trUnitSelectClear();");
code("for(a = 0 ; <= xGetDatabaseCount(dTemp)){");
code("xDatabaseNext(dTemp);");
code("if(xGetInt(dTemp, xExtra) == p){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trClearCounterDisplay();");
code("trSetCounterDisplay(\"<color={PlayerColor(\" + GreenText() + \")}>Tutorial complete: \" + temp + \" / \" + PlayersActive);");
code("if((temp == 1) && (PlayersActive > 1)){");
code("xsEnableRule(\"TutorialTimeout\");");
code("}");
code("if(trCurrentPlayer() == p){");
code("playSound(\"ageadvance.wav\");");
code("trCounterAbort(\"cdtutorial\");");
code("}");
code("}");
code("if((trVectorQuestVarGetZ(\"P\"+p+\"Pos\") > (p*16+8)) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitTeleport(trVectorQuestVarGetX(\"P\"+p+\"Pos\"),3,p*16);");
code("}");
code("if((trVectorQuestVarGetZ(\"P\"+p+\"Pos\") < (p*16-8)) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitTeleport(trVectorQuestVarGetX(\"P\"+p+\"Pos\"),3,p*16);");
code("}");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if((trUnitDead() == true) && (xGetBool(dPlayerData, xPlayerActive) == true) &&");
code("(1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("if(Stage == 1){");
code("CreateGazelle(p, 14, p*16, 90);");
code("}");
code("if(Stage == 2){");
code("CreateRhino(p, 14, p*16, 90);");
code("}");
code("}");
code("}");
code("}");
code("rule TutorialTimeout");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("if(TutorialMode){");
code("trCounterAddTime(\"cdtutorialtimeout\", 9+Stage*2, 0, \"<color={PlayerColor(0)}>Tutorial timeout\", 33);");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("void TutForceEnd(int p = 0){");
code("trQuestVarSet(\"PlayersDoneTutorial\", PlayersActive);");
code("}");
code("rule DeerTutorialDone");
code("highFrequency");
code("inactive");
code("{");
code("if((PlayersActive == 1*trQuestVarGet(\"PlayersDoneTutorial\")) && (PlayersActive > 0)){");
code("xsDisableSelf();");
code("xsDisableRule(\"TutorialLoops\");");
code("trClearCounterDisplay();");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAbort(\"cdtutorialtimeout\");");
code("trQuestVarSet(\"PlayersDoneTutorial\", 0);");
code("xResetDatabase(dTemp);");
code("TutorialMode = false;");
code("if(PlayCine){");
code("xsEnableRule(\"BuildCineScene\");");
code("}");
code("else{");
code("xsEnableRule(\"CineStartSkip\");");
code("}");
code("}");
code("}");
code("rule CineStartSkip");
code("highFrequency");
code("inactive");
code("{");
code("xsDisableSelf();");
code("xsDisableRule(\"TutorialLoops\");");
code("xsEnableRule(\"BuildDeerArea\");");
code("trClearCounterDisplay();");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAbort(\"cdtutorialtimeout\");");
code("trQuestVarSet(\"PlayersDoneTutorial\", 0);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,1,1,true);");
code("Stage = 1;");
code("characterDialog(ActName(Stage), \" \", ActIcon(Stage));");
code("trSetFogAndBlackmap(true,true);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("xResetDatabase(dTemp);");
code("}");
code("rule TutorialMsg1");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trDelayedRuleActivation(\"TutorialLoops\");");
code("trDelayedRuleActivation(\"DeerTutorialDone\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule Animations");
code("highFrequency");
code("inactive");
code("{");
code("int anim = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("anim = 0;");
code("anim = kbUnitGetAnimationActionType(kbGetBlockID(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")+\"\"));");
code("xSetPointer(dPlayerData, p);");
code("if((xGetInt(dPlayerData, xOldAnim) == anim) || (xGetInt(dPlayerData, xOldAnim) == -10)){");
code("continue;");
code("}");
code("xSetInt(dPlayerData, xOldAnim, anim);");
code("if((anim == 10) || (anim == 11)){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("if(xGetBool(dPlayerData, xCharge) == false){");
code("if(Stage != 4){");
code("trUnitOverrideAnimation(15, 0, true, true, -1, 0);");
code("}");
code("else{");
code("if(xGetBool(dPlayerData, xSwimming) == true){");
code("trUnitOverrideAnimation(3, 0, true, true, -1, 0);");
code("}");
code("else{");
code("trUnitOverrideAnimation(15, 0, true, true, -1, 0);");
code("}");
code("}");
code("}");
code("else{");
code("trUnitOverrideAnimation(13, 0, true, true, -1, 0);");
code("}");
code("}");
code("if(anim == 9){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("if(Stage != 5){");
code("trUnitOverrideAnimation(2, 0, true, true, -1, 0);");
code("}");
code("else{");
code("trUnitOverrideAnimation(3, 0, true, true, -1, 0);");
code("}");
code("if(xGetBool(dPlayerData, xCharge) == true){");
code("ToggleCharge(p);");
code("}");
code("}");
code("if(anim == 5){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitOverrideAnimation(24, 0, true, true, -1, 0);");
code("}");
code("if(anim == 1){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitOverrideAnimation(2, 0, true, true, -1, 0);");
code("}");
code("if(Stage > 1){");
code("if((anim == 6) || (anim == 46)){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitOverrideAnimation(1, 0, true, true, -1, 0);");
code("}");
code("if(anim == 8){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitOverrideAnimation(18, 0, true, true, -1, 0);");
code("if(1*trQuestVarGet(\"P\"+p+\"MsgWarn\") == 0){");
code("trQuestVarSet(\"P\"+p+\"MsgWarn\", 47);");
code("if(trCurrentPlayer() == p){");
code("startNPCDialog(13);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("rule Jump");
code("highFrequency");
code("inactive");
code("{");
code("int anim = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("if(trPlayerResourceCount(p, \"Gold\") > 0){");
code("xSetPointer(dPlayerData, p);");
code("trPlayerGrantResources(p, \"Gold\", -100000);");
code("if(xGetBool(dPlayerData, xReadyToLeave) == false){");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Bellerophon\"));");
code("trSetSelectedScale(0,1,0);");
code("xSetInt(dPlayerData, xOldAnim, -10);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitOverrideAnimation(13, 0, true, false, -1, 0);");
code("xSetInt(dPlayerData, xTarget, trGetNextUnitScenarioNameNumber());");
code("UnitCreate(cNumberNonGaiaPlayers, \"Female\", trVectorQuestVarGetX(\"V\"+p+\"Second\"),");
code("trVectorQuestVarGetZ(\"V\"+p+\"Second\"), 0);");
code("xUnitSelect(dPlayerData, xTarget);");
code("trSetSelectedScale(0.1,0.1,0.1);");
code("trSetUnitOrientation(trVectorQuestVarGet(\"V\"+p+\"dir\"), vector(0,1,0), true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDoWorkOnUnit(\"\"+xGetInt(dPlayerData, xTarget),-1);");
code("xAddDatabaseBlock(dDestroyMe, true);");
code("xSetInt(dDestroyMe, xDestroyName, xGetInt(dPlayerData, xTarget));");
code("xSetInt(dDestroyMe, xDestroyTime, trTimeMS()+2300);");
code("}");
code("}");
code("if(trPlayerResourceCount(p, \"Wood\") > 0){");
code("trPlayerGrantResources(p, \"Wood\", -100000);");
code("}");
code("if(trPlayerResourceCount(p, \"Food\") > 0){");
code("trPlayerGrantResources(p, \"Food\", -100000);");
code("}");
code("}");
code("}");
code("rule JumpEnd");
code("highFrequency");
code("inactive");
code("{");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(xGetInt(dPlayerData, xTarget) > 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xTarget));");
code("if((trUnitPercentDamaged() > 0) || (trUnitDead())){");
code("xUnitSelect(dPlayerData, xTarget);");
code("trUnitConvert(p);");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("trSetSelectedScale(0,1,0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+xGetInt(dPlayerData, xTarget));");
code("trUnitChangeProtoUnit(\"\"+GazelleProto);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetSelectedScale(0,1,0);");
code("xUnitSelect(dPlayerData, xTarget);");
code("trUnitDestroy();");
code("xSetInt(dPlayerData, xTarget, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if(xGetBool(dPlayerData, xReadyToLeave) == false){");
code("trMutateSelected(kbGetProtoUnitID(\"\"+GazelleProto));");
code("}");
code("if(xGetBool(dPlayerData, xReadyToLeave) == true){");
code("trMutateSelected(kbGetProtoUnitID(\"Prisoner\"));");
code("}");
code("trSetSelectedScale(0,1,0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetUnitOrientation(trVectorQuestVarGet(\"V\"+p+\"dir\"), vector(0,1,0), true);");
code("xSetInt(dPlayerData, xOldAnim, 2);");
code("xUnitSelect(dPlayerData, xSpyID);");
code("trUnitOverrideAnimation(2, 0, true, true, -1, 0);");
code("trQuestVarSet(\"P\"+p+\"CanHaveVision\", 1);");
code("trVectorQuestVarSet(\"P\"+p+\"Pos\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if(1*trQuestVarGet(\"P\"+p+\"FirstJump\") == 0){");
code("trQuestVarSet(\"P\"+p+\"FirstJump\", 1);");
code("if(QuickStart == 0){");
code("if(trCurrentPlayer() == p){");
code("startNPCDialog(4);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("trUnitSelectClear();");
code("}");
code("}");
code("rule VectorFirst");
code("highFrequency");
code("inactive");
code("{");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trVectorQuestVarSet(\"V\"+p+\"Third\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if(trVectorQuestVarGet(\"V\"+p+\"Third\") != trVectorQuestVarGet(\"P\"+p+\"Pos\")){");
code("trVectorQuestVarSet(\"V\"+p+\"Second\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("trVectorQuestVarSet(\"V\"+p+\"Second\", trVectorQuestVarGet(\"V\"+p+\"Second\") - trVectorQuestVarGet(\"P\"+p+\"Pos\"));");
code("trVectorQuestVarSet(\"V\"+p+\"Second\", xsVectorNormalize(trVectorQuestVarGet(\"V\"+p+\"Second\")));");
code("trVectorQuestVarSet(\"V\"+p+\"dir\", trVectorQuestVarGet(\"V\"+p+\"Second\"));");
code("trVectorQuestVarSet(\"V\"+p+\"Second\", xsVectorSet(trVectorQuestVarGetX(\"V\"+p+\"Second\") * 10,");
code("trVectorQuestVarGetY(\"V\"+p+\"Second\") * 1,trVectorQuestVarGetZ(\"V\"+p+\"Second\") * 10));");
code("trVectorQuestVarSet(\"V\"+p+\"Second\", trVectorQuestVarGet(\"V\"+p+\"Second\") + trVectorQuestVarGet(\"P\"+p+\"Pos\"));");
code("if(1*trQuestVarGet(\"P\"+p+\"CanHaveVision\") == 1){");
code("trQuestVarSet(\"P\"+p+\"CanHaveVision\", 0);");
code("}");
code("}");
code("}");
code("xsDisableSelf();");
code("trDelayedRuleActivation(\"VectorSecond\");");
code("}");
code("rule VectorSecond");
code("highFrequency");
code("inactive");
code("{");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trVectorQuestVarSet(\"P\"+p+\"Pos\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("}");
code("xsDisableSelf();");
code("trDelayedRuleActivation(\"VectorFirst\");");
code("}");
}
void ActDeer() {
code("rule BuildDeerArea");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("createDeepForestArea();");
code("xsDisableSelf();");
code("replaceTerrainAboveHeightMax(\"GaiaCreepA\", \"GrassB\", 0.0);");
code("replaceTerrainAboveHeightMax(\"CoralA\", \"GrassB\", 0.0);");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,100,800,false);");
code("trCameraCut(vector(-36.525265,123.743729,-36.525265), vector(0.500000,-0.707107,0.500000), vector(0.500000,0.707107,");
code("0.500000), vector(0.707107,0.000000,-0.707107));");
code("uiZoomToProto(\"\"+GazelleProto);");
code("uiLookAtProto(\"\"+GazelleProto);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trDelayedRuleActivation(\"DeerActLoops\");");
code("trDelayedRuleActivation(\"DeerMinigameDetect\");");
code("trDelayedRuleActivation(\"DeerLeave\");");
code("trDelayedRuleActivation(\"TEST\");");
code("trDelayedRuleActivation(\"DeerAllDead\");");
code("trDelayedRuleActivation(\"PoacherTimer\");");
code("trDelayedRuleActivation(\"DeerEndZoneSee\");");
code("xsEnableRule(\"DeerPoacherMovement\");");
code("BerryTarget = 8+PlayersActive;");
code("if(BerryTarget >= xGetDatabaseCount(dBerryBush)){");
code("BerryTarget = xGetDatabaseCount(dBerryBush)-12+PlayersActive;");
code("}");
code("BerryTotal = xGetDatabaseCount(dBerryBush);");
code("trSetCounterDisplay(\"<color={PlayerColor(2)}>Berries Eaten: 0 / \" + BerryTarget);");
code("ColouredIconChat(\"1,0.5,0\", ActIcon(Stage), \"<u>\" + ActName(Stage) + \"</u>\");");
code("ColouredIconChat(\"0.0,0.8,0.2\", \"icons\world berry bush icon 64\", \"Eat at least the required number of berries\");");
code("trChatSend(0, \"In each act you need to find and move to the extraction zone.\");");
code("trChatSend(0, \"It is a ring of ice terrain.\");");
code("trChatSend(0, \"When all players are dead or in the zone, the act ends.\");");
code("trChatSend(0, \"Make sure to explore, as higher act scores help you out later.\");");
code("playSound(\"\cinematics\19_out\music 2.mp3\");");
code("xsEnableRule(\"PlayMusicDelay\");");
code("}");
code("}");
code("rule PlayMusic");
code("highFrequency");
code("inactive");
code("{");
code("trMusicPlay();");
code("trPlayNextMusicTrack();");
code("xsDisableSelf();");
code("}");
code("rule PlayMusicDelay");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 29) {");
code("trMusicPlay();");
code("trPlayNextMusicTrack();");
code("xsDisableSelf();");
code("}");
code("}");
code("void SpawnDeerPoachers(int unused = 0){");
code("unused = xsGetContextPlayer();");
code("xsSetContextPlayer(0);");
code("if(Stage == 1){");
code("trOverlayText(\"Poachers Spawned!\", 5.0,-1,-1,600);");
code("SpawnDeerPoacher(xsMax(PlayersActive,2));");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("}");
code("xsSetContextPlayer(unused);");
code("}");
code("rule PoacherTimer");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 64) {");
code("if(InMinigame == false){");
code("if(Stage == 1){");
code("trCounterAddTime(\"poachtimer\", 122, 0, \"<color={PlayerColor(2)}>Poachers spawn\", 32);");
code("trQuestVarSet(\"NextPoacherSpawn\", trTime()+200);");
code("xsEnableRule(\"PoacherSpawnLoop\");");
code("ColouredIconChat(\"1,0,0\", \"icons\archer n throwing axeman icon 64\", \"<u>Watch out for poachers!</u>\");");
code("ColouredChat(\"0.9,0.3,0.3\", \"They can hide amongst the trees or actively scout for you.\");");
code("ColouredChat(\"0.9,0.3,0.3\", \"You will be attacked on sight.\");");
code("ColouredChat(\"0.9,0.3,0.3\", \"But can run or jump over the attacks.\");");
code("}");
code("xsDisableSelf();");
code("xsEnableRule(\"ChestTimer\");");
code("}");
code("}");
code("}");
code("rule ChestTimer");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 54) {");
code("if(InMinigame == false){");
code("int x = xGetDatabaseCount(dChests);");
code("if((Stage == 1) && (x > 0)){");
code("ColouredIconChat(\"0,1,0\", \"icons\special e osiris box icon 64\", \"<u>Look out for chests!</u>\");");
code("ColouredChat(\"0.3,0.9,0.3\", \"There are \" + x + \" unopened chests still to find.\");");
code("ColouredChat(\"0.3,0.9,0.3\", \"Move near a chest to open it.\");");
code("ColouredChat(\"0.3,0.9,0.3\", \"A stat bonus is granted for the player who does this.\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("rule PoacherSpawnLoop");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > 1*trQuestVarGet(\"NextPoacherSpawn\")) {");
code("if(Stage == 1){");
code("SpawnDeerPoacher(2);");
code("trQuestVarModify(\"NextPoacherSpawn\", \"+\", 50);");
code("}");
code("}");
code("}");
code("rule TEST");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 3) {");
code("if(QuickStart != 0){");
code("trTechGodPower(1, \"Vision\", 111);");
code("trTechGodPower(1, \"Sandstorm\", 111);");
code("modifyProtounitAbsolute(\"\"+GazelleProto, 1, 1, 20);");
code("}");
code("xsDisableSelf();");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("}");
code("}");
code("void ProcessBerries(int count = 1) {");
code("int temp = 0;");
code("vector pos = vector(0,0,0);");
code("vector posberry = vector(0,0,0);");
code("for (x=xsMin(count, xGetDatabaseCount(dBerryBush)); > 0) {");
code("xDatabaseNext(dBerryBush);");
code("xUnitSelect(dBerryBush, xUnitID);");
code("trUnitHighlight(10, false);");
code("posberry = xGetVector(dBerryBush, xUnitPos);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("pos = trVectorQuestVarGet(\"P\"+p+\"Pos\");");
code("if(distanceBetweenVectors(posberry, pos, true) < 10){");
code("trUnitSelectClear();");
code("xUnitSelect(dBerryBush, xUnitID);");
code("trUnitChangeProtoUnit(\"Curse SFX\");");
code("trQuestVarModify(\"BerriesEaten\", \"+\", 1);");
code("temp = 1*trQuestVarGet(\"BerriesEaten\");");
code("trClearCounterDisplay();");
code("if(temp < BerryTarget){");
code("trSetCounterDisplay(\"<color={PlayerColor(2)}>Berries Eaten: \" + temp + \" / \" + BerryTarget);");
code("}");
code("else{");
code("trSetCounterDisplay(\"<color={PlayerColor(3)}>Berries Eaten: \" + temp);");
code("}");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"colossuseat.wav\", \"\Yeebaagooon\Zoo Quest\Eat.mp3\");");
code("}");
code("if(temp == BerryTarget){");
code("playSoundCustom(\"cinematics\10_in\clearedcity.wav\", \"\Yeebaagooon\Zoo Quest\Skillpoint.mp3\");");
code("trMessageSetText(\"If all players make it to the extraction zone alive you will pass the act.\", 10000);");
code("}");
code("xFreeDatabaseBlock(dBerryBush);");
code("if(xGetDatabaseCount(dBerryBush) == 0){");
code("playSoundCustom(\"cinematics\10_in\clearedcity.wav\", \"\Yeebaagooon\Zoo Quest\Skillpoint.mp3\");");
code("trOverlayText(\"All berries eaten!\", 5.0,-1,-1,600);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void ProcessLogs(int count = 1) {");
code("int temp = 0;");
code("vector pos = vector(0,0,0);");
code("vector poslog = vector(0,0,0);");
code("for (x=xsMin(count, xGetDatabaseCount(dLogs)); > 0) {");
code("xDatabaseNext(dLogs);");
code("poslog = xGetVector(dLogs, xUnitPos);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(xGetInt(dPlayerData, xLogJumps) == 0){");
code("pos = trVectorQuestVarGet(\"P\"+p+\"Pos\");");
code("if(distanceBetweenVectors(poslog, pos, true) < 2){");
code("xSetInt(dPlayerData, xLogJumps, 1);");
code("ColouredIconChatToPlayer(p, \"0,1,0.2\", \"world a rotting log shadow\", \"Perfect log jump!\");");
code("if(trCurrentPlayer() == p){");
code("playSound(\"\cinematics\14_in\chimes.mp3\");");
code("}");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("rule DeerActLoops");
code("highFrequency");
code("inactive");
code("{");
code("if(Stage == 1){");
code("timediff = 0.001 * (trTimeMS() - timelast);");
code("timelast = trTimeMS();");
code("int temp = 0;");
code("int TimerTile = 0;");
code("ProcessBerries(5);");
code("ProcessLogs(7);");
code("if(xGetDatabaseCount(dMissiles) > 0){");
code("DoMissile();");
code("}");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((playerIsPlaying(p) == false) && (xGetBool(dPlayerData, xPlayerActive) == true) && (xGetBool(dPlayerData,");
code("xPlayerDead) == false)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("xSetBool(dPlayerData, xPlayerActive, false);");
code("PlayersActive = PlayersActive-1;");
code("}");
code("if((xGetBool(dPlayerData, xStopDeath) == false) && (trPlayerUnitCountSpecific(p, \"\"+GazelleProto) == 0) &&");
code("(trPlayerUnitCountSpecific(p, \"Hero Greek Bellerophon\") == 0) && (trPlayerUnitCountSpecific(p, \"Prisoner\") == 0) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true) && (xGetBool(dPlayerData, xPlayerDead) == false) &&");
code("(InMinigame == false)){");
code("PlayersDead = PlayersDead+1;");
code("xSetBool(dPlayerData, xPlayerDead, true);");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is dead!\");");
code("PlayerColouredChatToSelf(p, \"You'll be able to join the next act if your team pass this one.\");");
code("trPlayerKillAllGodPowers(p);");
code("xSetVector(dPlayerData, xDeathVector, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("trTechGodPower(1, \"Rain\", 1);");
code("if(iModulo(2, trTime()) == 0){");
code("playSound(\"\dialog\fr\skul062.mp3\");");
code("}");
code("else{");
code("playSound(\"\xpack\xdialog\fr\xkri075.mp3\");");
code("}");
code("}");
code("xSetVector(dPlayerData, xConstantPos, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if(xGetInt(dPlayerData, xHPRegen) > 0){");
code("if(trTime() > xGetInt(dPlayerData, xHPRegenNext)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trDamageUnit(-1*xGetInt(dPlayerData, xHPRegen));");
code("xSetInt(dPlayerData, xHPRegenNext, trTime()+xGetInt(dPlayerData, xHPRegenTime));");
code("}");
code("}");
code("if(InMinigame == true){");
code("for(b = 0; <xGetDatabaseCount(dPoachers)){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("if(xGetBool(dPlayerData, xStopDeath) == true){");
code("if(trPlayerUnitCountSpecific(p, \"\"+GazelleProto) == 1){");
code("trVectorQuestVarSet(\"P\"+p+\"PosMG\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if((trGetTerrainType(trVectorQuestVarGetX(\"P\"+p+\"PosMG\")/2,trVectorQuestVarGetZ(\"P\"+p+\"PosMG\")/2) == 2) &&");
code("(trGetTerrainSubType(trVectorQuestVarGetX(\"P\"+p+\"PosMG\")/2,trVectorQuestVarGetZ(\"P\"+p+\"PosMG\")/2) == 10)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("UnitCreate(0, \"Tartarian Gate Flame\", trVectorQuestVarGetX(\"P\"+p+\"PosMG\"),trVectorQuestVarGetZ(\"P\"+p+\"PosMG\"), 90);");
code("if(xGetInt(dPlayerData, xTeleportDue) == 0){");
code("xSetVector(dPlayerData, xVectorHold, trVectorQuestVarGet(\"P\"+p+\"PosMG\"));");
code("}");
code("PlayersMinigaming = PlayersMinigaming-1;");
code("if(trCurrentPlayer() == p){");
code("playSound(\"xlose.wav\");");
code("trOverlayText(\"Minigame Failed!\", 3.0,-1,-1,600);");
code("}");
code("}");
code("trVectorQuestVarSet(\"P\"+p+\"PosMG\", trVectorQuestVarGet(\"P\"+p+\"PosMG\")/2);");
code("if((trVectorQuestVarGetZ(\"P\"+p+\"PosMG\") < xsVectorGetZ(StageVector)+1) ||");
code("(trVectorQuestVarGetZ(\"P\"+p+\"PosMG\") > xsVectorGetZ(StageVector)+11) ||");
code("(trVectorQuestVarGetX(\"P\"+p+\"PosMG\") < xsVectorGetX(StageVector))){");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("PlayersMinigaming = PlayersMinigaming-1;");
code("if(trCurrentPlayer() == p){");
code("playSound(\"xlose.wav\");");
code("trMessageSetText(\"You have gone out of bounds and been returned to normal play.\", 5000);");
code("}");
code("}");
code("if(trVectorQuestVarGetX(\"P\"+p+\"PosMG\") > xsVectorGetX(StageVector)+26){");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("PlayersMinigaming = PlayersMinigaming-1;");
code("MinigameWins = MinigameWins+1;");
code("if(trCurrentPlayer() == p){");
code("playSound(\"xwin.wav\");");
code("playSound(\"\cinematics\15_in\gong.wav\");");
code("trMessageSetText(\"You have won the minigame!\", 4000);");
code("}");
code("trQuestVarSetFromRand(\"temp\",1,2,true);");
code("if(1*trQuestVarGet(\"temp\") == 1){");
code("PlayerChoice(p, \"Choose your reward:\", \"+1 speed\", 8, \"+2 hp\", 10, 10000);");
code("}");
code("else{");
code("PlayerChoice(p, \"Choose your reward:\", \"+6 LOS\", 9, \"+1hp regen every 30s\", 11, 10000);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if(InMinigame == true){");
code("TimerTile = trTimeMS();");
code("if(TimerTile > GlobalTimerMS){");
code("GlobalTimerMS = trTimeMS()+250;");
code("trQuestVarModify(\"LavaTile\", \"+\", 1);");
code("trQuestVarModify(\"LavaTile2\", \"+\", 1);");
code("trQuestVarModify(\"LavaTile3\", \"+\", 1);");
code("if(1*trQuestVarGet(\"LavaTile\") >= xGetDatabaseCount(dTiles1)){");
code("trQuestVarSet(\"LavaTile\", 0);");
code("}");
code("if(1*trQuestVarGet(\"LavaTile2\") >= xGetDatabaseCount(dTiles2)){");
code("trQuestVarSet(\"LavaTile2\", 0);");
code("}");
code("if(1*trQuestVarGet(\"LavaTile3\") >= xGetDatabaseCount(dTiles2)){");
code("trQuestVarSet(\"LavaTile3\", 0);");
code("}");
code("for(a=0 ; < xGetDatabaseCount(dTiles1)){");
code("xDatabaseNext(dTiles1);");
code("trPaintTerrain(xGetInt(dTiles1, xTileX),xGetInt(dTiles1, xTileZ),xGetInt(dTiles1, xTileX),xGetInt(dTiles1, xTileZ),");
code("xGetInt(dTiles1, xTileType),xGetInt(dTiles1, xTileSubType));");
code("if(a == 1*trQuestVarGet(\"LavaTile\")){");
code("trPaintTerrain(xGetInt(dTiles1, xTileX),xGetInt(dTiles1, xTileZ),xGetInt(dTiles1, xTileX),xGetInt(dTiles1, xTileZ),2,");
code("10);");
code("}");
code("}");
code("for(b=0 ; < xGetDatabaseCount(dTiles2)){");
code("xDatabaseNext(dTiles2);");
code("trPaintTerrain(xGetInt(dTiles2, xTileX),xGetInt(dTiles2, xTileZ),xGetInt(dTiles2, xTileX),xGetInt(dTiles2, xTileZ),");
code("xGetInt(dTiles2, xTileType),xGetInt(dTiles2, xTileSubType));");
code("if(b == 1*trQuestVarGet(\"LavaTile2\")){");
code("trPaintTerrain(xGetInt(dTiles2, xTileX),xGetInt(dTiles2, xTileZ),xGetInt(dTiles2, xTileX),xGetInt(dTiles2, xTileZ),2,");
code("10);");
code("}");
code("if(b == 1*trQuestVarGet(\"LavaTile3\")){");
code("trPaintTerrain(xGetInt(dTiles2, xTileX),xGetInt(dTiles2, xTileZ),xGetInt(dTiles2, xTileX),xGetInt(dTiles2, xTileZ),2,");
code("10);");
code("}");
code("}");
code("}");
code("}");
code("if((PlayersActive == PlayersReadyToLeave+PlayersDead) && (PlayersDead != PlayersActive)){");
code("xsEnableRule(\"DeerExit\");");
code("}");
code("if(xGetDatabaseCount(dChests) > 0){");
code("xDatabaseNext(dChests);");
code("int n = xGetInt(dChests, xUnitID);");
code("xUnitSelect(dChests,xUnitID);");
code("if(trCountUnitsInArea(\"\"+n,0,\"Great Box\", 1) == 0){");
code("xFreeDatabaseBlock(dChests);");
code("debugLog(\"Chest removed\" + n);");
code("debugLog(\"\"+kbGetProtoUnitID(\"\"+n));");
code("ChestsTotal = ChestsTotal-1;");
code("}");
code("if (trUnitIsSelected()) {");
code("uiClearSelection();");
code("startNPCDialog(5);");
code("}");
code("trUnitSelectClear();");
code("for(pl=1 ; < cNumberNonGaiaPlayers){");
code("if(trCountUnitsInArea(\"\"+n,pl,\"All\", 5) > 0){");
code("xUnitSelect(dChests,xUnitID);");
code("trUnitSetAnimation(\"SE_Great_Box_Opening\",false,-1);");
code("xUnitSelect(dChests,xUnitID);");
code("trUnitHighlight(3, false);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Pyramid Osiris Xpack\"));");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trSetSelectedScale(100,0,0);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitOverrideAnimation(6, 0, false, true, -1);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0\");");
code("xAddDatabaseBlock(dDestroyMe, true);");
code("xSetInt(dDestroyMe, xDestroyName, xGetInt(dChests, xUnlockUnitID));");
code("xSetInt(dDestroyMe, xDestroyTime, trTimeMS()+3000);");
code("ChestsFound = ChestsFound+1;");
code("xFreeDatabaseBlock(dChests);");
code("if(iModulo(2, trTimeMS()) == 0){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+1 hp\", 5, \"+4 LOS\", 6, 10000);");
code("}");
code("else{");
code("PlayerChoice(pl, \"Choose your reward:\", \"+1 hp\", 5, \"+0.5 Speed\", 7, 10000);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("rule DeerMinigameDetect");
code("highFrequency");
code("inactive");
code("{");
code("vector pos = vector(0,0,0);");
code("vector minigame = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"MinigameStartID\"));");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("pos = trVectorQuestVarGet(\"P\"+p+\"Pos\");");
code("if(distanceBetweenVectors(minigame, pos, true) < 10){");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeProtoUnit(\"Olympus Temple SFX\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Forest Fire SFX\");");
code("PaintAtlantisArea(xsVectorGetX(StageVector)+1,xsVectorGetZ(StageVector)+3,xsVectorGetX(StageVector)+5,");
code("xsVectorGetZ(StageVector)+7,0,53);");
code("refreshPassability();");
code("trMessageSetText(\"Minigame found! Remain in the white square if you wish to play.\", 10000);");
code("trCounterAddTime(\"CDMG\", 12, 0, \"<color={PlayerColor(\"+p+\")}>Minigame Starts\", 27);");
code("MinigameFound = true;");
code("for(x=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, x);");
code("if(x != p){");
code("if(xGetBool(dPlayerData, xPlayerDead) == false){");
code("PlayerChoice(x, \"Participate in minigame?\", \"Yes\", 4, \"No\", 0, 11900);");
code("}");
code("}");
code("}");
code("for(b = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("for(c = xGetDatabaseCount(dMissiles); > 0){");
code("xDatabaseNext(dMissiles);");
code("xUnitSelect(dMissiles, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dMissiles);");
code("}");
code("trMusicStop();");
code("playSound(\"\cinematics\22_in\music 2.mp3\");");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("void DeerMinigameGo(int eventfireID = 0){");
code("xsEnableRule(\"MGGODeer\");");
code("}");
code("rule MGGODeer");
code("highFrequency");
code("inactive");
code("{");
code("InMinigame = true;");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("trPaintTerrain(xsVectorGetX(StageVector)+6,xsVectorGetZ(StageVector)+3,xsVectorGetX(StageVector)+25,");
code("xsVectorGetZ(StageVector)+7,0,73);");
code("trPaintTerrain(xsVectorGetX(StageVector),xsVectorGetZ(StageVector)+3,xsVectorGetX(StageVector),");
code("xsVectorGetZ(StageVector)+7,2,13);");
code("PaintAtlantisArea(xsVectorGetX(StageVector)+26,xsVectorGetZ(StageVector)+4,xsVectorGetX(StageVector)+28,");
code("xsVectorGetZ(StageVector)+6,0,71);");
code("refreshPassability();");
code("trPaintTerrain(xsVectorGetX(StageVector)+6,xsVectorGetZ(StageVector)+7,xsVectorGetX(StageVector)+9,");
code("xsVectorGetZ(StageVector)+7,2,10);");
code("trPaintTerrain(xsVectorGetX(StageVector)+6,xsVectorGetZ(StageVector)+3,xsVectorGetX(StageVector)+6,");
code("xsVectorGetZ(StageVector)+5,2,10);");
code("trPaintTerrain(xsVectorGetX(StageVector)+8,xsVectorGetZ(StageVector)+5,xsVectorGetX(StageVector)+9,");
code("xsVectorGetZ(StageVector)+7,2,10);");
code("trPaintTerrain(xsVectorGetX(StageVector)+6,xsVectorGetZ(StageVector)+3,xsVectorGetX(StageVector)+9,");
code("xsVectorGetZ(StageVector)+3,2,10);");
code("trPaintTerrain(xsVectorGetX(StageVector)+10,xsVectorGetZ(StageVector)+3,xsVectorGetX(StageVector)+12,");
code("xsVectorGetZ(StageVector)+7,2,10);");
code("trPaintTerrain(xsVectorGetX(StageVector)+25,xsVectorGetZ(StageVector)+3,xsVectorGetX(StageVector)+25,");
code("xsVectorGetZ(StageVector)+7,2,10);");
code("trDelayedRuleActivation(\"DeerMinigameEnd\");");
code("trMessageSetText(\"The floor is lava! Reach the end safely. If you jump outside the arena you are disqualified.\", 8000);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+17,xsVectorGetZ(StageVector)+3);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+17,xsVectorGetZ(StageVector)+4);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+17,xsVectorGetZ(StageVector)+5);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+17,xsVectorGetZ(StageVector)+6);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+17,xsVectorGetZ(StageVector)+7);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+18,xsVectorGetZ(StageVector)+7);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+19,xsVectorGetZ(StageVector)+7);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+19,xsVectorGetZ(StageVector)+6);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+19,xsVectorGetZ(StageVector)+5);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+19,xsVectorGetZ(StageVector)+4);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+19,xsVectorGetZ(StageVector)+3);");
code("AddTileMGDeer(xsVectorGetX(StageVector)+18,xsVectorGetZ(StageVector)+3);");
code("trQuestVarSet(\"LavaTile\", 1);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+21,xsVectorGetZ(StageVector)+3);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+21,xsVectorGetZ(StageVector)+4);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+21,xsVectorGetZ(StageVector)+5);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+21,xsVectorGetZ(StageVector)+6);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+21,xsVectorGetZ(StageVector)+7);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+22,xsVectorGetZ(StageVector)+7);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+23,xsVectorGetZ(StageVector)+7);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+24,xsVectorGetZ(StageVector)+7);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+24,xsVectorGetZ(StageVector)+6);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+24,xsVectorGetZ(StageVector)+5);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+24,xsVectorGetZ(StageVector)+4);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+24,xsVectorGetZ(StageVector)+3);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+23,xsVectorGetZ(StageVector)+3);");
code("AddTileMGDeer2(xsVectorGetX(StageVector)+22,xsVectorGetZ(StageVector)+3);");
code("trQuestVarSet(\"LavaTile2\", 1);");
code("trQuestVarSet(\"LavaTile3\", 8);");
code("for(z=1 ; < 8){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 2*xsVectorGetX(StageVector)+(8*z),2*xsVectorGetZ(StageVector)+12,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Revealer\");");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 2*xsVectorGetX(StageVector)+(8*z),2*xsVectorGetZ(StageVector)+8,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Revealer\");");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("}");
code("CreateMinigameFlag(2*xsVectorGetX(StageVector)+55,2*xsVectorGetZ(StageVector)+11);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(xGetBool(dPlayerData, xPlayerActive)){");
code("trVectorQuestVarSet(\"P\"+p+\"PosMG\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("trVectorQuestVarSet(\"P\"+p+\"PosMG\", trVectorQuestVarGet(\"P\"+p+\"PosMG\")/2);");
code("if((trVectorQuestVarGetX(\"P\"+p+\"PosMG\") > xsVectorGetX(StageVector)-2) &&");
code("(trVectorQuestVarGetX(\"P\"+p+\"PosMG\") < xsVectorGetX(StageVector)+6) &&");
code("(trVectorQuestVarGetZ(\"P\"+p+\"PosMG\") > xsVectorGetZ(StageVector)-4) &&");
code("(trVectorQuestVarGetZ(\"P\"+p+\"PosMG\") < xsVectorGetZ(StageVector)+8)){");
code("xSetBool(dPlayerData, xStopDeath, true);");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is playing\");");
code("PlayersMinigaming = PlayersMinigaming+1;");
code("}");
code("}");
code("}");
code("if(PlayersMinigaming == 0){");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitDestroy();");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitDestroy();");
code("trMessageSetText(\"Nobody was on the white tiles. Minigame cancelled.\", 5000);");
code("xsEnableRule(\"PlayMusic\");");
code("InMinigame = false;");
code("}");
code("if(PlayersMinigaming > 0){");
code("playSoundCustom(\"\cinematics\31_out\music.mp3\", \"\Yeebaagooon\Zoo Quest\Minigame1.mp3\");");
code("}");
code("xsDisableSelf();");
code("}");
code("rule DeerMinigameEnd");
code("inactive");
code("highFrequency");
code("{");
code("if(PlayersMinigaming == 0){");
code("vector temp = vector(0,0,0);");
code("trPaintTerrain(xsVectorGetX(StageVector)-1,xsVectorGetZ(StageVector)-1,xsVectorGetX(StageVector)+31,");
code("xsVectorGetZ(StageVector)+11,0,0);");
code("refreshPassability();");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((xGetInt(dPlayerData, xTeleportDue) == 1) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("debugLog(\"Path 1 - P\" + p);");
code("temp = xGetVector(dPlayerData, xVectorHold);");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreateV(p, \"Roc\", temp, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("xSetInt(dPlayerData, xTeleportDue, 0);");
code("}");
code("else if((xGetInt(dPlayerData, xTeleportDue) == 0) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("debugLog(\"Path 2 - P\" + p);");
code("if(trPlayerUnitCountSpecific(p, \"\"+GazelleProto) == 0){");
code("temp = xGetVector(dPlayerData, xVectorHold);");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreateV(p, \"Roc\", temp, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("CreateGazelle(p, xsVectorGetX(temp), xsVectorGetZ(temp), 0);");
code("}");
code("}");
code("if((trPlayerUnitCountSpecific(p, GazelleProto) == 0) && (xGetBool(dPlayerData, xPlayerDead) == false) &&");
code("(trPlayerUnitCountSpecific(p, \"Hero Greek Bellerophon\") == 0)){");
code("debugLog(\"Path 3 - P\" + p);");
code("CreateGazelle(p, trVectorQuestVarGetX(\"P\"+p+\"PosMG\"),trVectorQuestVarGetZ(\"P\"+p+\"PosMG\"));");
code("}");
code("}");
code("uiZoomToProto(\"\"+GazelleProto);");
code("uiLookAtProto(\"\"+GazelleProto);");
code("unitTransform(\"Tartarian Gate Flame\", \"Flowers\");");
code("for(c = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("for(b = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Throwing Axeman\");");
code("}");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeProtoUnit(\"Olympus Temple SFX\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Forest Fire SFX\");");
code("xsDisableSelf();");
code("InMinigame = false;");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("xsEnableRule(\"PlayMusic\");");
code("}");
code("}");
code("rule DeerLeave");
code("inactive");
code("highFrequency");
code("{");
code("int STOP = 0;");
code("trQuestVarModify(\"PlayerCycle\", \"+\", 1);");
code("if(1*trQuestVarGet(\"PlayerCycle\") > cNumberNonGaiaPlayers){");
code("trQuestVarSet(\"PlayerCycle\", 1);");
code("}");
code("int p = 1*trQuestVarGet(\"PlayerCycle\");");
code("xSetPointer(dPlayerData, p);");
code("tempV = xGetVector(dPlayerData, xConstantPos);");
code("if(xGetBool(dPlayerData, xReadyToLeave) == true){");
code("if((trGetTerrainType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) != getTerrainType(LeaveTerrain)) ||");
code("(trGetTerrainSubType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) != getTerrainSubType(LeaveTerrain))){");
code("xSetBool(dPlayerData, xReadyToLeave, false);");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("PlayersReadyToLeave = PlayersReadyToLeave-1;");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Jason\"));");
code("PlayerColouredChatToSelf(p, \"You have left the extraction zone\");");
code("STOP = 1;");
code("}");
code("}");
code("if((xGetBool(dPlayerData, xReadyToLeave) == false) && (STOP == 0)  && (xGetBool(dPlayerData, xPlayerDead) == false)){");
code("if((trGetTerrainType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) == getTerrainType(LeaveTerrain)) &&");
code("(trGetTerrainSubType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) == getTerrainSubType(LeaveTerrain))){");
code("xSetBool(dPlayerData, xReadyToLeave, true);");
code("xSetBool(dPlayerData, xStopDeath, true);");
code("PlayersReadyToLeave = PlayersReadyToLeave+1;");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"Prisoner\"));");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is ready to leave\");");
code("if(trQuestVarGet(\"P\"+p+\"LeaveMsg\") == 0){");
code("trQuestVarSet(\"P\"+p+\"LeaveMsg\", 1);");
code("ColouredChatToPlayer(p, \"1,1,0\", \"You cannot jump in the extraction zone.\");");
code("ColouredChatToPlayer(p, \"1,1,0\", \"You also cannot die or be attacked.\");");
code("}");
code("}");
code("}");
code("}");
code("rule DeerPoacherMovement");
code("inactive");
code("highFrequency");
code("{");
code("if(xGetDatabaseCount(dPoachers) > 0){");
code("xDatabaseNext(dPoachers);");
code("if(xGetInt(dPoachers, xMoveTime) < trTime()){");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"y\",30,80);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("xSetInt(dPoachers, xMoveTime, trTime()+1*trQuestVarGet(\"y\"));");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitMoveToPoint(1*trQuestVarGet(\"x\"),5,1*trQuestVarGet(\"z\"),-1,true);");
code("}");
code("}");
code("}");
code("rule DeerEndZoneSee");
code("inactive");
code("highFrequency");
code("{");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if(trUnitDistanceToUnit(\"\"+FlagUnitID) < 23){");
code("vector flagV = kbGetBlockPosition(\"\"+FlagUnitID);");
code("for(x=1 ; < cNumberNonGaiaPlayers){");
code("trMinimapFlare(x,10,flagV,true);");
code("}");
code("UnitCreate(0, \"Revealer\", xsVectorGetX(flagV),xsVectorGetZ(flagV),0);");
code("trMessageSetText(\"The extraction zone has been found. Gather here when you are ready to end the act.\", 8000);");
code("playSound(\"examinationbirth.wav\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+FlagUnitID);");
code("trUnitHighlight(10, true);");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("rule DeerExit");
code("inactive");
code("highFrequency");
code("{");
code("trCounterAbort(\"poachtimer\");");
code("xsDisableRule(\"DeerActLoops\");");
code("xsDisableRule(\"DeerMinigameDetect\");");
code("xsDisableRule(\"DeerMinigameEnd\");");
code("xsDisableRule(\"DeerLeave\");");
code("xsDisableRule(\"DeerAllDead\");");
code("xsDisableRule(\"DeerPoacherMovement\");");
code("xsDisableRule(\"PoacherSpawnLoop\");");
code("xsDisableRule(\"PoacherTimer\");");
code("xsDisableRule(\"DeerEndZoneSee\");");
code("xsDisableRule(\"ChestTimer\");");
code("xsDisableRule(\"PlayMusic\");");
code("xsDisableRule(\"PlayMusicDelay\");");
code("xsDisableRule(\"MGGODeer\");");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("}");
code("trClearCounterDisplay();");
code("xsEnableRule(\"ScoreScreenStart\");");
code("xsDisableSelf();");
code("}");
}
void scorescreen() {
code("void CreateDot(int x = 0, int z = 0, bool bonus = false){");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", x, z, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Rock Granite Small\");");
code("trUnitSetVariation(temp, 1);");
code("xAddDatabaseBlock(dDots, true);");
code("xSetInt(dDots, xUnitID, temp);");
code("xSetInt(dDots, xPercent, z-20);");
code("if(bonus == true){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", x, z, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trQuestVarModify(\"Bonus\", \"+\", 1);");
code("trQuestVarSet(\"Bonus\"+1*trQuestVarGet(\"Bonus\")+\"\", temp);");
code("trUnitSelect(\"\"+temp);");
code("if(1*trQuestVarGet(\"Bonus\") == 2){");
code("trMutateSelected(kbGetProtoUnitID(\"Acid Pool\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitSetAnimationPath(\"0,1,1,0,0,0,0\");");
code("}");
code("if(1*trQuestVarGet(\"Bonus\") == 3){");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Birth\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("}");
code("if(1*trQuestVarGet(\"Bonus\") == 1){");
code("trMutateSelected(kbGetProtoUnitID(\"Poison SFX\"));");
code("}");
code("}");
code("}");
code("void SetPercentRequired(int pe = 0){");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 62, 20+pe, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetSelectedScale(0,0,0);");
code("trQuestVarSet(\"PercentMark\", temp);");
code("}");
code("rule ScoreScreenStart");
code("highFrequency");
code("inactive");
code("{");
code("xsDisableSelf();");
code("UnitCreate(1, \"Osiris\", 0,0,0);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,1000,1,true);");
code("trFadeOutAllSounds(3);");
code("trSetLighting(\"default\", 0);");
code("trFadeOutMusic(3);");
code("xsEnableRule(\"DestroyStuff\");");
code("characterDialog(ActName(Stage) + \" - \" + StageRequirement + \" percent required to advance\", \"\", ActIcon(Stage));");
code("playSoundCustom(\"\cinematics\9_in\music.mp3\", \"\cinematics\9_in\music.mp3\");");
code("StageScore = 0;");
code("float Extras = 0;");
code("float ExtrasGot = 0;");
code("float calc = 0;");
code("int temp = 0;");
code("if(Stage == 1){");
code("if(1*trQuestVarGet(\"BerriesEaten\") >= BerryTarget){");
code("StageScore = StageRequirement;");
code("}");
code("else{");
code("StageScore = StageRequirement*(trQuestVarGet(\"BerriesEaten\")/BerryTarget);");
code("}");
code("StageScore = StageScore - (PlayersDead*3);");
code("Extras = Extras + (BerryTotal - BerryTarget);");
code("ExtrasGot = ExtrasGot + (trQuestVarGet(\"BerriesEaten\") - BerryTarget);");
code("Extras = Extras + ChestsTotal*2;");
code("ExtrasGot = ExtrasGot + ChestsFound*2;");
code("Extras = Extras + PlayersActive;");
code("for(a = 1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, a);");
code("if(playerIsPlaying(a) == true){");
code("ExtrasGot = ExtrasGot + xGetInt(dPlayerData, xLogJumps);");
code("}");
code("}");
code("Extras = Extras + 5;");
code("if(MinigameFound == true){");
code("ExtrasGot = ExtrasGot + 5;");
code("}");
code("if(MinigameWins > PlayersActive){");
code("MinigameWins = PlayersActive;");
code("}");
code("Extras = Extras + PlayersActive*2;");
code("ExtrasGot = ExtrasGot + MinigameWins*2;");
code("if(ExtrasGot > 0){");
code("calc = ExtrasGot/Extras;");
code("StageScore = StageScore + (calc*(100-StageRequirement));");
code("}");
code("if((ExtrasGot >= Extras) && (Extras > 0)){");
code("StageScore = 100;");
code("}");
code("if(ExtrasGot > Extras){");
code("trChatSend(0, \"ERROR MORE THAN 100 PERCENT COMPLETE\");");
code("}");
code("}");
code("if(Stage == 2){");
code("if(PoachersDead >= PoachersTarget){");
code("StageScore = StageRequirement;");
code("}");
code("else{");
code("trQuestVarSet(\"temp\", PoachersDead);");
code("StageScore = StageRequirement*(trQuestVarGet(\"temp\")/PoachersTarget);");
code("}");
code("StageScore = StageScore - (PlayersDead*4);");
code("Extras = Extras + ChestsTotal*2;");
code("ExtrasGot = ExtrasGot + ChestsFound*2;");
code("Extras = Extras + 5;");
code("for(a=1 ; <= 5){");
code("if(PoachersDead >= PoachersTarget+a){");
code("ExtrasGot = ExtrasGot+1;");
code("}");
code("}");
code("Extras = Extras + 2;");
code("if(MinigameFound == true){");
code("ExtrasGot = ExtrasGot + 2;");
code("}");
code("Extras = Extras + 5;");
code("if(MinigameWins > 0){");
code("ExtrasGot = ExtrasGot + 5;");
code("}");
code("Extras = Extras +4;");
code("if(1*trQuestVarGet(\"RhinoSurvival\") > 4){");
code("ExtrasGot = ExtrasGot+4;");
code("}");
code("else{");
code("ExtrasGot = ExtrasGot + 1*trQuestVarGet(\"RhinoSurvival\");");
code("}");
code("Extras = Extras+2;");
code("ExtrasGot = ExtrasGot + 1*trQuestVarGet(\"RhinoBonuses\");");
code("if(ExtrasGot > 0){");
code("calc = ExtrasGot/Extras;");
code("StageScore = StageScore + (calc*(100-StageRequirement));");
code("debugLog(\"ExtrasGot = \" + ExtrasGot);");
code("debugLog(\"Extras = \" + Extras);");
code("debugLog(\"Added to score = \" + (calc*(100-StageRequirement)));");
code("}");
code("if((ExtrasGot >= Extras) && (Extras > 0)){");
code("StageScore = 100;");
code("}");
code("if(ExtrasGot > Extras){");
code("trChatSend(0, \"ERROR MORE THAN 100 PERCENT COMPLETE\");");
code("}");
code("}");
code("if(Stage == 3){");
code("debugLog(\"Shrines max = \" + ShrinesMax);");
code("if(ShrinesGot >= ShrineTarget){");
code("StageScore = StageRequirement;");
code("debugLog(\"Pass, score set to \" + StageScore);");
code("ExtrasGot = ExtrasGot + (ShrinesGot - ShrineTarget)*3;");
code("}");
code("else{");
code("trQuestVarSet(\"temp\", ShrinesGot);");
code("StageScore = StageRequirement*(trQuestVarGet(\"temp\")/ShrinesMax);");
code("debugLog(\"Fail, score set to \" + StageScore);");
code("}");
code("debugLog(\"Shrine Got = \" + ShrinesGot);");
code("debugLog(\"Shrine Target = \" + ShrineTarget);");
code("Extras = Extras + (ShrinesMax - ShrineTarget)*3;");
code("StageScore = StageScore - (PlayersDead*6);");
code("Extras = Extras + ChestsTotal*2;");
code("ExtrasGot = ExtrasGot + ChestsFound*2;");
code("debugLog(\"Chests = \" + ChestsFound + \" out of \" + ChestsTotal);");
code("Extras = Extras + 2;");
code("if(MinigameFound == true){");
code("ExtrasGot = ExtrasGot + 2;");
code("}");
code("Extras = Extras + (PlayersActive*5);");
code("if(MinigameWins > 0){");
code("ExtrasGot = ExtrasGot + MinigameWins*5;");
code("}");
code("if(ExtrasGot > 0){");
code("calc = ExtrasGot/Extras;");
code("StageScore = StageScore + (calc*(100-StageRequirement));");
code("debugLog(\"ExtrasGot = \" + ExtrasGot);");
code("debugLog(\"Extras = \" + Extras);");
code("debugLog(\"Added to score = \" + (calc*(100-StageRequirement)));");
code("}");
code("if((ExtrasGot >= Extras) && (Extras > 0)){");
code("StageScore = 100;");
code("}");
code("if(ExtrasGot > Extras){");
code("trChatSend(0, \"ERROR MORE THAN 100 PERCENT COMPLETE\");");
code("}");
code("}");
code("if(Stage == 4){");
code("if(CrocProgress >= CrocTarget){");
code("StageScore = StageRequirement;");
code("debugLog(\"Pass, score set to \" + StageScore);");
code("}");
code("else{");
code("trQuestVarSet(\"temp\", CrocProgress);");
code("StageScore = StageRequirement*(trQuestVarGet(\"temp\")/CrocTarget);");
code("StageScore = StageScore-6;");
code("debugLog(\"Fail, score set to \" + StageScore);");
code("}");
code("StageScore = StageScore - (PlayersDead*6);");
code("Extras = Extras + ChestsTotal*2;");
code("ExtrasGot = ExtrasGot + ChestsFound*2;");
code("Extras = Extras+3;");
code("if(MinigameFound == true){");
code("ExtrasGot = ExtrasGot + 3;");
code("}");
code("Extras = Extras + (PlayersActive*3);");
code("if(MinigameWins > 0){");
code("ExtrasGot = ExtrasGot + (MinigameWins*3);");
code("}");
code("if(ExtrasGot > 0){");
code("calc = ExtrasGot/Extras;");
code("StageScore = StageScore + (calc*(100-StageRequirement));");
code("debugLog(\"ExtrasGot = \" + ExtrasGot);");
code("debugLog(\"Extras = \" + Extras);");
code("debugLog(\"Added to score = \" + (calc*(100-StageRequirement)));");
code("}");
code("Extras = Extras+10;");
code("if(PoachersDead*2 > PoachersTarget){");
code("ExtrasGot = ExtrasGot+10;");
code("}");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(xGetInt(dPlayerData, xCrocSize) > 6){");
code("Extras = Extras+2;");
code("ExtrasGot = ExtrasGot+2;");
code("}");
code("}");
code("if(StageScore < 0){");
code("StageScore = 2;");
code("}");
code("if(StageScore > 100){");
code("StageScore = 100;");
code("}");
code("if(ExtrasGot > Extras){");
code("trChatSend(0, \"ERROR MORE THAN 100 PERCENT COMPLETE\");");
code("}");
code("debugLog(\"Poachers total = \" + PoachersTarget);");
code("debugLog(\"Poachers killed = \" + PoachersDead);");
code("}");
code("if(AlwaysWin == true){");
code("if(StageScore < StageRequirement){");
code("trOverlayText(\"You only got \" + StageScore, 5.0,50,50,600);");
code("StageScore = StageRequirement;");
code("}");
code("}");
code("}");
code("rule DestroyStuff");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("xsDisableSelf();");
code("for(x=DontDestroyBelow ; < trGetNextUnitScenarioNameNumber()){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trUnitDestroy();");
code("}");
code("clearMap(\"black\", 5.0);");
code("refreshPassability();");
code("xsEnableRule(\"CutToScore\");");
code("NewDestroyNumber = trGetNextUnitScenarioNameNumber()-1;");
code("}");
code("}");
code("rule CutToScore");
code("highFrequency");
code("inactive");
code("{");
code("xsDisableSelf();");
code("trSetFogAndBlackmap(false, false);");
code("trUIFadeToColor(0,0,0,1000,1,false);");
code("PaintAtlantisArea(30,10,32,61,5,4);");
code("trCameraCut(vector(171.726913,123.743729,70.647377), vector(-0.707094,-0.707106,0.004380), vector(-0.707094,0.707106,");
code("0.004380), vector(0.006194,0.000000,0.999981));");
code("trQuestVarSet(\"Bonus\", 0);");
code("trQuestVarSet(\"Bonus1\", 0);");
code("trQuestVarSet(\"Bonus2\", 0);");
code("trQuestVarSet(\"Bonus3\", 0);");
code("if(Stage == 1){");
code("trQuestVarSet(\"ScoreBonus1\", 60);");
code("trQuestVarSet(\"ScoreBonus2\", 80);");
code("trQuestVarSet(\"ScoreBonus3\", 100);");
code("}");
code("if(Stage == 2){");
code("trQuestVarSet(\"ScoreBonus1\", 60);");
code("trQuestVarSet(\"ScoreBonus2\", 80);");
code("trQuestVarSet(\"ScoreBonus3\", 100);");
code("}");
code("if(Stage == 3){");
code("trQuestVarSet(\"ScoreBonus1\", 70);");
code("trQuestVarSet(\"ScoreBonus2\", 86);");
code("trQuestVarSet(\"ScoreBonus3\", 100);");
code("}");
code("if(Stage == 4){");
code("trQuestVarSet(\"ScoreBonus1\", 80);");
code("trQuestVarSet(\"ScoreBonus2\", 90);");
code("trQuestVarSet(\"ScoreBonus3\", 100);");
code("}");
code("for(z=1 ; < 51){");
code("if((z == 1*trQuestVarGet(\"ScoreBonus1\")/2) || (z == 1*trQuestVarGet(\"ScoreBonus2\")/2) ||");
code("(z == 1*trQuestVarGet(\"ScoreBonus3\")/2)){");
code("CreateDot(63,20+z*2, true);");
code("}");
code("else{");
code("CreateDot(63,20+z*2, false);");
code("}");
code("}");
code("SetPercentRequired(StageRequirement);");
code("trQuestVarSet(\"ScoreCheck\", 0);");
code("xsEnableRule(\"DoScore\");");
code("}");
code("rule DoScore");
code("highFrequency");
code("inactive");
code("{");
code("int TimerTile = trTimeMS();");
code("if(TimerTile > GlobalTimerMS){");
code("GlobalTimerMS = trTimeMS()+70;");
code("trQuestVarModify(\"ScoreCheck\", \"+\", 1);");
code("if (iModulo(2, 1*trQuestVarGet(\"ScoreCheck\")) == 0) {");
code("xDatabaseNext(dDots);");
code("if(xGetInt(dDots, xPercent) <= StageScore){");
code("trUnitSelectClear();");
code("xUnitSelect(dDots, xUnitID);");
code("trUnitHighlight(10000, false);");
code("}");
code("if((1*trQuestVarGet(\"ScoreCheck\") == StageRequirement) && (StageScore >= StageRequirement)){");
code("trUnitSelectByQV(\"PercentMark\");");
code("trUnitChangeProtoUnit(\"Implode Sphere Effect\");");
code("trUnitSelectByQV(\"PercentMark\");");
code("trDamageUnitPercent(100);");
code("playSoundCustom(\"fanfare.wav\", \"\Yeebaagooon\Zoo Quest\Skillpoint.mp3\");");
code("}");
code("if(1*trQuestVarGet(\"ScoreCheck\") >= StageScore){");
code("xsDisableSelf();");
code("trDelayedRuleActivation(\"DoScoreEnd\");");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 62, 20+StageScore, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Tremor\");");
code("temp = trGetNextUnitScenarioNameNumber();");
code("if(StageScore >= StageRequirement){");
code("UnitCreate(GreenText(), \"Dwarf\", 62, 20+StageScore, 0);");
code("}");
code("if(StageScore < StageRequirement){");
code("UnitCreate(RedText(), \"Dwarf\", 62, 20+StageScore, 0);");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Flag\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0\");");
code("}");
code("}");
code("characterDialog(ActName(Stage) + \" - \" + StageRequirement + \" percent required to advance\",");
code("\"\"+1*trQuestVarGet(\"ScoreCheck\") + \" percent complete\", ActIcon(Stage));");
code("}");
code("}");
code("rule DoScoreEnd");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("if(StageScore >= StageRequirement){");
code("characterDialog(ActName(Stage) + \" - Act Passed\", \"\"+StageScore + \" percent complete\", ActIcon(Stage));");
code("xsEnableRule(\"PassAct\");");
code("}");
code("else{");
code("characterDialog(ActName(Stage) + \" - Act Failed\", \"\"+StageScore + \"/\" + StageRequirement + \" percent complete\",");
code("ActIcon(Stage));");
code("xsEnableRule(\"LoseToScore\");");
code("}");
code("}");
code("rule LoseToScore");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 3) {");
code("xsDisableSelf();");
code("xsEnableRule(\"EndGame\");");
code("trLetterBox(false);");
code("}");
code("}");
code("rule EndGame");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("trShowWinLose(\"You failed to progress\", \"xlose.wav\");");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trSetPlayerDefeated(p);");
code("}");
code("xsDisableSelf();");
code("trEndGame();");
code("}");
code("}");
code("rule TempEndGame");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("if(QuickStart == 0){");
code("trShowWinLose(\"Thats all so far...\", \"xwin.wav\");");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trSetPlayerWon(p);");
code("}");
code("xsDisableSelf();");
code("trEndGame();");
code("}");
code("else{");
code("clearMap(\"black\", 5);");
code("for(x=NewDestroyNumber ; < trGetNextUnitScenarioNameNumber()){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trUnitDestroy();");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("rule PassAct");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 3) {");
code("xsDisableSelf();");
code("xsEnableRule(\"CheckBonuses\");");
code("}");
code("}");
code("rule StopBonusCheck");
code("highFrequency");
code("inactive");
code("{");
code("xsEnableRule(\"ResetInts\");");
code("characterDialog(\" \", \" \", \"\");");
code("Stage = Stage+1;");
code("xsDisableSelf();");
code("if(Stage == 2){");
code("xsEnableRule(\"TutorialTerrainRhino\");");
code("}");
code("if(Stage == 3){");
code("xsEnableRule(\"TutorialTerrainGoat\");");
code("}");
code("if(Stage == 4){");
code("xsEnableRule(\"TutorialTerrainCrocodile\");");
code("}");
code("if(Stage == 5){");
code("xsEnableRule(\"TutorialTerrainChicken\");");
code("}");
code("trLetterBox(false);");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("}");
code("rule CheckBonuses");
code("highFrequency");
code("inactive");
code("{");
code("if(StageScore >= 1*trQuestVarGet(\"ScoreBonus1\")){");
code("trUnitSelectByQV(\"Bonus1\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 62, 20+1*trQuestVarGet(\"ScoreBonus1\"), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Kronny Birth\");");
code("xsEnableRule(\"CheckBonuses2\");");
code("playSound(\"plentybirth.wav\");");
code("if(Stage == 1){");
code("characterDialog(\"Bonus unlocked!\", \"+4 hitpoints next stage\", ActIcon(Stage));");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("trModifyProtounit(\"\"+RhinoProto, p, 0, 4);");
code("trModifyProtounit(\"\"+RhinoDrinkProto, p, 0, 4);");
code("}");
code("}");
code("if(Stage == 2){");
code("characterDialog(\"Bonus unlocked!\", \"+4 hitpoints next stage\", ActIcon(Stage));");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("trModifyProtounit(\"\"+GoatProto, p, 0, 4);");
code("}");
code("}");
code("if(Stage == 3){");
code("characterDialog(\"Bonus unlocked!\", \"+4 LOS next stage\", ActIcon(Stage));");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("trModifyProtounit(\"\"+CrocProto, p, 2, 4);");
code("}");
code("}");
code("if(Stage == 4){");
code("characterDialog(\"Bonus unlocked!\", \"+4 tower count next stage\", ActIcon(Stage));");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xTowerLimit, xGetInt(dPlayerData, xTowerLimit)+4);");
code("}");
code("}");
code("}");
code("else{");
code("xsEnableRule(\"StopBonusCheck\");");
code("}");
code("xsDisableSelf();");
code("}");
code("rule CheckBonuses2");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 3) {");
code("if(StageScore >= 1*trQuestVarGet(\"ScoreBonus2\")){");
code("trUnitSelectByQV(\"Bonus2\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 62, 20+1*trQuestVarGet(\"ScoreBonus2\"), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Kronny Birth\");");
code("xsEnableRule(\"CheckBonuses3\");");
code("playSound(\"plentybirth.wav\");");
code("if(Stage == 1){");
code("characterDialog(\"Bonus unlocked!\", \"+1 base speed next stage\", ActIcon(Stage));");
code("}");
code("if(Stage == 2){");
code("characterDialog(\"Bonus unlocked!\", \"+1hp regen every 30s next stage\", ActIcon(Stage));");
code("}");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xHPRegenTime, 30);");
code("xSetInt(dPlayerData, xHPRegen, xGetInt(dPlayerData, xHPRegen)+1);");
code("}");
code("if(Stage == 3){");
code("characterDialog(\"Bonus unlocked!\", \"+0.5 sprint speed multiplier next stage\", ActIcon(Stage));");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("xSetFloat(dPlayerData, xCrocSprintSpeed, xGetFloat(dPlayerData, xCrocSprintSpeed)+0.5);");
code("}");
code("}");
code("if(Stage == 4){");
code("characterDialog(\"Bonus unlocked!\", \"+1 starting relic slot next stage\", ActIcon(Stage));");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("trModifyProtounit(ChickenProto, p, 5, 1);");
code("}");
code("}");
code("}");
code("else{");
code("xsEnableRule(\"StopBonusCheck\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule CheckBonuses3");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 3) {");
code("if(StageScore >= 100){");
code("trUnitSelectByQV(\"Bonus3\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 62, 20+1*trQuestVarGet(\"ScoreBonus3\"), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Kronny Birth\");");
code("xsEnableRule(\"BonusDelay\");");
code("if(Stage == 1){");
code("characterDialog(\"Bonus unlocked!\", \"deer max bonus\", ActIcon(Stage));");
code("}");
code("if(Stage == 2){");
code("characterDialog(\"Bonus unlocked!\", \"rhino max bonus\", ActIcon(Stage));");
code("}");
code("if(Stage == 3){");
code("characterDialog(\"Bonus unlocked!\", \"goat max bonus\", ActIcon(Stage));");
code("}");
code("if(Stage == 4){");
code("characterDialog(\"Bonus unlocked!\", \"croc max bonus\", ActIcon(Stage));");
code("}");
code("playSound(\"plentybirth.wav\");");
code("}");
code("else{");
code("xsEnableRule(\"StopBonusCheck\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("rule BonusDelay");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("xsEnableRule(\"StopBonusCheck\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ResetInts");
code("highFrequency");
code("inactive");
code("{");
code("StageRequirement = 0;");
code("StageScore = 0;");
code("PlayersDead = 0;");
code("ChestsFound = 0;");
code("BerryTotal = 0;");
code("ChestsTotal = 0;");
code("BerryTarget = 0;");
code("PlayersMinigaming = 0;");
code("PlayersReadyToLeave = 0;");
code("MinigameWins = 0;");
code("InMinigame = false;");
code("MinigameFound = false;");
code("ActPart = 0;");
code("PoachersDead = 0;");
code("PoachersTarget = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(playerIsPlaying(p)){");
code("xSetBool(dPlayerData, xPlayerDead, false);");
code("xSetBool(dPlayerData, xReadyToLeave, false);");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("xSetVector(dPlayerData, xVectorHold, vector(0,0,0));");
code("xSetInt(dPlayerData, xTeleportDue, 0);");
code("xSetInt(dPlayerData, xRelics, 0);");
code("}");
code("}");
code("xResetDatabase(dTemp);");
code("xResetDatabase(dLogs);");
code("xResetDatabase(dDots);");
code("xResetDatabase(dChests);");
code("xResetDatabase(dMissiles);");
code("xResetDatabase(dPoachers);");
code("xResetDatabase(dInterractables);");
code("for(x=NewDestroyNumber ; < trGetNextUnitScenarioNameNumber()){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trUnitDestroy();");
code("}");
code("xsDisableSelf();");
code("}");
}
void tutorialrhino() {
code("rule TutorialTerrainRhino");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("trCameraCut(vector(-65.460060,123.743729,-65.460060), vector(0.500000,-0.707107,0.500000), vector(0.500000,0.707107,");
code("0.500000), vector(0.707107,0.000000,-0.707107));");
code("xsDisableRule(\"DeerTutorialDone\");");
code("TutorialMode = true;");
code("Stage = 2;");
code("CliffType = 2;");
code("CliffSubType = 2;");
code("clearMap(\"black\", 5.0);");
code("trPaintTerrain(0,0,45,cNumberNonGaiaPlayers*8,CliffType,CliffSubType);");
code("xResetDatabase(dChests);");
code("int temp = 0;");
code("for(t=0 ; < cNumberNonGaiaPlayers){");
code("for(x=0 ; < 46){");
code("if(iModulo(7,x) == 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", x*2, t*16+8, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Rock Sandstone Big\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(1.65);");
code("}");
code("else{");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", x*2, t*16+8, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Savannah Tree\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(0.75);");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"PlayersDoneTutorial\", 0);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trQuestVarSet(\"P\"+p+\"DoneTutorial\", 0);");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 0);");
code("trPaintTerrain(5,((p*8)-2),40,((p*8+4)-2),0,15);");
code("PaintAtlantisArea(6,p*8-1,8,p*8+1,0,18);");
code("trPaintTerrain(28,p*8+2,28,p*8-2,0,74);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", 28*2, p*16-4, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Fence Wood\");");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", 28*2, p*16, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Fence Wood\");");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", 28*2, p*16+4, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Fence Wood\");");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 34*2, p*16, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Fountain\");");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("CreateRhino(p,14,16*p,90);");
code("xSetPointer(dPlayerData, xPlayerUnitID);");
code("xSetInt(dPlayerData, xPlayerUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 1, xGetFloat(dPlayerData, xRhinoWalk));");
code("if(trCurrentPlayer() == p){");
code("trCounterAddTime(\"cdtutorial\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Press 'Q' to start/stop charge.\", -1);");
code("}");
code("}");
code("refreshPassability();");
code("xsEnableRule(\"Animations\");");
code("xsEnableRule(\"Charge\");");
code("xsDisableRule(\"Jump\");");
code("xsDisableRule(\"VectorFirst\");");
code("xsDisableRule(\"VectorSecond\");");
code("xsEnableRule(\"RhinoTutorialDone\");");
code("trDelayedRuleActivation(\"RhinoTutorialLoops\");");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 1, xGetFloat(dPlayerData, xRhinoWalk));");
code("if(QuickStart == 0){");
code("startNPCDialog(6);");
code("}");
code("refreshPassability();");
code("uiZoomToProto(\"\"+RhinoProto);");
code("uiLookAtProto(\"\"+RhinoProto);");
code("playSound(\"\xpack\xcinematics\5_in\music.mp3\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule Charge");
code("highFrequency");
code("inactive");
code("{");
code("int anim = 0;");
code("int temp = 0;");
code("float height = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(trPlayerResourceCount(p, \"Gold\") > 0){");
code("trPlayerGrantResources(p, \"Gold\", -100000);");
code("if((xGetBool(dPlayerData, xReadyToLeave) == false) && (trPlayerUnitCountSpecific(p, \"\"+RhinoProto) == 1)){");
code("if(xGetFloat(dPlayerData, xRhinoChargeTime) > 0){");
code("ToggleCharge(p);");
code("}");
code("else{");
code("ColouredIconChatToPlayer(p, \"1,0,0\", \"icons\icon object stat hit point\", \"Not enough stamina to charge!\");");
code("if(trCurrentPlayer() == p){");
code("playSound(\"cantdothat.wav\");");
code("}");
code("}");
code("}");
code("}");
code("if(trPlayerResourceCount(p, \"Wood\") > 0){");
code("trPlayerGrantResources(p, \"Wood\", -100000);");
code("if(TutorialMode == false){");
code("height = xsVectorGetY(kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if(height > 0.31){");
code("ColouredIconChatToPlayer(p, \"1,0.2,0.2\", \"icons\editor edit water\",");
code("\"Height needs to be less than 0!<color=0,1,1> \" + height);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"cantdothat.wav\");");
code("}");
code("}");
code("else{");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+RhinoDrinkProto));");
code("trQuestVarSet(\"P\"+p+\"Drink\", trTimeMS()+1000*xGetFloat(dPlayerData, xRhinoDrinkTime));");
code("if(trCurrentPlayer() == p){");
code("trCounterAddTime(\"rhinodrinker\" +p, 1*xGetFloat(dPlayerData, xRhinoDrinkTime),0,");
code("\"<color={PlayerColor(\"+BlueText()+\")}>Drinking\", -1);");
code("playSound(\"shipdeathsplash.wav\");");
code("playSound(\"geyserbirth.wav\");");
code("}");
code("}");
code("}");
code("else if(TutorialMode == true){");
code("height = xsVectorGetX(kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if((height < 70) && (height > 66)){");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 2);");
code("if(trCurrentPlayer() == p){");
code("trCounterAddTime(\"rhinodrinker\" +p, 2,0,\"<color={PlayerColor(\"+BlueText()+\")}>Drinking\", -1);");
code("playSound(\"shipdeathsplash.wav\");");
code("playSound(\"geyserbirth.wav\");");
code("}");
code("}");
code("else{");
code("ColouredIconChatToPlayer(p, \"1,0.2,0.2\", \"icons\editor edit water\", \"Not close enough to fountain!\");");
code("if(trCurrentPlayer() == p){");
code("playSound(\"cantdothat.wav\");");
code("}");
code("}");
code("}");
code("}");
code("if(trPlayerResourceCount(p, \"Food\") > 0){");
code("trPlayerGrantResources(p, \"Food\", -100000);");
code("}");
code("if(xGetBool(dPlayerData, xCharge) == true){");
code("if(iModulo(10, trTimeMS()) == 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\",xsVectorGetX(kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"))),");
code("xsVectorGetZ(kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"))),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Dust Medium\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trDamageUnitsInArea(cNumberNonGaiaPlayers, \"Fence Wood\", 6, 50);");
code("trDamageUnitsInArea(cNumberNonGaiaPlayers, \"Slinger\", 2, 50);");
code("trDamageUnitsInArea(cNumberNonGaiaPlayers, \"Chu Ko Nu\", 2, 50);");
code("}");
code("if(xGetFloat(dPlayerData, xRhinoChargeTime) < 0){");
code("ToggleCharge(p);");
code("ColouredIconChatToPlayer(p, \"1,0,0\", \"icons\icon object stat hit point\", \"Out of stamina!\");");
code("trQuestVarModify(\"P\"+p+\"StaminaWarn\", \"+\", 1);");
code("if(1*trQuestVarGet(\"P\"+p+\"StaminaWarn\") < 3){");
code("ColouredIconChatToPlayer(p, \"1,1,0\", \"icons\editor river\", \"Use 'W' when near water to drink and replenish stamina.\");");
code("}");
code("if(trCurrentPlayer() == p){");
code("playSound(\"cantdothat.wav\");");
code("}");
code("}");
code("}");
code("if((trTimeMS() > 1*trQuestVarGet(\"P\"+p+\"Drink\")) && (trPlayerUnitCountSpecific(p, \"\"+RhinoDrinkProto) == 1)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+RhinoProto));");
code("xSetFloat(dPlayerData, xRhinoChargeTime, xGetInt(dPlayerData, xRhinoChargeTimeMax));");
code("if(trCurrentPlayer() == p){");
code("playSound(\"geyserhit2.wav\");");
code("}");
code("}");
code("}");
code("}");
code("rule RhinoTutorialDone");
code("highFrequency");
code("inactive");
code("{");
code("if((PlayersActive == 1*trQuestVarGet(\"PlayersDoneTutorial\")) && (PlayersActive > 0)){");
code("xsDisableSelf();");
code("xsDisableRule(\"RhinoTutorialLoops\");");
code("xsEnableRule(\"BuildRhinoArea\");");
code("trClearCounterDisplay();");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAbort(\"cdtutoriala\");");
code("trCounterAbort(\"cdtutorialtimeout\");");
code("trQuestVarSet(\"PlayersDoneTutorial\", 0);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,1,1,true);");
code("Stage = 2;");
code("characterDialog(ActName(Stage), \" \", ActIcon(Stage));");
code("trSetFogAndBlackmap(true,true);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("xResetDatabase(dTemp);");
code("TutorialMode = false;");
code("}");
code("}");
code("rule RhinoTutorialLoops");
code("highFrequency");
code("inactive");
code("{");
code("if(TutorialMode){");
code("int temp = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"P\"+p+\"Pos\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if((playerIsPlaying(p) == false) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("xSetBool(dPlayerData, xPlayerActive, false);");
code("PlayersActive = PlayersActive-1;");
code("trPaintTerrain(5,((p*8)-2),40,((p*8+4)-2),CliffType,CliffSubType);");
code("trUnitSelectClear();");
code("for(a = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("if(xGetInt(dTemp, xExtra) == p){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("}");
code("}");
code("if((trVectorQuestVarGetX(\"P\"+p+\"Pos\") > 58) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0) &&");
code("(1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 0)){");
code("if(trCurrentPlayer() == p){");
code("startNPCDialog(7);");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 1);");
code("trCounterAddTime(\"cdtutoriala\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Press 'W' to drink.\", -1);");
code("}");
code("}");
code("if((1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 2) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("trQuestVarSet(\"P\"+p+\"DoneTutorial\", 1);");
code("trQuestVarModify(\"PlayersDoneTutorial\", \"+\", 1);");
code("temp = 1*trQuestVarGet(\"PlayersDoneTutorial\");");
code("trPaintTerrain(5,((p*8)-2),40,((p*8+4)-2),CliffType,CliffSubType);");
code("trUnitSelectClear();");
code("for(a = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("if(xGetInt(dTemp, xExtra) == p){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trClearCounterDisplay();");
code("trSetCounterDisplay(\"<color={PlayerColor(\" + GreenText() + \")}>Tutorial complete: \" + temp + \" / \" + PlayersActive);");
code("if((temp == 1) && (PlayersActive > 1)){");
code("xsEnableRule(\"TutorialTimeout\");");
code("}");
code("if(trCurrentPlayer() == p){");
code("playSound(\"ageadvance.wav\");");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAbort(\"cdtutoriala\");");
code("}");
code("}");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if((trUnitDead() == true) && (xGetBool(dPlayerData, xPlayerActive) == true) &&");
code("(1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("CreateRhino(p, 14, p*16, 90);");
code("}");
code("}");
code("}");
code("}");
}
void actrhino() {
code("rule BuildRhinoArea");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("TutorialMode = false;");
code("createMarsh();");
code("xsDisableSelf();");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,100,800,false);");
code("uiZoomToProto(\"\"+RhinoProto);");
code("uiLookAtProto(\"\"+RhinoProto);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trDelayedRuleActivation(\"RhinoMinigameDetect\");");
code("trDelayedRuleActivation(\"TEST\");");
code("trDelayedRuleActivation(\"RhinoAllDead\");");
code("xsEnableRule(\"RhinoPoacherMovement\");");
code("trSetCounterDisplay(\"<color={PlayerColor(2)}>Fencing destroyed: \"+FencesDone+\"/8\");");
code("ColouredIconChat(\"1,0.5,0\", ActIcon(Stage), \"<u>\" + ActName(Stage) + \"</u>\");");
code("ColouredIconChat(\"0.0,0.8,0.2\", \"icons\icon building wooden fence 64\", \"Destroy enough fences.\");");
code("ColouredChat(\"0.0,0.8,0.2\", \"Each long fence segment needs at least one break.\");");
code("xsEnableRule(\"PlayMusic\");");
code("SpawnRhinoPoacher(xsMax(PlayersActive,3));");
code("PlayersDead = 0;");
code("timediff = trTimeMS();");
code("timelast = trTimeMS();");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("xSetFloat(dPlayerData, xRhinoChargeTime, xGetInt(dPlayerData, xRhinoChargeTimeMax));");
code("}");
code("trDelayedRuleActivation(\"RhinoActLoops\");");
code("ActPart = 1;");
code("}");
code("}");
code("void ProcessRhinoFence(int count = 5){");
code("for (x=xsMin(count, xGetDatabaseCount(dFences)); > 0) {");
code("xDatabaseNext(dFences);");
code("xUnitSelect(dFences, xUnitID);");
code("if(trUnitAlive() == false){");
code("if(1*trQuestVarGet(\"Segment\"+xGetInt(dFences, xSegment)+\"Broken\") == 0){");
code("trQuestVarModify(\"Segment\"+xGetInt(dFences, xSegment)+\"Broken\", \"+\", 1);");
code("FencesDone = FencesDone+1;");
code("}");
code("xFreeDatabaseBlock(dFences);");
code("}");
code("}");
code("if(FencesDone < 8){");
code("trSetCounterDisplay(\"<color={PlayerColor(2)}>Fencing destroyed: \"+FencesDone+\"/8\");");
code("}");
code("else{");
code("trSetCounterDisplay(\"<color={PlayerColor(3)}>Fencing destroyed: \"+FencesDone+\"/8\");");
code("playSoundCustom(\"xnew_objective.wav\", \"\Yeebaagooon\Zoo Quest\Skillpoint.mp3\");");
code("if(xGetDatabaseCount(dPoachers) == 0){");
code("trQuestVarModify(\"RhinoBonuses\", \"+\", 2);");
code("}");
code("xsEnableRule(\"RhinoPartTwo\");");
code("}");
code("}");
code("void PoacherKillTrack(int count = 5){");
code("for (x=xsMin(count, xGetDatabaseCount(dPoachers)); > 0) {");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("if(trUnitAlive() == false){");
code("PoachersDead = PoachersDead+1;");
code("xFreeDatabaseBlock(dPoachers);");
code("}");
code("}");
code("if(ActPart == 2){");
code("if(PoachersDead < PoachersTarget){");
code("trSetCounterDisplay(\"<color={PlayerColor(2)}>Poachers killed: \"+PoachersDead+\"/\" + PoachersTarget);");
code("}");
code("else{");
code("playSoundCustom(\"xnew_objective.wav\", \"\Yeebaagooon\Zoo Quest\Skillpoint.mp3\");");
code("SpawnRhinoPoacher(5);");
code("trMessageSetText(\"You must now find the extraction zone. Take care, advanced poachers are coming!\", 10000);");
code("ActPart = 3;");
code("trQuestVarSet(\"RhinoPoachTime\", (trTime()+30));");
code("ColouredIconChat(\"0,0.8,0.1\", \"icons\improvement skin of the rhino icon\", \"Survive for two minutes for bonus points.\");");
code("}");
code("}");
code("if(ActPart == 3){");
code("trSetCounterDisplay(\"<color={PlayerColor(3)}>Poachers killed: \"+PoachersDead);");
code("}");
code("}");
code("rule RhinoPartTwo");
code("highFrequency");
code("inactive");
code("{");
code("if(InMinigame == false){");
code("if (trTime() > cActivationTime + 4) {");
code("PoachersTarget = xsMax(PlayersActive*3,5);");
code("if(PoachersDead > PoachersTarget){");
code("PoachersTarget = PoachersDead+cNumberNonGaiaPlayers;");
code("}");
code("trSetCounterDisplay(\"<color={PlayerColor(2)}>Poachers killed: \"+PoachersDead+\"/\" + PoachersTarget);");
code("ActPart = 2;");
code("trOverlayText(\"Poachers Spawning...\", 5.0,-1,-1,600);");
code("SpawnRhinoPoacher(2);");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("xsDisableSelf();");
code("trQuestVarSet(\"NextPoacherSpawn\", trTime()+30);");
code("xsEnableRule(\"RhinoPoacherSpawnLoop\");");
code("paintCircle(xsVectorGetX(EndPoint),xsVectorGetZ(EndPoint),8,LeaveTerrain);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+FlagUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Flag\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+FlagUnitID);");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+FlagSFXID);");
code("trMutateSelected(kbGetProtoUnitID(\"Osiris Box Glow\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+FlagSFXID);");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0\");");
code("trDelayedRuleActivation(\"RhinoEndZoneSee\");");
code("trDelayedRuleActivation(\"RhinoLeave\");");
code("}");
code("}");
code("}");
code("rule RhinoPoacherSpawnLoop");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > 1*trQuestVarGet(\"NextPoacherSpawn\")) {");
code("if(Stage == 2){");
code("if(ActPart == 2){");
code("if(xGetDatabaseCount(dPoachers) < PoachersTarget){");
code("trQuestVarSetFromRand(\"temp\", 20, 50);");
code("if(1*trQuestVarGet(\"temp\") < 35){");
code("SpawnRhinoPoacher(2);");
code("}");
code("else{");
code("SpawnRhinoPoacher(3);");
code("}");
code("}");
code("else{");
code("trQuestVarSetFromRand(\"temp\", 10, 30);");
code("}");
code("}");
code("if(ActPart == 3){");
code("trQuestVarSetFromRand(\"temp\", 10, 30);");
code("if(1*trQuestVarGet(\"temp\") < 22){");
code("SpawnRhinoPoacher(2);");
code("}");
code("else{");
code("SpawnRhinoSuperPoacher(1);");
code("}");
code("}");
code("}");
code("trQuestVarModify(\"NextPoacherSpawn\", \"+\", 1*trQuestVarGet(\"temp\"));");
code("}");
code("}");
code("rule RhinoActLoops");
code("highFrequency");
code("inactive");
code("{");
code("if(Stage == 2){");
code("timediff = 0.001 * (trTimeMS() - timelast);");
code("timelast = trTimeMS();");
code("int temp = 0;");
code("if(xGetDatabaseCount(dMissiles) > 0){");
code("DoMissile();");
code("}");
code("if(FencesDone < 8){");
code("if(InMinigame == false){");
code("ProcessRhinoFence(10);");
code("}");
code("}");
code("else{");
code("if(ActPart < 2){");
code("trSetCounterDisplay(\"<color={PlayerColor(3)}>Fencing destroyed: \"+FencesDone+\"/8\");");
code("}");
code("else{");
code("PoacherKillTrack(5);");
code("}");
code("}");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(trPlayerUnitCountSpecific(p, \"\"+RhinoProto) == 1){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trDamageUnit(1.49999*timediff);");
code("}");
code("if(xGetBool(dPlayerData, xCharge) == true){");
code("xSetFloat(dPlayerData, xRhinoChargeTime, xGetFloat(dPlayerData, xRhinoChargeTime)-timediff);");
code("}");
code("if((playerIsPlaying(p) == false) && (xGetBool(dPlayerData, xPlayerActive) == true) && (xGetBool(dPlayerData,");
code("xPlayerDead) == false)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("xSetBool(dPlayerData, xPlayerActive, false);");
code("PlayersActive = PlayersActive-1;");
code("}");
code("if((xGetBool(dPlayerData, xStopDeath) == false) && (trPlayerUnitCountSpecific(p, \"\"+RhinoProto) == 0) &&");
code("(trPlayerUnitCountSpecific(p, \"Prisoner\") == 0) && (trPlayerUnitCountSpecific(p, \"\"+RhinoDrinkProto) == 0) &&");
code("(xGetBool(dPlayerData, xPlayerActive) == true) && (xGetBool(dPlayerData, xPlayerDead) == false) &&");
code("(InMinigame == false)){");
code("PlayersDead = PlayersDead+1;");
code("xSetBool(dPlayerData, xPlayerDead, true);");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is dead!\");");
code("PlayerColouredChatToSelf(p, \"You'll be able to join the next act if your team pass this one.\");");
code("xSetVector(dPlayerData, xDeathVector, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("trPlayerKillAllGodPowers(p);");
code("trTechGodPower(1, \"Rain\", 1);");
code("if(iModulo(2, trTime()) == 0){");
code("playSound(\"\dialog\jp\skul062.mp3\");");
code("}");
code("else{");
code("playSound(\"\xpack\xdialog\jp\xkri075.mp3\");");
code("}");
code("}");
code("if(xGetInt(dPlayerData, xHPRegen) > 0){");
code("if(trTime() > xGetInt(dPlayerData, xHPRegenNext)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trDamageUnit(-1*xGetInt(dPlayerData, xHPRegen));");
code("xSetInt(dPlayerData, xHPRegenNext, trTime()+xGetInt(dPlayerData, xHPRegenTime));");
code("}");
code("}");
code("if(trCurrentPlayer() == p){");
code("trCounterAbort(\"stamina\"+p);");
code("trCounterAddTime(\"stamina\"+p, -100, -200, \"<color={PlayerColor(\"+p+\")}>Stamina: \" + 1*xGetFloat(dPlayerData,");
code("xRhinoChargeTime), -1);");
code("}");
code("}");
code("if((PlayersActive == PlayersReadyToLeave+PlayersDead) && (PlayersDead != PlayersActive)){");
code("xsEnableRule(\"RhinoExit\");");
code("}");
code("if(xGetDatabaseCount(dChests) > 0){");
code("xDatabaseNext(dChests);");
code("int n = xGetInt(dChests, xUnitID);");
code("xUnitSelect(dChests,xUnitID);");
code("if(trCountUnitsInArea(\"\"+n,0,\"Great Box\", 1) == 0){");
code("xFreeDatabaseBlock(dChests);");
code("debugLog(\"Chest removed\" + n);");
code("debugLog(\"\"+kbGetProtoUnitID(\"\"+n));");
code("ChestsTotal = ChestsTotal-1;");
code("}");
code("if (trUnitIsSelected()) {");
code("uiClearSelection();");
code("startNPCDialog(5);");
code("}");
code("trUnitSelectClear();");
code("for(pl=1 ; < cNumberNonGaiaPlayers){");
code("if(trCountUnitsInArea(\"\"+n,pl,\"\"+RhinoProto, 5) > 0){");
code("xUnitSelect(dChests,xUnitID);");
code("trUnitSetAnimation(\"SE_Great_Box_Opening\",false,-1);");
code("xUnitSelect(dChests,xUnitID);");
code("trUnitHighlight(3, false);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Pyramid Osiris Xpack\"));");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trSetSelectedScale(100,0,0);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitOverrideAnimation(6, 0, false, true, -1);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0\");");
code("xAddDatabaseBlock(dDestroyMe, true);");
code("xSetInt(dDestroyMe, xDestroyName, xGetInt(dChests, xUnlockUnitID));");
code("xSetInt(dDestroyMe, xDestroyTime, trTimeMS()+3000);");
code("ChestsFound = ChestsFound+1;");
code("xFreeDatabaseBlock(dChests);");
code("trQuestVarSetFromRand(\"temp\", 1, 2);");
code("trQuestVarSetFromRand(\"temp2\", 1, 3);");
code("if(1*trQuestVarGet(\"temp\") == 1){");
code("if(1*trQuestVarGet(\"temp2\") == 1){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+2 hp\", 12, \"+1.5 charge speed\", 14, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 2){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+2 hp\", 12, \"+2 max stamina\", 15, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 3){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+2 hp\", 12, \"-1s drink time\", 16, 10000);");
code("}");
code("}");
code("if(1*trQuestVarGet(\"temp\") == 2){");
code("if(1*trQuestVarGet(\"temp2\") == 1){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+0.5 base speed\", 13, \"+1.5 charge speed\", 14, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 2){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+0.5 base speed\", 13, \"+2 max stamina\", 15, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 3){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+0.5 base speed\", 13, \"-1s drink time\", 16, 10000);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if(InMinigame == true){");
code("for(b = 0; <xGetDatabaseCount(dPoachers)){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("for(b = xGetDatabaseCount(dTemp); > 0){");
code("xDatabaseNext(dTemp);");
code("vector yeetpos = kbGetBlockPosition(\"\"+xGetInt(dTemp, xUnitID));");
code("yeetpos = yeetpos/2;");
code("if((xsVectorGetX(yeetpos) >= xsVectorGetX(StageVector)-2) && (xsVectorGetX(yeetpos) <= xsVectorGetX(StageVector)+2) &&");
code("(xsVectorGetZ(yeetpos) >= xsVectorGetZ(StageVector)-2) && (xsVectorGetZ(yeetpos) <= xsVectorGetZ(StageVector)+2)){");
code("int anim = kbUnitGetAnimationActionType(kbGetBlockID(\"\"+xGetInt(dTemp, xUnitID)+\"\"));");
code("if(anim != 29){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitChangeProtoUnit(\"Tartarian Gate flame\");");
code("xFreeDatabaseBlock(dTemp);");
code("playSound(\"spidermaledeath\" + iModulo(5, (trTime())+1) + \".wav\");");
code("}");
code("}");
code("}");
code("if(xGetDatabaseCount(dTemp) == 0){");
code("xsEnableRule(\"RhinoMinigameEnd\");");
code("}");
code("}");
code("if(ActPart == 3){");
code("if(1*trQuestVarGet(\"RhinoPoachTime\") < trTime()){");
code("trQuestVarModify(\"RhinoPoachTime\", \"+\", 30);");
code("trQuestVarModify(\"RhinoSurvival\", \"+\", 1);");
code("if(1*trQuestVarGet(\"RhinoSurvival\") == 4){");
code("ColouredIconChat(\"0,0.8,0.1\", \"icons\improvement skin of the rhino icon\", \"Survival bonus!\");");
code("playSound(\"tributereceived.wav\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("rule RhinoAllDead");
code("inactive");
code("minInterval 5");
code("{");
code("if((Stage == 2) && (PlayersDead == PlayersActive)){");
code("trShowWinLose(\"All players are dead\", \"xlose.wav\");");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trSetPlayerDefeated(p);");
code("}");
code("xsDisableSelf();");
code("trEndGame();");
code("}");
code("}");
code("rule RhinoPoacherMovement");
code("inactive");
code("highFrequency");
code("{");
code("int superpoacher = 0;");
code("int target = 0;");
code("int temp = 0;");
code("vector dest = vector(0,0,0);");
code("if(xGetDatabaseCount(dPoachers) > 0){");
code("xDatabaseNext(dPoachers);");
code("if(xGetInt(dPoachers, xMoveTime) < trTime()){");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"y\",30,80);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("xSetInt(dPoachers, xMoveTime, trTime()+1*trQuestVarGet(\"y\"));");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitMoveToPoint(1*trQuestVarGet(\"x\"),5,1*trQuestVarGet(\"z\"),-1,true);");
code("}");
code("}");
code("}");
code("rule RhinoEndZoneSee");
code("inactive");
code("highFrequency");
code("{");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if(trUnitDistanceToUnit(\"\"+FlagUnitID) < 23){");
code("vector flagV = kbGetBlockPosition(\"\"+FlagUnitID);");
code("for(x=1 ; < cNumberNonGaiaPlayers){");
code("trMinimapFlare(x,10,flagV,true);");
code("}");
code("UnitCreate(0, \"Revealer\", xsVectorGetX(flagV),xsVectorGetZ(flagV),0);");
code("trMessageSetText(\"The extraction zone has been found. Gather here when you are ready to end the act.\", 8000);");
code("playSound(\"examinationbirth.wav\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+FlagUnitID);");
code("trUnitHighlight(10, true);");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("rule RhinoMinigameDetect");
code("highFrequency");
code("inactive");
code("{");
code("vector pos = vector(0,0,0);");
code("vector minigame = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"MinigameStartID\"));");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("if(distanceBetweenVectors(minigame, pos, true) < 10){");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeInArea(0,0,\"Savannah Tree\", \"Rocket\", 8);");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeProtoUnit(\"Olympus Temple SFX\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Forest Fire SFX\");");
code("PaintAtlantisArea(xsVectorGetX(StageVector)-2,xsVectorGetZ(StageVector)-2,xsVectorGetX(StageVector)+2,");
code("xsVectorGetZ(StageVector)+2,0,53);");
code("refreshPassability();");
code("trMessageSetText(\"Minigame found! Remain in the white square if you wish to play.\", 10000);");
code("trCounterAddTime(\"CDMG\", 12-(QuickStart*5), 0, \"<color={PlayerColor(\"+p+\")}>Minigame Starts\", 34);");
code("MinigameFound = true;");
code("for(x=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, x);");
code("if(x != p){");
code("if(xGetBool(dPlayerData, xPlayerDead) == false){");
code("PlayerChoice(x, \"Participate in minigame?\", \"Yes\", 4, \"No\", 0, 11900);");
code("}");
code("}");
code("}");
code("for(b = 0; <xGetDatabaseCount(dPoachers)){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("for(c = xGetDatabaseCount(dMissiles); > 0){");
code("xDatabaseNext(dMissiles);");
code("xUnitSelect(dMissiles, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dMissiles);");
code("}");
code("trMusicStop();");
code("playSound(\"\cinematics\22_in\music 2.mp3\");");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("void RhinoMinigameGo(int temp = 0){");
code("xsEnableRule(\"MGGORhino\");");
code("}");
code("rule MGGORhino");
code("inactive");
code("highFrequency");
code("{");
code("InMinigame = true;");
code("vector dir = vector(25,0,0);");
code("vector place = vector(30,0,0);");
code("vector base = StageVector;");
code("float baseCos = xsCos(6.283185 / (cNumberNonGaiaPlayers-1));");
code("float baseSin = xsSin(6.283185 / (cNumberNonGaiaPlayers-1));");
code("int heading = 90;");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("trPaintTerrain(xsVectorGetX(StageVector)-2,xsVectorGetZ(StageVector)-2,xsVectorGetX(StageVector)+2,");
code("xsVectorGetZ(StageVector)+2,2,2);");
code("trPaintTerrain(xsVectorGetX(StageVector)-1,xsVectorGetZ(StageVector)-1,xsVectorGetX(StageVector)+1,");
code("xsVectorGetZ(StageVector)+1,0,0);");
code("CreateMinigameFlag(2*xsVectorGetX(StageVector),2*xsVectorGetZ(StageVector));");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 2*xsVectorGetX(StageVector),2*xsVectorGetZ(StageVector),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trMutateSelected(kbGetProtoUnitID(\"Tartarian Gate birth\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitOverrideAnimation(18,0,false,false);");
code("trQuestVarSet(\"PitFire\", temp);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 2*xsVectorGetX(StageVector),2*xsVectorGetZ(StageVector),0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Revealer\");");
code("trQuestVarSet(\"RhinoMGLOS\", temp);");
code("trChangeTerrainHeight(xsVectorGetX(StageVector)-1,xsVectorGetZ(StageVector)-1,xsVectorGetX(StageVector)+1,");
code("xsVectorGetZ(StageVector)+1,-10, false);");
code("refreshPassability();");
code("trPaintTerrain(xsVectorGetX(StageVector)-1,xsVectorGetZ(StageVector)-1,xsVectorGetX(StageVector)+1,");
code("xsVectorGetZ(StageVector)+1,2,10);");
code("trUnitChangeInArea(cNumberNonGaiaPlayers,0,\"Fence Wood\", \"Rocket\", 8);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(xGetBool(dPlayerData, xPlayerActive)){");
code("trVectorQuestVarSet(\"P\"+p+\"PosMG\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("trVectorQuestVarSet(\"P\"+p+\"PosMG\", trVectorQuestVarGet(\"P\"+p+\"PosMG\")/2);");
code("if((trVectorQuestVarGetX(\"P\"+p+\"PosMG\") >= xsVectorGetX(StageVector)-3) &&");
code("(trVectorQuestVarGetX(\"P\"+p+\"PosMG\") <= xsVectorGetX(StageVector)+3) &&");
code("(trVectorQuestVarGetZ(\"P\"+p+\"PosMG\") >= xsVectorGetZ(StageVector)-3) &&");
code("(trVectorQuestVarGetZ(\"P\"+p+\"PosMG\") <= xsVectorGetZ(StageVector)+3)){");
code("xSetFloat(dPlayerData, xRhinoChargeTime, 30);");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 9, 1);");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is playing\");");
code("PlayersMinigaming = PlayersMinigaming+1;");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeInArea(p,p,\"\"+RhinoProto, \"Rocket\", 999);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("CreateRhino(p, trVectorQuestVarGetX(\"P\"+p+\"PosMG\")*2,trVectorQuestVarGetZ(\"P\"+p+\"PosMG\")*2+10,0);");
code("xSetBool(dPlayerData, xStopDeath, true);");
code("}");
code("}");
code("base = StageVector*2;");
code("base = base+dir;");
code("heading = heading-(360/(cNumberNonGaiaPlayers-1));");
code("if(heading > 360){");
code("heading = heading-360;");
code("}");
code("if(heading < 0){");
code("heading = heading+360;");
code("}");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Villager Egyptian\", xsVectorGetX(base), xsVectorGetZ(base), heading);");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("dir = rotationMatrix(dir, baseCos, baseSin);");
code("}");
code("if(PlayersMinigaming == 0){");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitDestroy();");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitDestroy();");
code("trMessageSetText(\"Nobody was on the white tiles. Minigame cancelled.\", 5000);");
code("for(c = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("for(b = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Slinger\");");
code("}");
code("InMinigame = false;");
code("xsEnableRule(\"PlayMusic\");");
code("}");
code("else{");
code("trMessageSetText(\"Yeet all \" + xGetDatabaseCount(dTemp) + \" villagers into the pit. Players granted extra stamina.\",");
code("8000);");
code("trCounterAddTime(\"cdrhinominigame\", 90,0,\"<color={PlayerColor(0)}>Minigame time remaining\", 35);");
code("playSoundCustom(\"\xpack\xcinematics\intro\music.mp3\", \"\Yeebaagooon\Zoo Quest\Minigame2.mp3\");");
code("}");
code("xsDisableSelf();");
code("}");
code("void RhinoMGTimeout(int eventID = 0){");
code("xsEnableRule(\"RhinoMinigameEnd\");");
code("}");
code("rule RhinoMinigameEnd");
code("inactive");
code("highFrequency");
code("{");
code("vector temp = vector(0,0,0);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(xGetDatabaseCount(dTemp) == 0){");
code("if(xGetBool(dPlayerData, xStopDeath) == true){");
code("MinigameWins = 1;");
code("modifyProtounitAbsolute(\"\"+RhinoProto, p, 9, 30);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"xwin.wav\");");
code("playSound(\"\cinematics\15_in\gong.wav\");");
code("trMessageSetText(\"You have won the minigame!\", 4000);");
code("}");
code("trQuestVarSetFromRand(\"temp\",1,2,true);");
code("if(1*trQuestVarGet(\"temp\") == 1){");
code("PlayerChoice(p, \"Choose your reward:\", \"+5 hp\", 19, \"+5 max stamina\", 20, 10000);");
code("}");
code("else{");
code("PlayerChoice(p, \"Choose your reward:\", \"+20 percent charge speed\", 18, \"+1hp regen every 20s\", 17, 10000);");
code("}");
code("}");
code("}");
code("else{");
code("if(xGetBool(dPlayerData, xStopDeath) == true){");
code("if(trCurrentPlayer() == p){");
code("trOverlayText(\"Minigame Failed!\", 3.0,-1,-1,600);");
code("playSound(\"xlose.wav\");");
code("}");
code("}");
code("}");
code("if((xGetInt(dPlayerData, xTeleportDue) == 1) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("temp = xGetVector(dPlayerData, xVectorHold);");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreateV(p, \"Roc\", temp, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("xSetInt(dPlayerData, xTeleportDue, 0);");
code("}");
code("uiZoomToProto(\"\"+RhinoProto);");
code("uiLookAtProto(\"\"+RhinoProto);");
code("for(c = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("for(b = 0; <xGetDatabaseCount(dPoachers)){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Slinger\");");
code("}");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeProtoUnit(\"Olympus Temple SFX\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Forest Fire SFX\");");
code("trUnitSelectByQV(\"PitFire\");");
code("trUnitChangeProtoUnit(\"Heavenlight\");");
code("trUnitSelectByQV(\"RhinoMGLOS\");");
code("trUnitDestroy();");
code("xsDisableSelf();");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("xsEnableRule(\"PlayMusic\");");
code("InMinigame = false;");
code("PlayersMinigaming = 0;");
code("trCounterAbort(\"cdrhinominigame\");");
code("trChangeTerrainHeight(xsVectorGetX(StageVector)-1,xsVectorGetZ(StageVector)-1,xsVectorGetX(StageVector)+1,");
code("xsVectorGetZ(StageVector)+1,3, false);");
code("trPaintTerrain(xsVectorGetX(StageVector)-2,xsVectorGetZ(StageVector)-2,xsVectorGetX(StageVector)+2,");
code("xsVectorGetZ(StageVector)+2,0,17);");
code("refreshPassability();");
code("}");
code("rule RhinoLeave");
code("inactive");
code("highFrequency");
code("{");
code("int STOP = 0;");
code("trQuestVarModify(\"PlayerCycle\", \"+\", 1);");
code("if(1*trQuestVarGet(\"PlayerCycle\") > cNumberNonGaiaPlayers){");
code("trQuestVarSet(\"PlayerCycle\", 1);");
code("}");
code("int p = 1*trQuestVarGet(\"PlayerCycle\");");
code("xSetPointer(dPlayerData, p);");
code("tempV = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("if(xGetBool(dPlayerData, xReadyToLeave) == true){");
code("if((trGetTerrainType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) != getTerrainType(LeaveTerrain)) ||");
code("(trGetTerrainSubType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) != getTerrainSubType(LeaveTerrain))){");
code("xSetBool(dPlayerData, xReadyToLeave, false);");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("PlayersReadyToLeave = PlayersReadyToLeave-1;");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+RhinoProto));");
code("PlayerColouredChatToSelf(p, \"You have left the extraction zone\");");
code("STOP = 1;");
code("}");
code("}");
code("if((xGetBool(dPlayerData, xReadyToLeave) == false) && (STOP == 0) && (xGetBool(dPlayerData, xPlayerDead) == false)){");
code("if((trGetTerrainType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) == getTerrainType(LeaveTerrain)) &&");
code("(trGetTerrainSubType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) == getTerrainSubType(LeaveTerrain))){");
code("xSetBool(dPlayerData, xReadyToLeave, true);");
code("xSetBool(dPlayerData, xStopDeath, true);");
code("PlayersReadyToLeave = PlayersReadyToLeave+1;");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"Prisoner\"));");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is ready to leave\");");
code("if(trQuestVarGet(\"P\"+p+\"LeaveMsg\") == 0){");
code("trQuestVarSet(\"P\"+p+\"LeaveMsg\", 1);");
code("ColouredChatToPlayer(p, \"1,1,0\", \"You cannot charge or drink in the extraction zone.\");");
code("ColouredChatToPlayer(p, \"1,1,0\", \"You also cannot die or be attacked.\");");
code("}");
code("}");
code("}");
code("}");
code("rule RhinoExit");
code("inactive");
code("highFrequency");
code("{");
code("trCounterAbort(\"poachtimer\");");
code("xsDisableRule(\"Charge\");");
code("xsDisableRule(\"RhinoPartTwo\");");
code("xsDisableRule(\"RhinoPoacherSpawnLoop\");");
code("xsDisableRule(\"RhinoActLoops\");");
code("xsDisableRule(\"RhinoAllDead\");");
code("xsDisableRule(\"RhinoPoacherMovement\");");
code("xsDisableRule(\"RhinoEndZoneSee\");");
code("xsDisableRule(\"RhinoLeave\");");
code("xsDisableRule(\"RhinoTutorialLoops\");");
code("xsDisableRule(\"RhinoMinigameDetect\");");
code("xsDisableRule(\"MGGORhino\");");
code("xsDisableRule(\"RhinoMinigameEnd\");");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("trCounterAbort(\"stamina\"+p);");
code("}");
code("trClearCounterDisplay();");
code("xsEnableRule(\"ScoreScreenStart\");");
code("xsDisableSelf();");
code("}");
}
void tutorialgoat() {
code("rule TutorialTerrainGoat");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("trCameraCut(vector(-65.460060,123.743729,-65.460060), vector(0.500000,-0.707107,0.500000), vector(0.500000,0.707107,");
code("0.500000), vector(0.707107,0.000000,-0.707107));");
code("xsDisableRule(\"DeerTutorialDone\");");
code("xsDisableRule(\"RhinoTutorialDone\");");
code("xsDisableRule(\"Jump\");");
code("xsDisableRule(\"JumpEnd\");");
code("NewDestroyNumber = trGetNextUnitScenarioNameNumber()-1;");
code("TutorialMode = true;");
code("Stage = 3;");
code("CliffType = 2;");
code("CliffSubType = 3;");
code("clearMap(\"black\", 5.0);");
code("trPaintTerrain(0,0,45,cNumberNonGaiaPlayers*8,CliffType,CliffSubType);");
code("xResetDatabase(dChests);");
code("int temp = 0;");
code("for(t=0 ; < cNumberNonGaiaPlayers){");
code("for(x=0 ; < 46){");
code("if(iModulo(7,x) == 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", x*2, t*16+8, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Rock River Icy\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(1.65);");
code("}");
code("else{");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", x*2, t*16+8, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Pine Snow\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(0.75);");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"PlayersDoneTutorial\", 0);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trQuestVarSet(\"P\"+p+\"DoneTutorial\", 0);");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 0);");
code("trPaintTerrain(5,((p*8)-2),40,((p*8+4)-2),0,50);");
code("PaintAtlantisArea(6,p*8-1,8,p*8+1,0,53);");
code("trPaintTerrain(28,p*8+2,28,p*8-2,0,74);");
code("trChangeTerrainHeight(12,p*8+2,16,p*8-2,10,false);");
code("trPaintTerrain(11,p*8+2,16,p*8-2,CliffType,CliffSubType);");
code("trPaintTerrain(12,p*8+1,15,p*8-2,0,50);");
code("trChangeTerrainHeight(20,p*8+2,24,p*8-2,10,false);");
code("trPaintTerrain(19,p*8+2,24,p*8-2,CliffType,CliffSubType);");
code("trPaintTerrain(20,p*8+1,23,p*8-2,0,50);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", 28*2, p*16-4, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Fence Stone\");");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", 28*2, p*16, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Fence Stone\");");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", 28*2, p*16+4, 180);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Fence Stone\");");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 34*2, p*16, 270);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Shrine\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitSetAnimationPath(\"2,0,0,0,0\");");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("CreateGoat(p,14,16*p,90);");
code("xSetPointer(dPlayerData, xPlayerUnitID);");
code("xSetInt(dPlayerData, xPlayerUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("xSetInt(dPlayerData, xTarget, 0);");
code("xSetInt(dPlayerData, xTimeout, trTimeMS()*2);");
code("if(trCurrentPlayer() == p){");
code("trCounterAddTime(\"cdtutorial\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Press 'Q' to jump to the cursor.\", -1);");
code("}");
code("}");
code("refreshPassability();");
code("xsEnableRule(\"Animations\");");
code("xsEnableRule(\"GoatJump\");");
code("xsEnableRule(\"GoatJumpEnd\");");
code("xsEnableRule(\"ExtraJumpTech\");");
code("xsEnableRule(\"GoatTutorialDone\");");
code("trDelayedRuleActivation(\"GoatTutorialLoops\");");
code("if(QuickStart == 0){");
code("startNPCDialog(8);");
code("}");
code("refreshPassability();");
code("uiZoomToProto(\"\"+GoatProto);");
code("uiLookAtProto(\"\"+GoatProto);");
code("playSound(\"\xpack\xcinematics\2_in\music.mp3\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ExtraJumpTech");
code("highFrequency");
code("inactive");
code("{");
code("int jumps = 0;");
code("while(jumps < 21){");
code("for(p=1; < cNumberNonGaiaPlayers){");
code("trTechSetStatus(p, 115, 4);");
code("jumps = jumps +1;");
code("}");
code("}");
code("xsDisableSelf();");
code("}");
code("void SquareHeight(int sq = 0){");
code("int StartX = xsVectorGetX(StageVector);");
code("int StartZ = xsVectorGetZ(StageVector);");
code("int x = 0;");
code("int z = 0;");
code("vector dir = vector(0,0,0);");
code("if((sq > 0) && (sq < 10)){");
code("if((sq >= 1) && (sq <= 3)){");
code("z = StartZ+5;");
code("}");
code("if((sq >= 4) && (sq <= 6)){");
code("z = StartZ-2;");
code("}");
code("if((sq >= 7) && (sq <= 9)){");
code("z = StartZ-9;");
code("}");
code("int d = iModulo(3, sq)+1;");
code("x = StartX+(d*7-16);");
code("float height = trGetTerrainHeight(x+2,z+2);");
code("if(height > 0){");
code("trChangeTerrainHeight(x,z,x+5,z+5,height-1,false);");
code("}");
code("if(height == 2){");
code("trPaintTerrain(x,z,x+4,z+4,0,6,false);");
code("}");
code("if(height == 1){");
code("trPaintTerrain(x,z,x+5,z+5,5,7,false);");
code("SquaresDown = SquaresDown+1;");
code("playSound(\"fireball fall 2.wav\");");
code("}");
code("}");
code("}");
code("rule GoatJump");
code("highFrequency");
code("inactive");
code("{");
code("int anim = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(trPlayerResourceCount(p, \"Gold\") > 0){");
code("trPlayerGrantResources(p, \"Gold\", -100000);");
code("if(xGetBool(dPlayerData, xReadyToLeave) == false){");
code("if(xGetFloat(dPlayerData, xGoatJumpDist) < 225){");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"Anubite\"));");
code("trSetSelectedScale(0,1,0);");
code("xSetInt(dPlayerData, xOldAnim, -10);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitOverrideAnimation(24, 0, true, false, -1, 0);");
code("xSetInt(dPlayerData, xTarget, trGetNextUnitScenarioNameNumber());");
code("UnitCreate(cNumberNonGaiaPlayers, \"Female\", xsVectorGetX(xGetVector(dPlayerData,xGoatTarget)),");
code("xsVectorGetZ(xGetVector(dPlayerData,xGoatTarget)), 0);");
code("xUnitSelect(dPlayerData, xTarget);");
code("trSetSelectedScale(0.1,0.1,0.1);");
code("trSetUnitOrientation(trVectorQuestVarGet(\"V\"+p+\"dir\"), vector(0,1,0), true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDoWorkOnUnit(\"\"+xGetInt(dPlayerData, xTarget),-1);");
code("xAddDatabaseBlock(dDestroyMe, true);");
code("xSetInt(dDestroyMe, xDestroyName, xGetInt(dPlayerData, xTarget));");
code("xSetInt(dDestroyMe, xDestroyTime, trTimeMS()+4000);");
code("xSetInt(dPlayerData, xTimeout, trTimeMS()+900);");
code("}");
code("else{");
code("ColouredChatToPlayer(p, \"1,0,0\", \"Jump distance too far!\");");
code("if(trCurrentPlayer() == p){");
code("playSound(\"cantdothat.wav\");");
code("}");
code("}");
code("}");
code("}");
code("if(trPlayerResourceCount(p, \"Wood\") > 0){");
code("trPlayerGrantResources(p, \"Wood\", -100000);");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("tempV = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("UnitCreate(0, \"Dwarf\", xsVectorGetX(tempV), xsVectorGetZ(tempV), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Deconstruct Unit\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitOverrideAnimation(18, 0, true, false, -1, 0);");
code("if(TutorialMode == true){");
code("if(trCountUnitsInArea(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"),0,\"Shrine\", 6) > 0){");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 2);");
code("}");
code("if(QuickStart != 0){");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 2);");
code("}");
code("}");
code("else{");
code("for(n = xGetDatabaseCount(dInterractables) ; > 0){");
code("xDatabaseNext(dInterractables);");
code("if(trCountUnitsInArea(\"\"+xGetInt(dInterractables, xUnitID),p,\"\"+GoatProto, 5) > 0){");
code("xUnitSelect(dInterractables, xUnitID);");
code("trUnitHighlight(1, true);");
code("if(xGetInt(dInterractables, xType) == 1){");
code("SquareHeight(xGetInt(dInterractables, xSquare1));");
code("SquareHeight(xGetInt(dInterractables, xSquare2));");
code("}");
code("if(xGetInt(dInterractables, xType) == 2){");
code("if(xGetInt(dInterractables, xSubtype) == 0){");
code("xSetInt(dInterractables, xSubtype, 1);");
code("xUnitSelect(dInterractables, xUnitID);");
code("trQuestVarSetFromRand(\"temp\", ShrineTimeMin, ShrineTimeMax);");
code("xSetInt(dInterractables, xSquare1, trTime()+1*trQuestVarGet(\"temp\"));");
code("trUnitHighlight(1*trQuestVarGet(\"temp\"), false);");
code("tempV = kbGetBlockPosition(\"\"+1*xGetInt(dInterractables, xUnitID));");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", xsVectorGetX(tempV), xsVectorGetZ(tempV), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Timeshift Out\");");
code("xSetInt(dInterractables, xSquare2, temp);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitSetAnimationPath(\"0,1,0,0,0\");");
code("if(trCurrentPlayer() == p){");
code("playSound(\"shrine.wav\");");
code("}");
code("ShrinesGot = ShrinesGot+1;");
code("}");
code("}");
code("if(xGetInt(dInterractables, xType) == 3){");
code("if(xGetInt(dInterractables, xSubtype) == 0){");
code("xSetInt(dInterractables, xSubtype, 1);");
code("xUnitSelect(dInterractables, xUnitID);");
code("trQuestVarSetFromRand(\"temp\", ShrineTimeMin/2, ShrineTimeMax/2);");
code("xSetInt(dInterractables, xSquare1, trTime()+1*trQuestVarGet(\"temp\"));");
code("trUnitHighlight(1*trQuestVarGet(\"temp\"), false);");
code("tempV = kbGetBlockPosition(\"\"+1*xGetInt(dInterractables, xUnitID));");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", xsVectorGetX(tempV), xsVectorGetZ(tempV), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trMutateSelected(kbGetProtoUnitID(\"Monument\"));");
code("xSetInt(dInterractables, xSquare2, temp);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitSetAnimationPath(\"0,0,0,1,0\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(0);");
code("trQuestVarModify(\"P\"+p+\"Runes\", \"+\", 1);");
code("trQuestVarSetFromRand(\"temp\",0,30);");
code("for(a = 1*trQuestVarGet(\"temp\"); > 0){");
code("xDatabaseNext(dInterractables);");
code("}");
code("for(a = xGetDatabaseCount(dInterractables); > 0){");
code("xDatabaseNext(dInterractables);");
code("if(xGetInt(dInterractables, xType) == 2){");
code("if(xGetInt(dInterractables, xSubtype) == 0){");
code("tempV = kbGetBlockPosition(\"\"+xGetInt(dInterractables, xUnitID));");
code("break;");
code("}");
code("}");
code("}");
code("if(trCurrentPlayer() == p){");
code("trMinimapFlare(p, 10, tempV, true);");
code("}");
code("if(1*trQuestVarGet(\"P\"+p+\"Runes\") == 1){");
code("ColouredIconChatToPlayer(p, \"1,0,1\", \"icons\improvement thurisaz rune icon 64\",");
code("\"Runestones will flare an inactive shrine\");");
code("}");
code("}");
code("}");
code("if(xGetInt(dInterractables, xType) == 4){");
code("xUnitSelect(dInterractables, xUnitID);");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");
code("xFreeDatabaseBlock(dInterractables);");
code("PlayerChoice(p, \"Choose your reward:\", \"Discover shrine activation requirement\", 33,");
code("\"Discover total number of shrines\", 34, 10000);");
code("}");
code("if(xGetInt(dInterractables, xType) == 5){");
code("if(xGetInt(dInterractables, xSubtype) == 0){");
code("tempV = kbGetBlockPosition(\"\"+xGetInt(dInterractables, xUnitID));");
code("for(a = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitMoveToPoint(xsVectorGetX(tempV),0,xsVectorGetZ(tempV),-1,true);");
code("}");
code("xSetInt(dInterractables, xSubtype, 1);");
code("xSetInt(dInterractables, xSquare1, trTime()+150);");
code("xUnitSelect(dInterractables, xUnitID);");
code("trUnitSetAnimationPath(\"0,0,0,0,0\");");
code("if(trCurrentPlayer() == p){");
code("playSound(\"attackwarning.wav\");");
code("trMessageSetText(\"Poachers are converging on your position!\", 6000);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if(xGetDatabaseCount(dRelics) > 0){");
code("for(n = xGetDatabaseCount(dRelics); > 0){");
code("xDatabaseNext(dRelics);");
code("if(trCountUnitsInArea(\"\"+xGetInt(dRelics, xUnitID),p,\"\"+GoatProto, 5) > 0){");
code("xUnitSelect(dRelics, xUnitID);");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");
code("xUnitSelect(dRelics, xUnitID);");
code("trUnitSetAnimationPath(\"0,1,1,1,0,0,0\");");
code("xUnitSelect(dRelics, xSubID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dRelics);");
code("SpawnRelic(1);");
code("xSetInt(dPlayerData, xRelics, xGetInt(dPlayerData, xRelics)+1);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"relicselect.wav\");");
code("}");
code("}");
code("}");
code("}");
code("if(xGetDatabaseCount(dShop) > 0){");
code("for(n = xGetDatabaseCount(dShop); > 0){");
code("xDatabaseNext(dShop);");
code("if(trCountUnitsInArea(\"\"+xGetInt(dShop, xUnitID),p,\"\"+GoatProto, 5) > 0){");
code("if(xGetInt(dPlayerData, xRelics) >= xGetInt(dShop, xCost)){");
code("xSetInt(dPlayerData, xRelics, xGetInt(dPlayerData, xRelics)-xGetInt(dShop, xCost));");
code("trTechGodPower(p, xGetString(dShop, xPowerName), 1);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"tributereceived.wav\");");
code("playSound(\"\cinematics\24_in\magic.mp3\");");
code("}");
code("}");
code("else{");
code("if(trCurrentPlayer() == p){");
code("trMessageSetText(\"To purchase \" + xGetString(dShop, xPower) + \" - you need \" + xGetInt(dShop, xCost) + \" relics.\",");
code("6000);");
code("playSound(\"cantdothat.wav\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if(xGetDatabaseCount(dHelp) > 0){");
code("for(n = xGetDatabaseCount(dHelp); > 0){");
code("xDatabaseNext(dHelp);");
code("if(trCountUnitsInArea(\"\"+xGetInt(dHelp, xUnitID),p,GoatProto, 5) > 0){");
code("xUnitSelect(dHelp, xUnitID);");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");
code("xUnitSelect(dHelp, xUnitID);");
code("trUnitSetAnimationPath(\"0,1,1,0,0,0,0\");");
code("xUnitSelect(dHelp, xSubID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dHelp);");
code("if(iModulo(3, trTimeMS()) == 0){");
code("PlayerChoice(p, \"Choose your help\", \"Flare nearest relic\", 54, \"Flare nearest inactive shrine\", 53, 10000);");
code("}");
code("else if(iModulo(2, trTimeMS()) == 0){");
code("PlayerChoice(p, \"Choose your help\", \"+10s minimum shrine activation time\", 28, \"+15s current shrine activation time\",");
code("56, 10000);");
code("}");
code("else{");
code("PlayerChoice(p, \"Choose your help\", \"+10s maximum shrine activation time\", 55, \"+15s current shrine activation time\",");
code("56, 10000);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if(trPlayerResourceCount(p, \"Food\") > 0){");
code("trPlayerGrantResources(p, \"Food\", -100000);");
code("}");
code("}");
code("}");
code("rule GoatJumpEnd");
code("highFrequency");
code("inactive");
code("{");
code("if(Stage == 3){");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("int anim = kbUnitGetAnimationActionType(kbGetBlockID(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")+\"\"));");
code("if(xGetInt(dPlayerData, xTarget) > 0){");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xTarget));");
code("if((trUnitPercentDamaged() > 0) || (trUnitAlive() == false)){");
code("xUnitSelect(dPlayerData, xTarget);");
code("trUnitConvert(p);");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("trSetSelectedScale(0,1,0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+xGetInt(dPlayerData, xTarget));");
code("xUnitSelect(dPlayerData, xTarget);");
code("trUnitEjectContained();");
code("xUnitSelect(dPlayerData, xTarget);");
code("trUnitDestroy();");
code("xSetInt(dPlayerData, xTarget, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if(xGetBool(dPlayerData, xReadyToLeave) == false){");
code("trMutateSelected(kbGetProtoUnitID(\"\"+GoatProto));");
code("}");
code("if(xGetBool(dPlayerData, xReadyToLeave) == true){");
code("trMutateSelected(kbGetProtoUnitID(\"Prisoner\"));");
code("}");
code("trSetSelectedScale(0,1,0);");
code("xSetInt(dPlayerData, xOldAnim, 2);");
code("xUnitSelect(dPlayerData, xSpyID);");
code("trUnitOverrideAnimation(2, 0, true, true, -1, 0);");
code("trVectorQuestVarSet(\"P\"+p+\"Pos\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("}");
code("trUnitSelectClear();");
code("if(trTimeMS() > xGetInt(dPlayerData, xTimeout)){");
code("if(anim != 32){");
code("xUnitSelect(dPlayerData, xTarget);");
code("trUnitConvert(p);");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("trSetSelectedScale(0,1,0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+xGetInt(dPlayerData, xTarget));");
code("xUnitSelect(dPlayerData, xTarget);");
code("trUnitEjectContained();");
code("xUnitSelect(dPlayerData, xTarget);");
code("trUnitDestroy();");
code("xSetInt(dPlayerData, xTarget, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if(xGetBool(dPlayerData, xReadyToLeave) == false){");
code("trMutateSelected(kbGetProtoUnitID(\"\"+GoatProto));");
code("}");
code("if(xGetBool(dPlayerData, xReadyToLeave) == true){");
code("trMutateSelected(kbGetProtoUnitID(\"Prisoner\"));");
code("}");
code("trSetSelectedScale(0,1,0);");
code("xSetInt(dPlayerData, xOldAnim, 2);");
code("xUnitSelect(dPlayerData, xSpyID);");
code("trUnitOverrideAnimation(2, 0, true, true, -1, 0);");
code("trVectorQuestVarSet(\"P\"+p+\"Pos\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if(distanceBetweenVectors(xGetVector(dPlayerData, xGoatTarget),");
code("kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"))) > 225){");
code("debugLog(\"Vector differential bug, fixed\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("CreateGoat(p, xsVectorGetX(xGetVector(dPlayerData, xGoatTarget)), xsVectorGetZ(xGetVector(dPlayerData, xGoatTarget)),");
code("0);");
code("}");
code("}");
code("}");
code("}");
code("trUnitSelectClear();");
code("}");
code("}");
code("}");
code("rule GoatTutorialLoops");
code("highFrequency");
code("inactive");
code("{");
code("if(TutorialMode){");
code("int temp = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"P\"+p+\"Pos\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if((playerIsPlaying(p) == false) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("xSetBool(dPlayerData, xPlayerActive, false);");
code("PlayersActive = PlayersActive-1;");
code("trPaintTerrain(5,((p*8)-2),40,((p*8+4)-2),CliffType,CliffSubType);");
code("trUnitSelectClear();");
code("for(a = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("if(xGetInt(dTemp, xExtra) == p){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("}");
code("}");
code("if((trVectorQuestVarGetX(\"P\"+p+\"Pos\") > 58) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0) &&");
code("(1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 0)){");
code("if(trCurrentPlayer() == p){");
code("startNPCDialog(9);");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 1);");
code("trCounterAddTime(\"cdtutoriala\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Press 'W' to interract.\", -1);");
code("}");
code("}");
code("if((1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 2) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("trQuestVarSet(\"P\"+p+\"DoneTutorial\", 1);");
code("trQuestVarModify(\"PlayersDoneTutorial\", \"+\", 1);");
code("temp = 1*trQuestVarGet(\"PlayersDoneTutorial\");");
code("trPaintTerrain(5,((p*8)-2),40,((p*8+4)-2),CliffType,CliffSubType);");
code("trUnitSelectClear();");
code("for(a = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("if(xGetInt(dTemp, xExtra) == p){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trClearCounterDisplay();");
code("trSetCounterDisplay(\"<color={PlayerColor(\" + GreenText() + \")}>Tutorial complete: \" + temp + \" / \" + PlayersActive);");
code("if((temp == 1) && (PlayersActive > 1)){");
code("xsEnableRule(\"TutorialTimeout\");");
code("}");
code("if(trCurrentPlayer() == p){");
code("playSound(\"ageadvance.wav\");");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAbort(\"cdtutoriala\");");
code("}");
code("}");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if((trUnitAlive() == false) && (xGetBool(dPlayerData, xPlayerActive) == true) &&");
code("(1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("CreateGoat(p, 14, p*16, 90);");
code("}");
code("if((trVectorQuestVarGetZ(\"P\"+p+\"Pos\") > (p*16+8)) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitTeleport(trVectorQuestVarGetX(\"P\"+p+\"Pos\"),3,p*16);");
code("}");
code("}");
code("}");
code("}");
code("rule GoatTutorialDone");
code("highFrequency");
code("inactive");
code("{");
code("if((PlayersActive == 1*trQuestVarGet(\"PlayersDoneTutorial\")) && (PlayersActive > 0)){");
code("xsDisableSelf();");
code("xsDisableRule(\"GoatTutorialLoops\");");
code("xsEnableRule(\"BuildGoatArea\");");
code("trClearCounterDisplay();");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAbort(\"cdtutoriala\");");
code("trCounterAbort(\"cdtutorialtimeout\");");
code("trQuestVarSet(\"PlayersDoneTutorial\", 0);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,1,1,true);");
code("Stage = 3;");
code("characterDialog(ActName(Stage), \" \", ActIcon(Stage));");
code("trSetFogAndBlackmap(true,true);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("xResetDatabase(dTemp);");
code("TutorialMode = false;");
code("}");
code("}");
}
void ActGoat() {
code("rule BuildGoatArea");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("TutorialMode = false;");
code("createGoatArea();");
code("xsDisableSelf();");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,100,800,false);");
code("uiZoomToProto(\"\"+GoatProto);");
code("uiLookAtProto(\"\"+GoatProto);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trDelayedRuleActivation(\"GoatMinigameDetect\");");
code("trDelayedRuleActivation(\"TEST\");");
code("trDelayedRuleActivation(\"GoatEndZoneSee\");");
code("trDelayedRuleActivation(\"GoatAllDead\");");
code("trDelayedRuleActivation(\"GoatPoacherTimer\");");
code("xsEnableRule(\"GoatPoacherMovement\");");
code("trDelayedRuleActivation(\"GoatBonus\");");
code("ColouredIconChat(\"1,0.5,0\", ActIcon(Stage), \"<u>\" + ActName(Stage) + \"</u>\");");
code("ColouredIconChat(\"0.0,0.8,0.2\", \"icons\building norse shrine icon 64\", \"Interract with shrines using W.\");");
code("ColouredChat(\"0.0,0.8,0.2\", \"Each shrine only remains active for a short time.\");");
code("ColouredChat(\"0.0,0.8,0.2\", \"Get as many as you think you need, then head to the extraction zone.\");");
code("ColouredChat(\"0.0,0.8,0.2\", \"You may also be able to interract with other objects...\");");
code("xsEnableRule(\"PlayMusic\");");
code("PlayersDead = 0;");
code("timediff = trTimeMS();");
code("timelast = trTimeMS();");
code("trDelayedRuleActivation(\"GoatActLoops\");");
code("SpawnGoatPoacher(2);");
code("modifyProtounitAbsolute(\"Throwing Axeman\", cNumberNonGaiaPlayers, 55, 4);");
code("modifyProtounitAbsolute(\"Throwing Axeman\", cNumberNonGaiaPlayers, 2, 30);");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xTimeout, trTimeMS()*2);");
code("}");
code("ShrinesMax = trPlayerUnitCountSpecific(0, \"Shrine\");");
code("trQuestVarSet(\"NextPoacherSpawn\", trTime()+220);");
code("ShrineTarget = ShrinesMax-2-PlayersActive;");
code("SpawnRelic(PlayersActive*2+1);");
code("trDelayedRuleActivation(\"GoatRelicChat\");");
code("}");
code("}");
code("rule GoatEndZoneSee");
code("inactive");
code("highFrequency");
code("{");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if(trUnitDistanceToUnit(\"\"+FlagUnitID) < 26){");
code("vector flagV = kbGetBlockPosition(\"\"+FlagUnitID);");
code("for(x=1 ; < cNumberNonGaiaPlayers){");
code("trMinimapFlare(x,10,flagV,true);");
code("}");
code("UnitCreate(0, \"Revealer\", xsVectorGetX(flagV),xsVectorGetZ(flagV),0);");
code("trMessageSetText(\"The extraction zone has been found. Gather here when you are ready to end the act.\", 8000);");
code("playSound(\"examinationbirth.wav\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+FlagUnitID);");
code("trUnitHighlight(10, true);");
code("trDelayedRuleActivation(\"GoatLeave\");");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("rule GoatBonus");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 70) {");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"x\", 0, 252);");
code("trQuestVarSetFromRand(\"z\", 0, 252);");
code("UnitCreate(0, \"Cinematic Block\", 1*trQuestVarGet(\"x\"),1*trQuestVarGet(\"z\"), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Reindeer\");");
code("xAddDatabaseBlock(dInterractables, true);");
code("xSetInt(dInterractables, xUnitID, temp);");
code("xSetInt(dInterractables, xType, 4);");
code("xsDisableSelf();");
code("}");
code("}");
code("rule GoatRelicChat");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 24) {");
code("if(InMinigame == false){");
code("if(Stage == 3){");
code("ColouredIconChat(\"1,1,0\", \"icons\icon unit relic\", \"<u>Look out for relics!</u>\");");
code("ColouredChat(\"0.9,0.9,0.3\", \"Interract with 'W' to collect them.\");");
code("ColouredIconChat(\"0.9,0.9,0.3\", \"icons\world obelisk icon 64\", \"You can then spend them on god powers at obelisks.\");");
code("ColouredChat(\"0.9,0.9,0.3\", \"Click an obelsik to find what it sells, use interract to purchase.\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("rule GoatActLoops");
code("highFrequency");
code("inactive");
code("{");
code("if(Stage == 3){");
code("timediff = 0.001 * (trTimeMS() - timelast);");
code("timelast = trTimeMS();");
code("tempV = vector(0,0,0);");
code("int temp = 0;");
code("if(xGetDatabaseCount(dMissiles) > 0){");
code("DoMissile();");
code("}");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("trCounterAbort(\"GoatC\"+p);");
code("}");
code("if(InMinigame == false){");
code("trSetCounterDisplay(\"<color={PlayerColor(0)}>Shrines Active: \" + ShrinesGot);");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(trCurrentPlayer() == p){");
code("if(xGetInt(dPlayerData, xRelics) > 0){");
code("trCounterAddTime(\"GoatC\"+p, -100, -10, \"</color>Relics: \" + 1*xGetInt(dPlayerData, xRelics), -1);");
code("}");
code("}");
code("}");
code("}");
code("if(InMinigame == true){");
code("trSetCounterDisplay(\"<color={PlayerColor(\" + GreenText() + \")}>Squares sunk: \" + SquaresDown + \"/6\");");
code("}");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(InMinigame == true){");
code("if(xGetBool(dPlayerData, xStopDeath) == true){");
code("if(trPlayerUnitCountSpecific(p, \"\"+GoatProto) == 1){");
code("tempV = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("if((trGetTerrainType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) == 5) &&");
code("(trGetTerrainSubType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) == 7)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("UnitCreate(0, \"Tartarian Gate Flame\", trVectorQuestVarGetX(\"P\"+p+\"PosMG\"),trVectorQuestVarGetZ(\"P\"+p+\"PosMG\"), 90);");
code("PlayersMinigaming = PlayersMinigaming-1;");
code("if(trCurrentPlayer() == p){");
code("playSound(\"xlose.wav\");");
code("trOverlayText(\"Minigame Failed!\", 3.0,-1,-1,600);");
code("}");
code("break;");
code("}");
code("if(((xsVectorGetX(tempV)-xsVectorGetX(StageVector)*2) > 19) ||");
code("((xsVectorGetX(tempV)-xsVectorGetX(StageVector)*2) < -17) ||");
code("((xsVectorGetZ(tempV)-xsVectorGetZ(StageVector)*2) < -17) || ((xsVectorGetZ(tempV)-xsVectorGetZ(StageVector)*2) > 19)){");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("PlayersMinigaming = PlayersMinigaming-1;");
code("if(trCurrentPlayer() == p){");
code("playSound(\"xlose.wav\");");
code("trMessageSetText(\"You have gone out of bounds and been returned to normal play.\", 5000);");
code("}");
code("}");
code("}");
code("}");
code("if(SquaresDown > 5){");
code("if(xGetBool(dPlayerData, xStopDeath) == true){");
code("MinigameWins = MinigameWins+1;");
code("if(trCurrentPlayer() == p){");
code("playSound(\"xwin.wav\");");
code("playSound(\"\cinematics\15_in\gong.wav\");");
code("trMessageSetText(\"You have won the minigame!\", 4000);");
code("}");
code("trQuestVarSetFromRand(\"temp\",1,2,true);");
code("if(1*trQuestVarGet(\"temp\") == 1){");
code("PlayerChoice(p, \"Choose your reward:\", \"Remove a snowman\", 27, \"+6 hp\", 31, 10000);");
code("}");
code("else{");
code("PlayerChoice(p, \"Choose your reward:\", \"+1.5 speed\", 32, \"+60s all shrine current activation time\", 30, 10000);");
code("}");
code("PlayersMinigaming = PlayersMinigaming-1;");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("}");
code("}");
code("}");
code("if((playerIsPlaying(p) == false) && (xGetBool(dPlayerData, xPlayerActive) == true) && (xGetBool(dPlayerData,");
code("xPlayerDead) == false)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("xSetBool(dPlayerData, xPlayerActive, false);");
code("PlayersActive = PlayersActive-1;");
code("}");
code("if((xGetBool(dPlayerData, xStopDeath) == false) && (trPlayerUnitCountSpecific(p, \"\"+GoatProto) == 0) &&");
code("(trPlayerUnitCountSpecific(p, \"Prisoner\") == 0) && (trPlayerGetPopulation(p) == 0) && (trPlayerUnitCountSpecific(p,");
code("\"Anubite\") == 0) && (xGetBool(dPlayerData, xPlayerActive) == true) && (xGetBool(dPlayerData, xPlayerDead) == false) &&");
code("(InMinigame == false)){");
code("PlayersDead = PlayersDead+1;");
code("xSetBool(dPlayerData, xPlayerDead, true);");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is dead!\");");
code("PlayerColouredChatToSelf(p, \"You'll be able to join the next act if your team pass this one.\");");
code("trPlayerKillAllGodPowers(p);");
code("xSetVector(dPlayerData, xDeathVector, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("trTechGodPower(1, \"Rain\", 1);");
code("if(iModulo(2, trTime()) == 0){");
code("playSound(\"\dialog\it\skul062.mp3\");");
code("}");
code("else{");
code("playSound(\"\xpack\xdialog\it\xkri075.mp3\");");
code("}");
code("}");
code("if(xGetInt(dPlayerData, xHPRegen) > 0){");
code("if(trTime() > xGetInt(dPlayerData, xHPRegenNext)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trDamageUnit(-1*xGetInt(dPlayerData, xHPRegen));");
code("xSetInt(dPlayerData, xHPRegenNext, trTime()+xGetInt(dPlayerData, xHPRegenTime));");
code("}");
code("}");
code("}");
code("if((PlayersActive == PlayersReadyToLeave+PlayersDead) && (PlayersDead != PlayersActive)){");
code("xsEnableRule(\"GoatExit\");");
code("}");
code("if(xGetDatabaseCount(dChests) > 0){");
code("xDatabaseNext(dChests);");
code("int n = xGetInt(dChests, xUnitID);");
code("xUnitSelect(dChests,xUnitID);");
code("if(trCountUnitsInArea(\"\"+n,0,\"Great Box\", 1) == 0){");
code("xFreeDatabaseBlock(dChests);");
code("debugLog(\"Chest removed\" + n);");
code("debugLog(\"\"+kbGetProtoUnitID(\"\"+n));");
code("ChestsTotal = ChestsTotal-1;");
code("}");
code("if (trUnitIsSelected()) {");
code("uiClearSelection();");
code("startNPCDialog(5);");
code("}");
code("trUnitSelectClear();");
code("for(pl=1 ; < cNumberNonGaiaPlayers){");
code("if(trCountUnitsInArea(\"\"+n,pl,\"\"+GoatProto, 5) > 0){");
code("xUnitSelect(dChests,xUnitID);");
code("trUnitSetAnimation(\"SE_Great_Box_Opening\",false,-1);");
code("xUnitSelect(dChests,xUnitID);");
code("trUnitHighlight(3, false);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Pyramid Osiris Xpack\"));");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trSetSelectedScale(100,0,0);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitOverrideAnimation(6, 0, false, true, -1);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0\");");
code("xAddDatabaseBlock(dDestroyMe, true);");
code("xSetInt(dDestroyMe, xDestroyName, xGetInt(dChests, xUnlockUnitID));");
code("xSetInt(dDestroyMe, xDestroyTime, trTimeMS()+3000);");
code("ChestsFound = ChestsFound+1;");
code("xFreeDatabaseBlock(dChests);");
code("trQuestVarSetFromRand(\"temp\", 1, 3);");
code("trQuestVarSetFromRand(\"temp2\", 1, 3);");
code("if(1*trQuestVarGet(\"temp\") == 1){");
code("if(1*trQuestVarGet(\"temp2\") == 1){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+2 hp\", 21, \"+0.5 speed\", 22, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 2){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+2 hp\", 21, \"+4 LOS\", 23, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 3){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+2 hp\", 21, \"+1hp regen every 30s\", 24, 10000);");
code("}");
code("}");
code("if(1*trQuestVarGet(\"temp\") == 2){");
code("if(1*trQuestVarGet(\"temp2\") == 1){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+3 hp\", 25, \"+0.75 speed\", 26, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 2){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+0.75 speed\", 26, \"+4 LOS\", 23, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 3){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+3 hp\", 25, \"+4 LOS\", 23, 10000);");
code("}");
code("}");
code("if(1*trQuestVarGet(\"temp\") == 3){");
code("if(1*trQuestVarGet(\"temp2\") == 1){");
code("PlayerChoice(pl, \"Choose your reward:\", \"Remove a snowman\", 27, \"+10s shrine min activation time\", 28, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 2){");
code("PlayerChoice(pl, \"Choose your reward:\", \"Remove a snowman\", 27, \"+20s shrine max activation time\", 29, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 3){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+20s shrine max activation time\", 29,");
code("\"+60s all shrine current activation time\", 30, 10000);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("for(x = xGetDatabaseCount(dInterractables); > 0){");
code("xDatabaseNext(dInterractables);");
code("if(xGetInt(dInterractables, xType) == 2){");
code("if(xGetInt(dInterractables, xSubtype) == 1){");
code("if(trTime() > xGetInt(dInterractables, xSquare1)){");
code("xSetInt(dInterractables, xSubtype, 0);");
code("ShrinesGot = ShrinesGot-1;");
code("xUnitSelect(dInterractables, xSquare2);");
code("trUnitDestroy();");
code("}");
code("}");
code("}");
code("if(xGetInt(dInterractables, xType) == 3){");
code("if(xGetInt(dInterractables, xSubtype) == 1){");
code("if(trTime() > xGetInt(dInterractables, xSquare1)){");
code("xSetInt(dInterractables, xSubtype, 0);");
code("xUnitSelect(dInterractables, xSquare2);");
code("trUnitDestroy();");
code("}");
code("}");
code("}");
code("if(xGetInt(dInterractables, xType) == 5){");
code("if(xGetInt(dInterractables, xSubtype) == 1){");
code("if(trTime() > xGetInt(dInterractables, xSquare2)){");
code("xSetInt(dInterractables, xSubtype, 0);");
code("xUnitSelect(dInterractables, xUnitID);");
code("trUnitSetAnimationPath(\"0,1,0,0,0\");");
code("}");
code("xUnitSelect(dInterractables, xSquare2);");
code("trQuestVarModify(\"TemporaryHeading\", \"+\", 100*timediff);");
code("if(1*trQuestVarGet(\"TemporaryHeading\") > 360){");
code("trQuestVarSet(\"TemporaryHeading\", 0);");
code("}");
code("temp = 1*trQuestVarGet(\"TemporaryHeading\");");
code("setSelectedUnitHeadingDegress(temp);");
code("}");
code("}");
code("}");
code("if(xGetDatabaseCount(dShop) > 0){");
code("xDatabaseNext(dShop);");
code("xUnitSelect(dShop,xUnitID);");
code("if (trUnitIsSelected()) {");
code("uiClearSelection();");
code("trMessageSetText(\"Purchase \" + xGetString(dShop, xPower) + \" - Cost: \" + xGetInt(dShop, xCost) + \" relics\", 6000);");
code("}");
code("trUnitSelectClear();");
code("}");
code("}");
code("}");
code("rule GoatPoacherMovement");
code("inactive");
code("highFrequency");
code("{");
code("int superpoacher = 0;");
code("int target = 0;");
code("int temp = 0;");
code("vector dest = vector(0,0,0);");
code("if(xGetDatabaseCount(dPoachers) > 0){");
code("xDatabaseNext(dPoachers);");
code("if(xGetInt(dPoachers, xMoveTime) < trTime()){");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"y\",30,80);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("xSetInt(dPoachers, xMoveTime, trTime()+1*trQuestVarGet(\"y\"));");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitMoveToPoint(1*trQuestVarGet(\"x\"),5,1*trQuestVarGet(\"z\"),-1,true);");
code("}");
code("}");
code("}");
code("rule GoatMinigameDetect");
code("highFrequency");
code("inactive");
code("{");
code("vector pos = vector(0,0,0);");
code("vector minigame = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"MinigameStartID\"));");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("if(distanceBetweenVectors(minigame, pos, true) < 10){");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeProtoUnit(\"Olympus Temple SFX\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Forest Fire SFX\");");
code("PaintAtlantisArea(xsVectorGetX(StageVector)-2,xsVectorGetZ(StageVector)-2,xsVectorGetX(StageVector)+2,");
code("xsVectorGetZ(StageVector)+2,0,53);");
code("trChangeTerrainHeight(xsVectorGetX(StageVector)-2,xsVectorGetZ(StageVector)-2,xsVectorGetX(StageVector)+3,");
code("xsVectorGetZ(StageVector)+3,10,false);");
code("refreshPassability();");
code("trMessageSetText(\"Minigame found! Remain in the white square if you wish to play.\", 10000);");
code("trCounterAddTime(\"CDMG\", 12-(QuickStart*5), 0, \"<color={PlayerColor(\"+p+\")}>Minigame Starts\", 36);");
code("MinigameFound = true;");
code("for(x=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, x);");
code("if(x != p){");
code("if(xGetBool(dPlayerData, xPlayerDead) == false){");
code("PlayerChoice(x, \"Participate in minigame?\", \"Yes\", 4, \"No\", 0, 11900);");
code("}");
code("}");
code("}");
code("for(b = 0; <xGetDatabaseCount(dPoachers)){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("for(c = xGetDatabaseCount(dMissiles); > 0){");
code("xDatabaseNext(dMissiles);");
code("xUnitSelect(dMissiles, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dMissiles);");
code("}");
code("trMusicStop();");
code("playSound(\"\cinematics\22_in\music 2.mp3\");");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("void GoatMinigameGo(int temp = 0){");
code("xsEnableRule(\"MGGOGoat\");");
code("}");
code("void GoatStatueMake(int x = 0, int z = 0){");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", x*2+4, z*2+4, 180);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trMutateSelected(kbGetProtoUnitID(\"Columns\"));");
code("xAddDatabaseBlock(dInterractables, true);");
code("xSetInt(dInterractables, xUnitID, temp);");
code("xSetInt(dInterractables, xType, 1);");
code("xSetInt(dInterractables, xSubtype, xGetDatabaseCount(dInterractables));");
code("trQuestVarSetFromRand(\"temp\", 1, xGetDatabaseCount(dTemp), true);");
code("xSetPointer(dTemp, 1*trQuestVarGet(\"temp\"));");
code("xSetInt(dInterractables, xSquare1, xGetInt(dTemp, xUnitID));");
code("trQuestVarSetFromRand(\"temp\", 1, 9, true);");
code("xSetInt(dInterractables, xSquare2, 1*trQuestVarGet(\"temp\"));");
code("trUnitSelectClear();");
code("xFreeDatabaseBlock(dTemp);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitTeleport(x*2+4,z*2+4);");
code("}");
code("rule MGGOGoat");
code("inactive");
code("highFrequency");
code("{");
code("InMinigame = true;");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("int StartX = xsVectorGetX(StageVector);");
code("int StartZ = xsVectorGetZ(StageVector);");
code("for(p = 1; < 10){");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, p);");
code("}");
code("trPaintTerrain(StartX-10,StartZ+4,StartX-4,StartZ+10,2,3);");
code("PaintAtlantisArea(StartX-9,StartZ+5,StartX-5,StartZ+9,0,53);");
code("trChangeTerrainHeight(StartX-9,StartZ+5,StartX-4,StartZ+10,15,false);");
code("GoatStatueMake(StartX-9,StartZ+5);");
code("trPaintTerrain(StartX-3,StartZ+4,StartX+3,StartZ+10,2,3);");
code("PaintAtlantisArea(StartX-2,StartZ+5,StartX+2,StartZ+9,0,53);");
code("trChangeTerrainHeight(StartX-2,StartZ+5,StartX+3,StartZ+10,15,false);");
code("GoatStatueMake(StartX-2,StartZ+5);");
code("trPaintTerrain(StartX+4,StartZ+4,StartX+10,StartZ+10,2,3);");
code("PaintAtlantisArea(StartX+5,StartZ+5,StartX+9,StartZ+9,0,53);");
code("trChangeTerrainHeight(StartX+5,StartZ+5,StartX+10,StartZ+10,15,false);");
code("GoatStatueMake(StartX+5,StartZ+5);");
code("trPaintTerrain(StartX-10,StartZ-3,StartX-4,StartZ+3,2,3);");
code("PaintAtlantisArea(StartX-9,StartZ-2,StartX-5,StartZ+2,0,53);");
code("trChangeTerrainHeight(StartX-9,StartZ-2,StartX-4,StartZ+3,15,false);");
code("GoatStatueMake(StartX-9,StartZ-2);");
code("trPaintTerrain(StartX-3,StartZ-3,StartX+3,StartZ+3,2,3);");
code("PaintAtlantisArea(StartX-2,StartZ-2,StartX+2,StartZ+2,0,53);");
code("trChangeTerrainHeight(StartX-2,StartZ-2,StartX+3,StartZ+3,15,false);");
code("GoatStatueMake(StartX-2,StartZ-2);");
code("trPaintTerrain(StartX+4,StartZ-3,StartX+10,StartZ+3,2,3);");
code("PaintAtlantisArea(StartX+5,StartZ-2,StartX+9,StartZ+2,0,53);");
code("trChangeTerrainHeight(StartX+5,StartZ-2,StartX+10,StartZ+3,15,false);");
code("GoatStatueMake(StartX+5,StartZ-2);");
code("trPaintTerrain(StartX-10,StartZ-10,StartX-4,StartZ-4,2,3);");
code("PaintAtlantisArea(StartX-9,StartZ-9,StartX-5,StartZ-5,0,53);");
code("trChangeTerrainHeight(StartX-9,StartZ-9,StartX-4,StartZ-4,15,false);");
code("GoatStatueMake(StartX-9,StartZ-9);");
code("trPaintTerrain(StartX-3,StartZ-10,StartX+3,StartZ-4,2,3);");
code("PaintAtlantisArea(StartX-2,StartZ-9,StartX+2,StartZ-5,0,53);");
code("trChangeTerrainHeight(StartX-2,StartZ-9,StartX+3,StartZ-4,15,false);");
code("GoatStatueMake(StartX-2,StartZ-9);");
code("trPaintTerrain(StartX+4,StartZ-10,StartX+10,StartZ-4,2,3);");
code("PaintAtlantisArea(StartX+5,StartZ-9,StartX+9,StartZ-5,0,53);");
code("trChangeTerrainHeight(StartX+5,StartZ-9,StartX+10,StartZ-4,15,false);");
code("GoatStatueMake(StartX+5,StartZ-9);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeInArea(0,0,\"Pine Snow\", \"Rocket\", 30);");
code("trUnitChangeInArea(0,0,\"Rock River Icy\", \"Rocket\", 30);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(xGetBool(dPlayerData, xPlayerActive)){");
code("trVectorQuestVarSet(\"P\"+p+\"PosMG\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("trVectorQuestVarSet(\"P\"+p+\"PosMG\", trVectorQuestVarGet(\"P\"+p+\"PosMG\")/2);");
code("if((trVectorQuestVarGetX(\"P\"+p+\"PosMG\") > xsVectorGetX(StageVector)-2) &&");
code("(trVectorQuestVarGetX(\"P\"+p+\"PosMG\") < xsVectorGetX(StageVector)+2) &&");
code("(trVectorQuestVarGetZ(\"P\"+p+\"PosMG\") > xsVectorGetZ(StageVector)-2) &&");
code("(trVectorQuestVarGetZ(\"P\"+p+\"PosMG\") < xsVectorGetZ(StageVector)+2)){");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is playing\");");
code("PlayersMinigaming = PlayersMinigaming+1;");
code("xSetBool(dPlayerData, xStopDeath, true);");
code("if(xGetInt(dPlayerData, xTeleportDue) == 0){");
code("xSetVector(dPlayerData, xVectorHold, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("}");
code("}");
code("}");
code("}");
code("refreshPassability();");
code("if(PlayersMinigaming == 0){");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitDestroy();");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitDestroy();");
code("trMessageSetText(\"Nobody was on the white tiles. Minigame cancelled.\", 5000);");
code("for(c = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("for(b = 0; <xGetDatabaseCount(dPoachers)){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Throwing Axeman\");");
code("}");
code("InMinigame = false;");
code("xsEnableRule(\"PlayMusic\");");
code("trChangeTerrainHeight(xsVectorGetX(StageVector)-10,xsVectorGetZ(StageVector)-10,xsVectorGetX(StageVector)+10,");
code("xsVectorGetZ(StageVector)+10,9,false);");
code("trPaintTerrain(xsVectorGetX(StageVector)-10,xsVectorGetZ(StageVector)-10,xsVectorGetX(StageVector)+10,");
code("xsVectorGetZ(StageVector)+10,0,51);");
code("refreshPassability();");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("if(trPlayerUnitCountSpecific(p, \"\"+GoatProto) == 0){");
code("CreateGoat(p, xsVectorGetX(StageVector), xsVectorGetZ(StageVector), 0);");
code("debugLog(\"Path 3\");");
code("}");
code("}");
code("}");
code("else{");
code("trLetterBox(true);");
code("characterDialog(\"Goat Minigame\", \"Interract (W) with columns\", \"icons\world column icon 64\");");
code("xsEnableRule(\"GoatMG_C01\");");
code("trCounterAddTime(\"cdgoatminigame\", 140,0,\"<color={PlayerColor(2)}>Minigame time remaining\", 37);");
code("playSoundCustom(\"\xpack\xcinematics\7_in\music.mp3\", \"\Yeebaagooon\Zoo Quest\Minigame3.mp3\");");
code("xsEnableRule(\"GoatMinigameEnd\");");
code("}");
code("for(x = xGetDatabaseCount(dInterractables); > 0){");
code("xDatabaseNext(dInterractables);");
code("if(xGetInt(dInterractables, xType) == 2){");
code("if(xGetInt(dInterractables, xSubtype) == 1){");
code("xSetInt(dInterractables, xSquare1, xGetInt(dInterractables, xSquare1)+90);");
code("}");
code("}");
code("}");
code("xsDisableSelf();");
code("}");
code("void GoatMGTimeout(int eventID = 0){");
code("PlayersMinigaming = 0;");
code("}");
code("rule GoatMG_C01");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Goat Minigame\", \"This will cause 2 squares to sink\", \"icons\world column icon 64\");");
code("xsEnableRule(\"GoatMG_C02\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule GoatMG_C02");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Goat Minigame\", \"Sink a total of 6 squares to win\", \"icons\world column icon 64\");");
code("xsEnableRule(\"GoatMG_C03\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule GoatMG_C03");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("trLetterBox(false);");
code("xsDisableSelf();");
code("}");
code("}");
code("rule GoatMinigameEnd");
code("inactive");
code("highFrequency");
code("{");
code("if(PlayersMinigaming <= 0){");
code("vector temp = vector(0,0,0);");
code("trChangeTerrainHeight(xsVectorGetX(StageVector)-10,xsVectorGetZ(StageVector)-10,xsVectorGetX(StageVector)+10,");
code("xsVectorGetZ(StageVector)+10,9,false);");
code("trPaintTerrain(xsVectorGetX(StageVector)-10,xsVectorGetZ(StageVector)-10,xsVectorGetX(StageVector)+10,");
code("xsVectorGetZ(StageVector)+10,0,51);");
code("refreshPassability();");
code("for(n = xGetDatabaseCount(dInterractables) ; > 0){");
code("xDatabaseNext(dInterractables);");
code("if(xGetInt(dInterractables, xType) == 1){");
code("xUnitSelect(dInterractables, xUnitID);");
code("trUnitChangeProtoUnit(\"Hero Birth\");");
code("xFreeDatabaseBlock(dInterractables);");
code("}");
code("}");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((xGetInt(dPlayerData, xTeleportDue) == 1) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("temp = xGetVector(dPlayerData, xVectorHold);");
code("debugLog(\"Path 1\");");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreateV(p, \"Roc\", temp, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("xSetInt(dPlayerData, xTeleportDue, 0);");
code("}");
code("else if((xGetInt(dPlayerData, xTeleportDue) == 0) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("if(trPlayerUnitCountSpecific(p, \"\"+GoatProto) == 0){");
code("debugLog(\"Path 2\");");
code("temp = xGetVector(dPlayerData, xVectorHold);");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreateV(p, \"Roc\", temp, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("}");
code("if(trPlayerUnitCountSpecific(p, \"\"+GoatProto) == 0){");
code("CreateGoat(p, trVectorQuestVarGetX(\"P\"+p+\"PosMG\")*2, trVectorQuestVarGetZ(\"P\"+p+\"PosMG\")*2, 0);");
code("debugLog(\"Path 3\");");
code("}");
code("}");
code("uiZoomToProto(\"\"+GoatProto);");
code("uiLookAtProto(\"\"+GoatProto);");
code("unitTransform(\"Tartarian Gate Flame\", \"Flowers\");");
code("for(c = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("for(b = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Throwing Axeman\");");
code("}");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeProtoUnit(\"Olympus Temple SFX\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Forest Fire SFX\");");
code("xsDisableSelf();");
code("InMinigame = false;");
code("PlayersMinigaming = 0;");
code("trCounterAbort(\"cdgoatminigame\");");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("xsEnableRule(\"PlayMusic\");");
code("}");
code("}");
code("rule GoatPoacherTimer");
code("highFrequency");
code("inactive");
code("{");
code("if(InMinigame == false){");
code("if (trTime() > 1*trQuestVarGet(\"NextPoacherSpawn\")) {");
code("if(Stage == 3){");
code("trQuestVarSet(\"NextPoacherSpawn\", trTime()+60+iModulo(140, trTimeMS()));");
code("trQuestVarSetFromRand(\"temp\", 1, 2);");
code("SpawnGoatPoacher(1*trQuestVarGet(\"temp\"));");
code("trOverlayText(\"Poachers Spawning...\", 5.0,-1,-1,600);");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("}");
code("}");
code("}");
code("}");
code("rule GoatLeave");
code("inactive");
code("highFrequency");
code("{");
code("int STOP = 0;");
code("trQuestVarModify(\"PlayerCycle\", \"+\", 1);");
code("if(1*trQuestVarGet(\"PlayerCycle\") > cNumberNonGaiaPlayers){");
code("trQuestVarSet(\"PlayerCycle\", 1);");
code("}");
code("int p = 1*trQuestVarGet(\"PlayerCycle\");");
code("xSetPointer(dPlayerData, p);");
code("tempV = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("if(xGetBool(dPlayerData, xReadyToLeave) == true){");
code("if((trGetTerrainType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) != getTerrainType(LeaveTerrain)) ||");
code("(trGetTerrainSubType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) != getTerrainSubType(LeaveTerrain))){");
code("xSetBool(dPlayerData, xReadyToLeave, false);");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("PlayersReadyToLeave = PlayersReadyToLeave-1;");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+GoatProto));");
code("PlayerColouredChatToSelf(p, \"You have left the extraction zone\");");
code("STOP = 1;");
code("}");
code("}");
code("if((xGetBool(dPlayerData, xReadyToLeave) == false) && (STOP == 0) && (xGetBool(dPlayerData, xPlayerDead) == false)){");
code("if((trGetTerrainType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) == getTerrainType(LeaveTerrain)) &&");
code("(trGetTerrainSubType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) == getTerrainSubType(LeaveTerrain))){");
code("xSetBool(dPlayerData, xReadyToLeave, true);");
code("xSetBool(dPlayerData, xStopDeath, true);");
code("PlayersReadyToLeave = PlayersReadyToLeave+1;");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"Prisoner\"));");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is ready to leave\");");
code("if(trQuestVarGet(\"P\"+p+\"LeaveMsg\") == 0){");
code("trQuestVarSet(\"P\"+p+\"LeaveMsg\", 1);");
code("ColouredChatToPlayer(p, \"1,1,0\", \"You cannot jump or interract in the extraction zone.\");");
code("ColouredChatToPlayer(p, \"1,1,0\", \"You also cannot die or be attacked.\");");
code("}");
code("}");
code("}");
code("}");
code("rule GoatAllDead");
code("inactive");
code("minInterval 5");
code("{");
code("if((Stage == 3) && (PlayersDead == PlayersActive)){");
code("trShowWinLose(\"All players are dead\", \"xlose.wav\");");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trSetPlayerDefeated(p);");
code("}");
code("xsDisableSelf();");
code("trEndGame();");
code("}");
code("}");
code("rule GoatExit");
code("inactive");
code("highFrequency");
code("{");
code("int ShrineMax = trPlayerUnitCountSpecific(0, \"Shrine\");");
code("trCounterAbort(\"poachtimer\");");
code("xsDisableRule(\"GoatActLoops\");");
code("xsDisableRule(\"GoatAllDead\");");
code("xsDisableRule(\"GoatPoacherMovement\");");
code("xsDisableRule(\"GoatEndZoneSee\");");
code("xsDisableRule(\"GoatLeave\");");
code("xsDisableRule(\"GoatTutorialLoops\");");
code("xsDisableRule(\"GoatMinigameDetect\");");
code("xsDisableRule(\"GoatMinigameEnd\");");
code("xsDisableRule(\"GoatBonus\");");
code("xsDisableRule(\"MGGOGoat\");");
code("xsDisableRule(\"GoatPoacherTimer\");");
code("xsDisableRule(\"GoatJump\");");
code("xsDisableRule(\"GoatJumpEnd\");");
code("xsDisableRule(\"ExtraJumpTech\");");
code("xsDisableRule(\"GoatRelicChat\");");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("trCounterAbort(\"stamina\"+p);");
code("trCounterAbort(\"GoatC\"+p);");
code("}");
code("trClearCounterDisplay();");
code("xsEnableRule(\"ScoreScreenStart\");");
code("modifyProtounitAbsolute(\"Throwing Axeman\", cNumberNonGaiaPlayers, 55, 1);");
code("for(a = xGetDatabaseCount(dInterractables); > 0){");
code("xDatabaseNext(dInterractables);");
code("xUnitSelect(dInterractables, xUnitID);");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("xFreeDatabaseBlock(dInterractables);");
code("}");
code("xsDisableSelf();");
code("}");
}
void tutorialcrocodile() {
code("rule TutorialTerrainCrocodile");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("trCameraCut(vector(-65.460060,123.743729,-65.460060), vector(0.500000,-0.707107,0.500000), vector(0.500000,0.707107,");
code("0.500000), vector(0.707107,0.000000,-0.707107));");
code("xsDisableRule(\"DeerTutorialDone\");");
code("xsDisableRule(\"RhinoTutorialDone\");");
code("xsDisableRule(\"GoatTutorialDone\");");
code("xsDisableRule(\"Jump\");");
code("xsDisableRule(\"JumpEnd\");");
code("NewDestroyNumber = trGetNextUnitScenarioNameNumber()-1;");
code("TutorialMode = true;");
code("Stage = 4;");
code("CliffType = 0;");
code("CliffSubType = 36;");
code("clearMap(\"black\", -5.0);");
code("paintWaterKeepingMapPassable(1,3,vector(0.4588,0.6588,0.5098));");
code("trPaintTerrain(0,0,45,cNumberNonGaiaPlayers*8,CliffType,CliffSubType);");
code("xResetDatabase(dChests);");
code("int temp = 0;");
code("for(t=0 ; < cNumberNonGaiaPlayers){");
code("for(x=0 ; < 46){");
code("if(iModulo(4,x) == 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", x*2, t*16+8, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Savannah Tree\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetSelectedScale(1,0.9,1);");
code("}");
code("else{");
code("temp = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"temph\",0,360,true);");
code("UnitCreate(0, \"Cinematic Block\", x*2, t*16+8, 1*trQuestVarGet(\"temph\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trMutateSelected(kbGetProtoUnitID(\"Seaweed\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(2.5);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitOverrideAnimation(2, 0, true, true, -1, 0);");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"PlayersDoneTutorial\", 0);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trForbidProtounit(p, \"Farm\");");
code("trForbidProtounit(p, \"Ulsfark\");");
code("trQuestVarSet(\"P\"+p+\"DoneTutorial\", 0);");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 0);");
code("trPaintTerrain(5,((p*8)-2),40,((p*8+4)-2),4,29);");
code("PaintAtlantisArea(6,p*8-1,8,p*8+1,0,39);");
code("trChangeTerrainHeight(4,p*8+3,11,p*8-2,2,false);");
code("trChangeTerrainHeight(18,p*8+3,27,p*8-2,2,false);");
code("PaintAtlantisArea(34-1, p*8-1, 34+1, p*8+1,0,39);");
code("trChangeTerrainHeight(34-1, p*8-1, 34+2, p*8+2,2,false);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", 34*2, p*16, 270);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Zebra\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitHighlight(100, true);");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("CreateCroc(p,14,16*p,90);");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xPlayerUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("xSetInt(dPlayerData, xCrocSprintRechargeTimer, trTime());");
code("xSetInt(dPlayerData, xCrocSprintRechargeTime, xGetInt(dPlayerData, xCrocSprintRechargeTime)/4);");
code("if(trCurrentPlayer() == p){");
code("trCounterAddTime(\"cdtutorial\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Swim to the first island.\", -1);");
code("}");
code("}");
code("playSound(\"\xpack\xcinematics\6_a\music.mp3\");");
code("refreshPassability();");
code("xsEnableRule(\"Animations\");");
code("xsEnableRule(\"CrocTutorialDone\");");
code("trDelayedRuleActivation(\"CrocMechanicLoops\");");
code("trDelayedRuleActivation(\"CrocTutorialLoops\");");
code("if(QuickStart == 0){");
code("startNPCDialog(10);");
code("}");
code("refreshPassability();");
code("uiZoomToProto(\"\"+CrocProto);");
code("uiLookAtProto(\"\"+CrocProto);");
code("xsDisableSelf();");
code("xsEnableRule(\"Swimming\");");
code("}");
code("}");
code("rule Swimming");
code("inactive");
code("highFrequency");
code("{");
code("vector temppos = vector(0,0,0);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("temppos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("float tempheight = (trGetWaterHeight(xsVectorGetX(temppos)/2,");
code("xsVectorGetZ(temppos)/2)-trGetTerrainHeight(xsVectorGetX(temppos)/2, xsVectorGetZ(temppos)/2));");
code("if(xGetBool(dPlayerData, xSwimming) == false){");
code("if(tempheight >= 1.25){");
code("xSetBool(dPlayerData, xSwimming, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitOverrideAnimation(3, 0, true, true, -1, 0);");
code("if(xGetString(dPlayerData, xCrocProto) == CrocProto){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetSelectedScale(0,2,0);");
code("}");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 1, xGetFloat(dPlayerData, xCrocWaterSpeed));");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 1, xGetFloat(dPlayerData, xCrocWaterSpeed));");
code("}");
code("}");
code("else{");
code("if(tempheight < 1.25){");
code("xSetBool(dPlayerData, xSwimming, false);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitOverrideAnimation(15, 0, true, true, -1, 0);");
code("if(xGetString(dPlayerData, xCrocProto) == CrocProto){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetSelectedScale(0,1,0);");
code("}");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 1, xGetFloat(dPlayerData, xCrocLandSpeed));");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 1, xGetFloat(dPlayerData, xCrocLandSpeed));");
code("xSetInt(dPlayerData, xCrocBonusTimer, trTime()+xGetInt(dPlayerData, xCrocBonusTime));");
code("}");
code("}");
code("}");
code("}");
code("rule CrocTutorialLoops");
code("highFrequency");
code("inactive");
code("{");
code("if(TutorialMode){");
code("int temp = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"P\"+p+\"Pos\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if((playerIsPlaying(p) == false) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("xSetBool(dPlayerData, xPlayerActive, false);");
code("PlayersActive = PlayersActive-1;");
code("trPaintWaterColor(vector(1,0,0), 0,((p*8)-2),40,((p*8+4)-2));");
code("trUnitSelectClear();");
code("for(a = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("if(xGetInt(dTemp, xExtra) == p){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("}");
code("}");
code("if((trVectorQuestVarGetX(\"P\"+p+\"Pos\") > 38) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0) &&");
code("(1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 0)){");
code("if(trCurrentPlayer() == p){");
code("startNPCDialog(11);");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 1);");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAddTime(\"cdtutoriala\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Press 'Q' to sprint.\", -1);");
code("}");
code("}");
code("if((trVectorQuestVarGetX(\"P\"+p+\"Pos\") > 56) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0) &&");
code("(1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 1)){");
code("if(trCurrentPlayer() == p){");
code("startNPCDialog(12);");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 2);");
code("trCounterAbort(\"cdtutoriala\");");
code("trCounterAddTime(\"cdtutoriala\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Press 'W' to eat\", -1);");
code("}");
code("}");
code("if((1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 3) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("trQuestVarSet(\"P\"+p+\"DoneTutorial\", 1);");
code("trQuestVarModify(\"PlayersDoneTutorial\", \"+\", 1);");
code("temp = 1*trQuestVarGet(\"PlayersDoneTutorial\");");
code("trPaintTerrain(5,((p*8)-2),40,((p*8+4)-2),CliffType,CliffSubType);");
code("trPaintWaterColor(vector(0,1,0), 0,((p*8)-2),40,((p*8+4)-2));");
code("trUnitSelectClear();");
code("for(a = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("if(xGetInt(dTemp, xExtra) == p){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trClearCounterDisplay();");
code("trSetCounterDisplay(\"<color={PlayerColor(\" + GreenText() + \")}>Tutorial complete: \" + temp + \" / \" + PlayersActive);");
code("if((temp == 1) && (PlayersActive > 1)){");
code("xsEnableRule(\"TutorialTimeout\");");
code("}");
code("if(trCurrentPlayer() == p){");
code("playSound(\"ageadvance.wav\");");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAbort(\"cdtutoriala\");");
code("}");
code("}");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if((trUnitAlive() == false) && (xGetBool(dPlayerData, xPlayerActive) == true) &&");
code("(1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("CreateCroc(p, 14, p*16, 90);");
code("}");
code("if((trPlayerUnitCountSpecific(p, CrocProto) == 0) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("CreateCroc(p, 14, p*16, 90);");
code("}");
code("if((trVectorQuestVarGetZ(\"P\"+p+\"Pos\") > (p*16+8)) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitTeleport(trVectorQuestVarGetX(\"P\"+p+\"Pos\"),3,p*16);");
code("}");
code("if((trVectorQuestVarGetZ(\"P\"+p+\"Pos\") < (p*16-8)) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitTeleport(trVectorQuestVarGetX(\"P\"+p+\"Pos\"),3,p*16);");
code("}");
code("}");
code("}");
code("}");
code("rule CrocTutorialDone");
code("highFrequency");
code("inactive");
code("{");
code("if((PlayersActive == 1*trQuestVarGet(\"PlayersDoneTutorial\")) && (PlayersActive > 0)){");
code("xsDisableSelf();");
code("xsDisableRule(\"CrocTutorialLoops\");");
code("xsEnableRule(\"BuildCrocArea\");");
code("trClearCounterDisplay();");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAbort(\"cdtutoriala\");");
code("trCounterAbort(\"cdtutorialtimeout\");");
code("trQuestVarSet(\"PlayersDoneTutorial\", 0);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,1,1,true);");
code("Stage = 4;");
code("characterDialog(ActName(Stage), \" \", ActIcon(Stage));");
code("trSetFogAndBlackmap(true,true);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("xResetDatabase(dTemp);");
code("TutorialMode = false;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xCrocSprintRechargeTime, xGetInt(dPlayerData, xCrocSprintRechargeTime)*4);");
code("}");
code("}");
code("}");
code("rule CrocMechanicLoops");
code("highFrequency");
code("inactive");
code("{");
code("if(Stage == 4){");
code("timediff2 = 0.001 * (trTimeMS() - timelast2);");
code("timelast2 = trTimeMS();");
code("int anim = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(trPlayerResourceCount(p, \"Gold\") > 0){");
code("trPlayerGrantResources(p, \"Gold\", -100000);");
code("if(xGetBool(dPlayerData, xReadyToLeave) == false){");
code("if(trTime() >= xGetInt(dPlayerData, xCrocSprintRechargeTimer)){");
code("if(xGetBool(dPlayerData, xSwimming) == false){");
code("if(trTime() < xGetInt(dPlayerData, xCrocBonusTimer)){");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 1, xGetFloat(dPlayerData, xCrocLandSpeed)*xGetFloat(dPlayerData,");
code("xCrocSprintSpeed)*1.25);");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 1, xGetFloat(dPlayerData, xCrocLandSpeed)*xGetFloat(dPlayerData,");
code("xCrocSprintSpeed)*1.25);");
code("}");
code("else{");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 1, xGetFloat(dPlayerData, xCrocLandSpeed)*xGetFloat(dPlayerData,");
code("xCrocSprintSpeed));");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 1, xGetFloat(dPlayerData, xCrocLandSpeed)*xGetFloat(dPlayerData,");
code("xCrocSprintSpeed));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitOverrideAnimation(13, 0, true, true, -1, 0);");
code("}");
code("else{");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 1, xGetFloat(dPlayerData, xCrocWaterSpeed)*xGetFloat(dPlayerData,");
code("xCrocSprintSpeed));");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 1, xGetFloat(dPlayerData, xCrocWaterSpeed)*xGetFloat(dPlayerData,");
code("xCrocSprintSpeed));");
code("}");
code("xSetInt(dPlayerData, xCrocSprintRechargeTimer, trTime()+xGetInt(dPlayerData,");
code("xCrocSprintRechargeTime)+(xGetInt(dPlayerData, xCrocSprintDuration)/1000));");
code("xSetInt(dPlayerData, xCrocSprintEndTime, trTimeMS()+xGetInt(dPlayerData, xCrocSprintDuration));");
code("xSetInt(dPlayerData, xCrocSprintState, 1);");
code("if(trCurrentPlayer() == p){");
code("trCounterAddTime(\"sprinttooltip\"+p, xGetInt(dPlayerData, xCrocSprintDuration)/1000, 0, \"Sprint active\", -1);");
code("}");
code("}");
code("else{");
code("ColouredChatToPlayer(p, \"1,0,0\" ,\"Sprint not ready, wait \" + (xGetInt(dPlayerData,");
code("xCrocSprintRechargeTimer)-trTime()) + \" seconds!\");");
code("if(trCurrentPlayer() == p){");
code("playSound(\"cantdothat.wav\");");
code("}");
code("}");
code("}");
code("}");
code("if(trPlayerResourceCount(p, \"Wood\") > 0){");
code("trPlayerGrantResources(p, \"Wood\", -100000);");
code("if(TutorialMode == true){");
code("playSound(\"crocsnap.wav\");");
code("if(trCountUnitsInArea(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"),0, \"Zebra\", 5) == 1){");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 3);");
code("}");
code("if(QuickStart != 0){");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 3);");
code("}");
code("}");
code("else{");
code("for(n = xGetDatabaseCount(dEdibles) ; > 0){");
code("xDatabaseNext(dEdibles);");
code("if(trCountUnitsInArea(\"\"+xGetInt(dEdibles, xUnitID),p,xGetString(dPlayerData, xCrocProto), 5) > 0){");
code("xUnitSelect(dEdibles, xUnitID);");
code("trUnitHighlight(1, true);");
code("if(xGetInt(dEdibles, xType) == 1){");
code("if(xGetInt(dEdibles, xSubtype) == 0){");
code("xUnitSelect(dEdibles, xUnitID);");
code("trDamageUnit(1000);");
code("xFreeDatabaseBlock(dEdibles);");
code("Zebras = Zebras-1;");
code("if(trCurrentPlayer() == p){");
code("playSound(\"crocsnap.wav\");");
code("}");
code("trQuestVarModify(\"P\"+p+\"FountainMsg\", \"+\", 1);");
code("if(1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 1){");
code("if(trCurrentPlayer() == p){");
code("trMessageSetText(\"Now you'll need to eat the deceased Zebra in order to grow. Right click the dead Zebra.\", 7500);");
code("}");
code("}");
code("}");
code("}");
code("if(xGetInt(dEdibles, xType) == 2){");
code("if(xGetInt(dPlayerData, xCrocSize) > 4 ){");
code("if(xGetInt(dEdibles, xSubtype) == 0){");
code("xUnitSelect(dEdibles, xUnitID);");
code("trDamageUnit(1000);");
code("xFreeDatabaseBlock(dEdibles);");
code("xSetFloat(dPlayerData, xCrocFood, xGetFloat(dPlayerData, xCrocFood)+2);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"crocsnap.wav\");");
code("playSound(\"spidermaledeath\" + iModulo(6, (trTime())+1) + \".wav\");");
code("}");
code("}");
code("}");
code("}");
code("if(xGetInt(dEdibles, xType) == 3){");
code("if(xGetInt(dPlayerData, xCrocSize) > 2 ){");
code("if(xGetInt(dEdibles, xSubtype) == 0){");
code("xUnitSelect(dEdibles, xUnitID);");
code("trDamageUnit(1000);");
code("xFreeDatabaseBlock(dEdibles);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"crocsnap.wav\");");
code("}");
code("}");
code("}");
code("}");
code("if(xGetInt(dEdibles, xType) == 4){");
code("if(xGetInt(dPlayerData, xCrocSize) > 9 ){");
code("if(xGetInt(dEdibles, xSubtype) == 0){");
code("xUnitSelect(dEdibles, xUnitID);");
code("trDamageUnit(1000);");
code("xFreeDatabaseBlock(dEdibles);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"crocsnap.wav\");");
code("}");
code("}");
code("}");
code("}");
code("if(xGetInt(dEdibles, xType) == 5){");
code("if(xGetInt(dPlayerData, xCrocSize) > 7 ){");
code("if(xGetInt(dEdibles, xSubtype) == 0){");
code("xUnitSelect(dEdibles, xUnitID);");
code("trDamageUnit(1000);");
code("xFreeDatabaseBlock(dEdibles);");
code("xSetFloat(dPlayerData, xCrocFood, xGetFloat(dPlayerData, xCrocFood)+3);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"crocsnap.wav\");");
code("playSound(\"spidermaledeath\" + iModulo(6, (trTime())+1) + \".wav\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if(xGetDatabaseCount(dHelp) > 0){");
code("for(n = xGetDatabaseCount(dHelp); > 0){");
code("xDatabaseNext(dHelp);");
code("if(trCountUnitsInArea(\"\"+xGetInt(dHelp, xUnitID),p,xGetString(dPlayerData, xCrocProto), 5) > 0){");
code("xUnitSelect(dHelp, xUnitID);");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");
code("xUnitSelect(dHelp, xUnitID);");
code("trUnitSetAnimationPath(\"0,1,1,0,0,0,0\");");
code("xUnitSelect(dHelp, xSubID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dHelp);");
code("if(iModulo(3, trTimeMS()) == 0){");
code("PlayerChoice(p, \"Choose your help\", \"Vision\", 1, \"Flare nearest zebra\", 49, 10000);");
code("}");
code("else if(iModulo(2, trTimeMS()) == 0){");
code("PlayerChoice(p, \"Choose your help\", \"Spawn 2 zebras\", 50, \"+4 food\", 52, 10000);");
code("}");
code("else{");
code("PlayerChoice(p, \"Choose your help\", \"Restoration\", 2, \"Spawn zebra here\", 51, 10000);");
code("}");
code("}");
code("}");
code("}");
code("if(xGetDatabaseCount(dRelics) > 0){");
code("for(n = xGetDatabaseCount(dRelics); > 0){");
code("xDatabaseNext(dRelics);");
code("if(trCountUnitsInArea(\"\"+xGetInt(dRelics, xUnitID),p,xGetString(dPlayerData, xCrocProto), 5) > 0){");
code("xUnitSelect(dRelics, xUnitID);");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");
code("xUnitSelect(dRelics, xUnitID);");
code("trUnitSetAnimationPath(\"0,1,1,1,0,0,0\");");
code("xUnitSelect(dRelics, xSubID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dRelics);");
code("SpawnRelic(1);");
code("xSetInt(dPlayerData, xRelics, xGetInt(dPlayerData, xRelics)+1);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"relicselect.wav\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if(trPlayerResourceCount(p, \"Food\") > 0){");
code("trPlayerGrantResources(p, \"Food\", -100000);");
code("if(xGetInt(dPlayerData, xRelics) > 1){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"Petsuchos\"));");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("float scale = 0.25*xGetInt(dPlayerData, xCrocSize)+0.75;");
code("trSetScale(scale);");
code("xUnitSelect(dPlayerData, xSpyID);");
code("trMutateSelected(kbGetProtoUnitID(\"Increase Prosperity Small\"));");
code("trSetScale(0);");
code("xSetString(dPlayerData, xCrocProto, \"Petsuchos\");");
code("xSetInt(dPlayerData, xCrocRangedTime, trTime()+15);");
code("xSetInt(dPlayerData, xRelics, xGetInt(dPlayerData, xRelics)-2);");
code("}");
code("}");
code("if(trTimeMS() > xGetInt(dPlayerData, xCrocSprintEndTime)){");
code("if(xGetInt(dPlayerData, xCrocSprintState) == 1){");
code("if(xGetBool(dPlayerData, xSwimming) == false){");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 1, xGetFloat(dPlayerData, xCrocLandSpeed));");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 1, xGetFloat(dPlayerData, xCrocLandSpeed));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitOverrideAnimation(15, 0, true, true, -1, 0);");
code("}");
code("else{");
code("modifyProtounitAbsolute(\"\"+CrocProto, p, 1, xGetFloat(dPlayerData, xCrocWaterSpeed));");
code("modifyProtounitAbsolute(\"Petsuchos\", p, 1, xGetFloat(dPlayerData, xCrocWaterSpeed));");
code("}");
code("xSetInt(dPlayerData, xCrocSprintState, 0);");
code("if(trCurrentPlayer() == p){");
code("trCounterAddTime(\"sprinttooltip\"+p, xGetInt(dPlayerData, xCrocSprintRechargeTimer)-trTime(), 0, \"Sprint recharging\",");
code("-1);");
code("}");
code("if(trCurrentPlayer() == p){");
code("playSound(\"godpowerfailed.wav\");");
code("}");
code("}");
code("}");
code("if(xGetString(dPlayerData, xCrocProto) == \"Petsuchos\"){");
code("if(trTime() > xGetInt(dPlayerData, xCrocRangedTime)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+CrocProto));");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trSetSelectedScale(0,1,0);");
code("xUnitSelect(dPlayerData, xSpyID);");
code("trMutateSelected(kbGetProtoUnitID(\"Crocodile\"));");
code("float scaleb = 0.25*xGetInt(dPlayerData, xCrocSize)+0.75;");
code("trSetScale(scaleb);");
code("xSetString(dPlayerData, xCrocProto, CrocProto);");
code("if(trCurrentPlayer() == p){");
code("playSound(\"godpowerfailed.wav\");");
code("}");
code("}");
code("}");
code("anim = kbUnitGetAnimationActionType(kbGetBlockID(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")+\"\"));");
code("if(anim == 5){");
code("xSetFloat(dPlayerData, xCrocFood, xGetFloat(dPlayerData, xCrocFood)+timediff2*0.4);");
code("}");
code("}");
code("}");
code("}");
}
void ActCrocodile() {
code("void AskQuestion(int p = 0){");
code("xSetPointer(dPlayerData, p);");
code("trQuestVarSetFromRand(\"temp\", 1, 1*trQuestVarGet(\"MaxQNumber\"));");
code("PlayerChoice(p, trStringQuestVarGet(\"Question\"+1*trQuestVarGet(\"temp\")), \"True\", 44, \"False\", 45, 20000);");
code("if(iModulo(2, 1*trQuestVarGet(\"temp\")) == 0){");
code("xSetInt(dPlayerData, xQuestionAnswer, 0);");
code("}");
code("else{");
code("xSetInt(dPlayerData, xQuestionAnswer, 1);");
code("}");
code("}");
code("rule BuildCrocArea");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("TutorialMode = false;");
code("createCrocArea();");
code("xsDisableSelf();");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,100,800,false);");
code("uiZoomToProto(\"\"+CrocProto);");
code("uiLookAtProto(\"\"+CrocProto);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trDelayedRuleActivation(\"CrocMinigameDetect\");");
code("trDelayedRuleActivation(\"TEST\");");
code("trDelayedRuleActivation(\"CrocEndZoneSee\");");
code("trDelayedRuleActivation(\"CrocAllDead\");");
code("trDelayedRuleActivation(\"CrocPoacherTimer\");");
code("xsEnableRule(\"CrocPoacherMovement\");");
code("ColouredIconChat(\"1,0.5,0\", ActIcon(Stage), \"<u>\" + ActName(Stage) + \"</u>\");");
code("ColouredChat(\"0.0,0.8,0.2\", \"Use 'W' to kill and eat zebras to grow.\");");
code("ColouredChat(\"0.0,0.8,0.2\", \"As always watch out for poachers.\");");
code("ColouredChat(\"0.0,0.8,0.2\", \"Grow at least one player to level 7.\");");
code("xsEnableRule(\"PlayMusic\");");
code("PlayersDead = 0;");
code("timediff = trTimeMS();");
code("timelast = trTimeMS();");
code("trDelayedRuleActivation(\"CrocActLoops\");");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xCrocSize, 1);");
code("xSetFloat(dPlayerData, xCrocNext, 5*xGetInt(dPlayerData, xCrocSize));");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 0);");
code("}");
code("trQuestVarSet(\"NextPoacherSpawn\", trTime()+220);");
code("trQuestVarSet(\"NextFoodSpawn\", trTime()+90);");
code("SpawnEdible(cNumberNonGaiaPlayers*2);");
code("trRateConstruction(20);");
code("SpawnCrocPoacher1(xsMax(4, cNumberNonGaiaPlayers+2));");
code("SpawnCrocPoacher2(xsMax(3, cNumberNonGaiaPlayers));");
code("modifyProtounitAbsolute(\"Chu Ko Nu\", cNumberNonGaiaPlayers, 0, 5);");
code("modifyProtounitAbsolute(\"Chu Ko Nu\", cNumberNonGaiaPlayers, 12, 3);");
code("modifyProtounitAbsolute(\"Chu Ko Nu\", cNumberNonGaiaPlayers, 26, 0);");
code("modifyProtounitAbsolute(\"Chu Ko Nu\", cNumberNonGaiaPlayers, 31, 1);");
code("ActPart = 1;");
code("CrocTarget = 5*PlayersActive;");
code("SpawnRelic(PlayersActive);");
code("}");
code("}");
code("rule CrocPoacherTimer");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > 1*trQuestVarGet(\"NextPoacherSpawn\")) {");
code("if(InMinigame == false){");
code("if(Stage == 4){");
code("SpawnEdible(cNumberNonGaiaPlayers+1);");
code("trQuestVarSet(\"NextPoacherSpawn\", trTime()+40+iModulo(90, trTimeMS()));");
code("SpawnCrocPoacher1(xsMin(4, cNumberNonGaiaPlayers+2));");
code("if(CrocProgress < 2*PlayersActive){");
code("SpawnCrocPoacher2(xsMax(3, cNumberNonGaiaPlayers));");
code("}");
code("if(CrocProgress >= 2*PlayersActive){");
code("SpawnCrocPoacher3(1);");
code("SpawnEdible(1);");
code("}");
code("if(CrocProgress >= 3*PlayersActive){");
code("SpawnCrocPoacher4(iModulo(2, trTime())+1);");
code("trOverlayText(\"Super Poachers Spawning...\", 5.0,-1,-1,600);");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("}");
code("if(CrocProgress >= 4*PlayersActive){");
code("SpawnCrocPoacher4(xsMax(1,PlayersActive-2));");
code("}");
code("if(CrocProgress >= 5*PlayersActive){");
code("SpawnCrocPoacher4(xsMax(1,PlayersActive-2));");
code("SpawnCrocPoacher3(1);");
code("}");
code("if(1*trQuestVarGet(\"AllowS4Uber\") > 0){");
code("trOverlayText(\"Uber Poacher Spawning... run!\", 5.0,-1,-1,600);");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("UberCrocPoacher(1);");
code("trQuestVarModify(\"NextPoacherSpawn\", \"-\", 30);");
code("}");
code("if(1*trQuestVarGet(\"FirstBuffer\") == 0){");
code("trQuestVarModify(\"NextPoacherSpawn\", \"+\", 40);");
code("trQuestVarSet(\"FirstBuffer\", 1);");
code("SpawnEdible(2);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("rule CrocFoodTimer");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > 1*trQuestVarGet(\"NextFoodSpawn\")) {");
code("if(Stage == 4){");
code("trQuestVarSet(\"NextFoodSpawn\", trTime()+30+iModulo(120, trTimeMS()));");
code("if(Zebras < PlayersActive*2){");
code("SpawnEdible(xsMax(4, CrocProgress));");
code("}");
code("}");
code("}");
code("}");
code("rule CrocActLoops");
code("highFrequency");
code("inactive");
code("{");
code("if(Stage == 4){");
code("timediff = 0.001 * (trTimeMS() - timelast);");
code("timelast = trTimeMS();");
code("tempV = vector(0,0,0);");
code("int temp = 0;");
code("if(xGetDatabaseCount(dMissiles) > 0){");
code("DoMissile();");
code("}");
code("if(xGetDatabaseCount(dBurner) > 0){");
code("for(a = xGetDatabaseCount(dBurner); > 0){");
code("xDatabaseNext(dBurner);");
code("if(trCountUnitsInArea(\"\"+xGetInt(dBurner, xUnitID),0, \"Palm\", 2) > 0){");
code("trUnitSelectClear();");
code("xUnitSelect(dBurner, xUnitID);");
code("trUnitChangeProtoUnit(\"Palm\");");
code("tempV = kbGetBlockPosition(\"\"+xGetInt(dBurner, xUnitID));");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreateV(0, \"Dwarf\", tempV);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Meteor Impact Ground\");");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreateV(0, \"Dwarf\", tempV);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Underworld Smoke\");");
code("playSound(\"meteorbighit.wav\");");
code("playSound(\"forestfirebirth.wav\");");
code("xAddDatabaseBlock(dDestroyMe, true);");
code("xSetInt(dDestroyMe, xDestroyName, temp);");
code("xSetInt(dDestroyMe, xDestroyTime, trTimeMS()+6000);");
code("trUnitSelectClear();");
code("xUnitSelect(dBurner, xUnitID);");
code("trTechInvokeGodPower(0, \"Forest Fire\", vector(0,0,0), vector(0,0,0));");
code("xFreeDatabaseBlock(dBurner);");
code("}");
code("}");
code("}");
code("for(a = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("if(trUnitAlive() == false){");
code("xFreeDatabaseBlock(dPoachers);");
code("PoachersDead = PoachersDead+1;");
code("}");
code("}");
code("if(ActPart == 1){");
code("if(CrocProgress >= 7){");
code("ActPart = 2;");
code("}");
code("}");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((playerIsPlaying(p) == false) && (xGetBool(dPlayerData, xPlayerActive) == true) && (xGetBool(dPlayerData,");
code("xPlayerDead) == false)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("xSetBool(dPlayerData, xPlayerActive, false);");
code("PlayersActive = PlayersActive-1;");
code("}");
code("if(trCurrentPlayer() == p){");
code("if(xGetInt(dPlayerData, xCrocSize) < 7){");
code("trSetCounterDisplay(\"Level: \" + xGetInt(dPlayerData, xCrocSize) + \"/7\");");
code("}");
code("else{");
code("trSetCounterDisplay(\"Level: \" + xGetInt(dPlayerData, xCrocSize));");
code("}");
code("trCounterAbort(\"CrocC\"+p);");
code("trCounterAbort(\"CrocR\"+p);");
code("trCounterAddTime(\"CrocC\"+p, -100, -10, \"Food: \" + 1*xGetFloat(dPlayerData,");
code("xCrocFood) + \" | Next: \" + 1*xGetFloat(dPlayerData, xCrocNext), -1);");
code("if((xGetInt(dPlayerData, xRelics) == 1) && (xGetString(dPlayerData, xCrocProto) == CrocProto)){");
code("trCounterAddTime(\"CrocR\"+p, -100, -10, \"Gold: \" + 1*xGetInt(dPlayerData, xRelics) + \"/2\", -1);");
code("}");
code("if((xGetInt(dPlayerData, xRelics) > 1) && (xGetString(dPlayerData, xCrocProto) == CrocProto)){");
code("trCounterAddTime(\"CrocR\"+p, -100, -10, \"Press E for temporary ranged attack\", -1);");
code("}");
code("}");
code("if((xGetBool(dPlayerData, xStopDeath) == false) && (trPlayerUnitCountSpecific(p, \"\"+CrocProto) == 0) &&");
code("(trPlayerUnitCountSpecific(p, \"Prisoner\") == 0) && (trPlayerGetPopulation(p) == 0) && (xGetBool(dPlayerData,");
code("xPlayerActive) == true) && (xGetBool(dPlayerData, xPlayerDead) == false) && (InMinigame == false)){");
code("PlayersDead = PlayersDead+1;");
code("xSetBool(dPlayerData, xPlayerDead, true);");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is dead!\");");
code("PlayerColouredChatToSelf(p, \"You'll be able to join the next act if your team pass this one.\");");
code("trPlayerKillAllGodPowers(p);");
code("xSetVector(dPlayerData, xDeathVector, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("trTechGodPower(1, \"Rain\", 1);");
code("if(iModulo(2, trTime()) == 0){");
code("playSound(\"\dialog\ko\skul062.mp3\");");
code("}");
code("else{");
code("playSound(\"\xpack\xdialog\ko\xkri075.mp3\");");
code("}");
code("}");
code("if(xGetInt(dPlayerData, xHPRegen) > 0){");
code("if(trTime() > xGetInt(dPlayerData, xHPRegenNext)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trDamageUnit(-1*xGetInt(dPlayerData, xHPRegen));");
code("xSetInt(dPlayerData, xHPRegenNext, trTime()+xGetInt(dPlayerData, xHPRegenTime));");
code("}");
code("}");
code("if(xGetFloat(dPlayerData, xCrocFood) >= xGetFloat(dPlayerData, xCrocNext)){");
code("CrocGrow(p);");
code("}");
code("if(InMinigame == true){");
code("if(xGetInt(dPlayerData, xAnswer) > -1){");
code("if(xGetInt(dPlayerData, xQuestionAnswer) == 1){");
code("if(xGetInt(dPlayerData, xAnswer) == 1){");
code("ColouredChatToPlayer(p, \"0,1,0\", \"Correct!\");");
code("xSetInt(dPlayerData, xQuestionsCorrect, xGetInt(dPlayerData, xQuestionsCorrect)+1);");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"favordump.wav\", \"\Yeebaagooon\Zoo Quest\Gem.mp3\");");
code("}");
code("}");
code("else{");
code("ColouredChatToPlayer(p, \"1,0,0\", \"Wrong!\");");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"cantdothat.wav\", \"cantdothat.wav\");");
code("}");
code("}");
code("}");
code("else{");
code("if(xGetInt(dPlayerData, xAnswer) == 0){");
code("ColouredChatToPlayer(p, \"0,1,0\", \"Correct!\");");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"favordump.wav\", \"\Yeebaagooon\Zoo Quest\Gem.mp3\");");
code("}");
code("xSetInt(dPlayerData, xQuestionsCorrect, xGetInt(dPlayerData, xQuestionsCorrect)+1);");
code("}");
code("else{");
code("ColouredChatToPlayer(p, \"1,0,0\", \"Wrong!\");");
code("if(trCurrentPlayer() == p){");
code("playSoundCustom(\"cantdothat.wav\", \"cantdothat.wav\");");
code("}");
code("}");
code("}");
code("xSetInt(dPlayerData, xAnswer, -1);");
code("xSetInt(dPlayerData, xQuestionAnswer, -1);");
code("xSetInt(dPlayerData, xQuestions, xGetInt(dPlayerData, xQuestions)-1);");
code("if(xGetInt(dPlayerData, xQuestions) > 0){");
code("AskQuestion(p);");
code("debugLog(\"Q asked to P\" + p);");
code("debugLog(\"Qs remaining P\"+p+\": \" + xGetInt(dPlayerData, xQuestions));");
code("}");
code("else{");
code("xSetInt(dPlayerData, xAnswer, -1);");
code("if(xGetInt(dPlayerData, xQuestionsCorrect) > 2){");
code("if(trCurrentPlayer() == p){");
code("playSound(\"xwin.wav\");");
code("}");
code("MinigameWins = MinigameWins+1;");
code("if(iModulo(2, trTime()) == 0){");
code("PlayerChoice(p, \"Choose your reward:\", \"Instant grow\", 35, \"+2 hp regen every 20s\", 46, 10000);");
code("}");
code("else{");
code("PlayerChoice(p, \"Choose your reward:\", \"+2s sprint time\", 47, \"-4s sprint cooldown\", 48, 10000);");
code("}");
code("}");
code("else{");
code("if(trCurrentPlayer() == p){");
code("playSound(\"xlose.wav\");");
code("trOverlayText(\"Minigame Failed!\", 3.0,-1,-1,600);");
code("}");
code("}");
code("PlayersMinigaming = PlayersMinigaming-1;");
code("}");
code("}");
code("}");
code("if((xGetInt(dPlayerData, xQuestions) > 0) && (1*trQuestVarGet(\"P\"+p+\"ChoiceDialog\") == 0)){");
code("AskQuestion(p);");
code("debugLog(\"Saved P\" + p);");
code("}");
code("}");
code("if((PlayersActive == PlayersReadyToLeave+PlayersDead) && (PlayersDead != PlayersActive)){");
code("xsEnableRule(\"CrocExit\");");
code("}");
code("if(xGetDatabaseCount(dChests) > 0){");
code("xDatabaseNext(dChests);");
code("int n = xGetInt(dChests, xUnitID);");
code("xUnitSelect(dChests,xUnitID);");
code("if(trCountUnitsInArea(\"\"+n,0,\"Great Box\", 1) == 0){");
code("xFreeDatabaseBlock(dChests);");
code("debugLog(\"Chest removed\" + n);");
code("debugLog(\"\"+kbGetProtoUnitID(\"\"+n));");
code("ChestsTotal = ChestsTotal-1;");
code("}");
code("if (trUnitIsSelected()) {");
code("uiClearSelection();");
code("startNPCDialog(5);");
code("}");
code("trUnitSelectClear();");
code("for(pl=1 ; < cNumberNonGaiaPlayers){");
code("if(trCountUnitsInArea(\"\"+n,pl,xGetString(dPlayerData, xCrocProto), 5) > 0){");
code("xUnitSelect(dChests,xUnitID);");
code("trUnitSetAnimation(\"SE_Great_Box_Opening\",false,-1);");
code("xUnitSelect(dChests,xUnitID);");
code("trUnitHighlight(3, false);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Pyramid Osiris Xpack\"));");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trSetSelectedScale(100,0,0);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitOverrideAnimation(6, 0, false, true, -1);");
code("trUnitSelectClear();");
code("xUnitSelect(dChests, xUnlockUnitID);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0\");");
code("xAddDatabaseBlock(dDestroyMe, true);");
code("xSetInt(dDestroyMe, xDestroyName, xGetInt(dChests, xUnlockUnitID));");
code("xSetInt(dDestroyMe, xDestroyTime, trTimeMS()+3000);");
code("ChestsFound = ChestsFound+1;");
code("xFreeDatabaseBlock(dChests);");
code("trQuestVarSetFromRand(\"temp\", 1, 3);");
code("trQuestVarSetFromRand(\"temp2\", 1, 3);");
code("if(1*trQuestVarGet(\"temp\") == 1){");
code("if(1*trQuestVarGet(\"temp2\") == 1){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+5 hp\", 36, \"+4 LOS\", 37, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 2){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+5 hp\", 36, \"+1s sprint time\", 40, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 3){");
code("PlayerChoice(pl, \"Choose your reward:\", \"Instant grow\", 35, \"+1hp regen every 20s\", 43, 10000);");
code("}");
code("}");
code("if(1*trQuestVarGet(\"temp\") == 2){");
code("if(1*trQuestVarGet(\"temp2\") == 1){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+4 LOS\", 37, \"+0.4 land speed\", 38, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 2){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+4 LOS\", 37, \"+0.6 swim speed\", 39, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 3){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+0.3 sprint speed multiplier\", 42, \"-2s sprint cd\", 41, 10000);");
code("}");
code("}");
code("if(1*trQuestVarGet(\"temp\") == 3){");
code("if(1*trQuestVarGet(\"temp2\") == 1){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+1s sprint time\", 40, \"-2s sprint cd\", 41, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 2){");
code("PlayerChoice(pl, \"Choose your reward:\", \"Instant grow\", 35, \"+0.3 sprint speed multiplier\", 42, 10000);");
code("}");
code("if(1*trQuestVarGet(\"temp2\") == 3){");
code("PlayerChoice(pl, \"Choose your reward:\", \"+0.4 land speed\", 38, \"+0.6 swim speed\", 39, 10000);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if(Zebras <= PlayersActive/2){");
code("SpawnEdible(cNumberNonGaiaPlayers);");
code("SpawnCrocPoacher1(2);");
code("SpawnCrocPoacher2(1);");
code("}");
code("}");
code("}");
code("rule CrocLeave");
code("inactive");
code("highFrequency");
code("{");
code("int STOP = 0;");
code("trQuestVarModify(\"PlayerCycle\", \"+\", 1);");
code("if(1*trQuestVarGet(\"PlayerCycle\") > cNumberNonGaiaPlayers){");
code("trQuestVarSet(\"PlayerCycle\", 1);");
code("}");
code("int p = 1*trQuestVarGet(\"PlayerCycle\");");
code("xSetPointer(dPlayerData, p);");
code("tempV = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("if(xGetBool(dPlayerData, xReadyToLeave) == true){");
code("if((trGetTerrainType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) != getTerrainType(LeaveTerrain)) ||");
code("(trGetTerrainSubType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) != getTerrainSubType(LeaveTerrain))){");
code("xSetBool(dPlayerData, xReadyToLeave, false);");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("PlayersReadyToLeave = PlayersReadyToLeave-1;");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+CrocProto));");
code("PlayerColouredChatToSelf(p, \"You have left the extraction zone\");");
code("STOP = 1;");
code("}");
code("}");
code("if((xGetBool(dPlayerData, xReadyToLeave) == false) && (STOP == 0) && (xGetBool(dPlayerData, xPlayerDead) == false)){");
code("if((trGetTerrainType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) == getTerrainType(LeaveTerrain)) &&");
code("(trGetTerrainSubType(1*xsVectorGetX(tempV)/2,1*xsVectorGetZ(tempV)/2) == getTerrainSubType(LeaveTerrain))){");
code("xSetBool(dPlayerData, xReadyToLeave, true);");
code("xSetBool(dPlayerData, xStopDeath, true);");
code("PlayersReadyToLeave = PlayersReadyToLeave+1;");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"Prisoner\"));");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is ready to leave\");");
code("if(trQuestVarGet(\"P\"+p+\"LeaveMsg\") == 0){");
code("trQuestVarSet(\"P\"+p+\"LeaveMsg\", 1);");
code("ColouredChatToPlayer(p, \"1,1,0\", \"You cannot use abilities in the extraction zone.\");");
code("ColouredChatToPlayer(p, \"1,1,0\", \"You also cannot die or be attacked.\");");
code("}");
code("}");
code("}");
code("}");
code("rule CrocPoacherMovement");
code("inactive");
code("highFrequency");
code("{");
code("if(xGetDatabaseCount(dPoachers) > 0){");
code("xDatabaseNext(dPoachers);");
code("if(xGetInt(dPoachers, xMoveTime) < trTime()){");
code("trQuestVarSetFromRand(\"x\",0,252);");
code("trQuestVarSetFromRand(\"y\",30,80);");
code("trQuestVarSetFromRand(\"z\",0,252);");
code("xSetInt(dPoachers, xMoveTime, trTime()+1*trQuestVarGet(\"y\"));");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitMoveToPoint(1*trQuestVarGet(\"x\"),5,1*trQuestVarGet(\"z\"),-1,true);");
code("}");
code("}");
code("}");
code("rule CrocEndZoneSee");
code("inactive");
code("highFrequency");
code("{");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if(trUnitDistanceToUnit(\"\"+FlagUnitID) < 23){");
code("vector flagV = kbGetBlockPosition(\"\"+FlagUnitID);");
code("for(x=1 ; < cNumberNonGaiaPlayers){");
code("trMinimapFlare(x,10,flagV,true);");
code("}");
code("UnitCreate(0, \"Revealer\", xsVectorGetX(flagV),xsVectorGetZ(flagV),0);");
code("trMessageSetText(\"The extraction zone has been found. Gather here when you are ready to end the act.\", 8000);");
code("playSound(\"examinationbirth.wav\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+FlagUnitID);");
code("trUnitHighlight(10, true);");
code("trDelayedRuleActivation(\"CrocLeave\");");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("rule CrocAllDead");
code("inactive");
code("minInterval 5");
code("{");
code("if((Stage == 4) && (PlayersDead == PlayersActive)){");
code("trShowWinLose(\"All players are dead\", \"xlose.wav\");");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trSetPlayerDefeated(p);");
code("}");
code("xsDisableSelf();");
code("trEndGame();");
code("}");
code("}");
code("rule CrocMinigameDetect");
code("highFrequency");
code("inactive");
code("{");
code("vector pos = vector(0,0,0);");
code("vector minigame = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"MinigameStartID\"));");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("if(distanceBetweenVectors(minigame, pos, true) < 10){");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeInArea(0,0,\"Palm\", \"Rocket\", 10);");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeProtoUnit(\"Olympus Temple SFX\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Forest Fire SFX\");");
code("PaintAtlantisArea(xsVectorGetX(StageVector)-2,xsVectorGetZ(StageVector)-2,xsVectorGetX(StageVector)+2,");
code("xsVectorGetZ(StageVector)+2,0,53);");
code("refreshPassability();");
code("trMessageSetText(\"Minigame found! Remain in the white square if you wish to play.\", 10000);");
code("trCounterAddTime(\"CDMG\", 12-(QuickStart*2), 0, \"<color={PlayerColor(\"+p+\")}>Minigame Starts\", 38);");
code("MinigameFound = true;");
code("for(x=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, x);");
code("if(x != p){");
code("if(xGetBool(dPlayerData, xPlayerDead) == false){");
code("PlayerChoice(x, \"Participate in minigame?\", \"Yes\", 4, \"No\", 0, 11900);");
code("}");
code("}");
code("}");
code("for(b = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("for(c = xGetDatabaseCount(dMissiles); > 0){");
code("xDatabaseNext(dMissiles);");
code("xUnitSelect(dMissiles, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dMissiles);");
code("}");
code("trMusicStop();");
code("playSound(\"\cinematics\22_in\music 2.mp3\");");
code("xsEnableRule(\"CrocQuizQuestions\");");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("void CrocMinigameGo(int temp = 0){");
code("xsEnableRule(\"MGGOCroc\");");
code("}");
code("rule MGGOCroc");
code("inactive");
code("highFrequency");
code("{");
code("InMinigame = true;");
code("int temp = trGetNextUnitScenarioNameNumber();");
code("int StartX = xsVectorGetX(StageVector);");
code("int StartZ = xsVectorGetZ(StageVector);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(xGetBool(dPlayerData, xPlayerActive)){");
code("trVectorQuestVarSet(\"P\"+p+\"PosMG\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("trVectorQuestVarSet(\"P\"+p+\"PosMG\", trVectorQuestVarGet(\"P\"+p+\"PosMG\")/2);");
code("if((trVectorQuestVarGetX(\"P\"+p+\"PosMG\") > xsVectorGetX(StageVector)-2) &&");
code("(trVectorQuestVarGetX(\"P\"+p+\"PosMG\") < xsVectorGetX(StageVector)+2) &&");
code("(trVectorQuestVarGetZ(\"P\"+p+\"PosMG\") > xsVectorGetZ(StageVector)-2) &&");
code("(trVectorQuestVarGetZ(\"P\"+p+\"PosMG\") < xsVectorGetZ(StageVector)+2)){");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is playing\");");
code("PlayersMinigaming = PlayersMinigaming+1;");
code("xSetBool(dPlayerData, xStopDeath, true);");
code("xSetInt(dPlayerData, xQuestions, 4);");
code("AskQuestion(p);");
code("if(xGetInt(dPlayerData, xTeleportDue) == 0){");
code("xSetVector(dPlayerData, xVectorHold, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("}");
code("}");
code("}");
code("}");
code("refreshPassability();");
code("if(PlayersMinigaming == 0){");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitDestroy();");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitDestroy();");
code("trMessageSetText(\"Nobody was on the white tiles. Minigame cancelled.\", 5000);");
code("for(b = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(xGetString(dPoachers, xPoacherType));");
code("}");
code("InMinigame = false;");
code("xsEnableRule(\"PlayMusic\");");
code("trPaintTerrain(xsVectorGetX(StageVector)-1,xsVectorGetZ(StageVector)-1,xsVectorGetX(StageVector)+1,");
code("xsVectorGetZ(StageVector)+1,0,51);");
code("refreshPassability();");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((trPlayerUnitCountSpecific(p, \"\"+CrocProto) == 0) && (xGetBool(dPlayerData, xPlayerDead) == false)){");
code("CreateCroc(p, xsVectorGetX(StageVector), xsVectorGetZ(StageVector), 0);");
code("}");
code("}");
code("}");
code("else{");
code("trMessageSetText(\"This minigame is a quiz, get 3/4 questions right to win!\", 8000);");
code("trCounterAddTime(\"cdCrocminigame\", 90,0,\"<color={PlayerColor(2)}>Minigame time remaining\", 39);");
code("playSoundCustom(\"\xpack\xcinematics\6_a\music.mp3\", \"\Yeebaagooon\Zoo Quest\Minigame4.mp3\");");
code("xsEnableRule(\"CrocMinigameEnd\");");
code("}");
code("xsDisableSelf();");
code("}");
code("void CrocMGTimeout(int eventID = 0){");
code("PlayersMinigaming = 0;");
code("}");
code("rule CrocMinigameEnd");
code("inactive");
code("highFrequency");
code("{");
code("if(PlayersMinigaming <= 0){");
code("vector temp = vector(0,0,0);");
code("trPaintTerrain(xsVectorGetX(StageVector)-1,xsVectorGetZ(StageVector)-1,xsVectorGetX(StageVector)+1,");
code("xsVectorGetZ(StageVector)+1,0,51);");
code("refreshPassability();");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((xGetInt(dPlayerData, xTeleportDue) == 1) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("temp = xGetVector(dPlayerData, xVectorHold);");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreateV(p, \"Roc\", temp, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("xSetInt(dPlayerData, xTeleportDue, 0);");
code("}");
code("else if((xGetInt(dPlayerData, xTeleportDue) == 0) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("if(trPlayerUnitCountSpecific(p, \"\"+CrocProto) == 0){");
code("trQuestVarSet(\"P\"+p+\"IG\", trGetNextUnitScenarioNameNumber());");
code("UnitCreateV(p, \"Roc\", temp, 0);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"P\"+p+\"IG\"));");
code("trUnitSelectByQV(\"P\"+p+\"IG\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("}");
code("if(trPlayerUnitCountSpecific(p, \"\"+CrocProto) == 0){");
code("CreateCroc(p, trVectorQuestVarGetX(\"P\"+p+\"PosMG\")*2, trVectorQuestVarGetZ(\"P\"+p+\"PosMG\")*2, 0);");
code("}");
code("xSetBool(dPlayerData, xStopDeath, false);");
code("}");
code("uiZoomToProto(\"\"+CrocProto);");
code("uiLookAtProto(\"\"+CrocProto);");
code("for(b = xGetDatabaseCount(dPoachers); > 0){");
code("xDatabaseNext(dPoachers);");
code("xUnitSelect(dPoachers, xUnitID);");
code("trUnitChangeProtoUnit(xGetString(dPoachers, xPoacherType));");
code("if(xGetString(dPoachers, xPoacherType) == \"Kebenit\"){");
code("xUnitSelect(dPoachers, xUnitID);");
code("trSetScale(0.6);");
code("}");
code("}");
code("trUnitSelectByQV(\"MinigameStartSFX\");");
code("trUnitChangeProtoUnit(\"Olympus Temple SFX\");");
code("trUnitSelectByQV(\"MinigameStartID\");");
code("trUnitChangeProtoUnit(\"Forest Fire SFX\");");
code("xsDisableSelf();");
code("InMinigame = false;");
code("PlayersMinigaming = 0;");
code("trCounterAbort(\"cdCrocminigame\");");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("xsEnableRule(\"PlayMusic\");");
code("}");
code("}");
code("rule CrocExit");
code("inactive");
code("highFrequency");
code("{");
code("trCounterAbort(\"poachtimer\");");
code("xsDisableRule(\"CrocActLoops\");");
code("xsDisableRule(\"CrocAllDead\");");
code("xsDisableRule(\"CrocPoacherMovement\");");
code("xsDisableRule(\"CrocEndZoneSee\");");
code("xsDisableRule(\"CrocLeave\");");
code("xsDisableRule(\"CrocTutorialLoops\");");
code("xsDisableRule(\"CrocMinigameDetect\");");
code("xsDisableRule(\"CrocBonus\");");
code("xsDisableRule(\"MGGOCroc\");");
code("xsDisableRule(\"CrocPoacherTimer\");");
code("xsDisableRule(\"CrocMechanicLoops\");");
code("xsDisableRule(\"CrocFoodTimer\");");
code("xsDisableRule(\"CrocMinigameEnd\");");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("trCounterAbort(\"sprinttooltip\"+p);");
code("trCounterAbort(\"CrocC\"+p);");
code("trCounterAbort(\"CrocR\"+p);");
code("}");
code("trClearCounterDisplay();");
code("xResetDatabase(dBurner);");
code("xsEnableRule(\"ScoreScreenStart\");");
code("xsDisableSelf();");
code("}");
}
void tutorialchicken() {
code("rule TutorialTerrainChicken");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("trCameraCut(vector(-65.460060,123.743729,-65.460060), vector(0.500000,-0.707107,0.500000), vector(0.500000,0.707107,");
code("0.500000), vector(0.707107,0.000000,-0.707107));");
code("xsDisableRule(\"DeerTutorialDone\");");
code("xsDisableRule(\"RhinoTutorialDone\");");
code("xsDisableRule(\"GoatTutorialDone\");");
code("xsDisableRule(\"CrocodileTutorialDone\");");
code("xsDisableRule(\"Jump\");");
code("xsDisableRule(\"JumpEnd\");");
code("QuickStart = 0;");
code("NewDestroyNumber = trGetNextUnitScenarioNameNumber()-1;");
code("TutorialMode = true;");
code("Stage = 5;");
code("CliffType = 2;");
code("CliffSubType = 13;");
code("clearMap(\"black\", -5.0);");
code("trPaintTerrain(0,0,45,cNumberNonGaiaPlayers*8,CliffType,CliffSubType);");
code("xResetDatabase(dChests);");
code("int temp = 0;");
code("for(t=0 ; < cNumberNonGaiaPlayers){");
code("for(x=0 ; < 40){");
code("if(iModulo(4,x) == 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Cinematic Block\", x*2, t*16+8, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Summoning Tree\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetSelectedScale(0.8,0.4,0.8);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitSetAnimationPath(\"0,1,1,1,1,1,0\");");
code("}");
code("else{");
code("temp = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"temph\",0,360,true);");
code("UnitCreate(0, \"Cinematic Block\", x*2, t*16+8, 1*trQuestVarGet(\"temph\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trMutateSelected(kbGetProtoUnitID(\"Berry Bush\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetScale(2.5);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitOverrideAnimation(2, 0, true, true, -1, 0);");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"PlayersDoneTutorial\", 0);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trUnforbidProtounit(p, \"Storehouse\");");
code("trTechSetStatus(p, 126, 0);");
code("trTechSetStatus(p, 350, 0);");
code("modifyProtounitAbsolute(\"Wadjet Spit\", p, 1, 10);");
code("trTechSetStatus(p, 108, 4);");
code("trPlayerKillAllGodPowers(p);");
code("trForbidProtounit(p, \"Armory\");");
code("trUnforbidProtounit(p, \"Tower\");");
code("modifyProtounitAbsolute(\"Armory\", p, 4, 3);");
code("modifyProtounitAbsolute(\"Tower\", p, 10, 1);");
code("modifyProtounitAbsolute(\"Tower\", p, 4, 4);");
code("trForbidProtounit(p, \"House\");");
code("trForbidProtounit(p, \"Dock\");");
code("trForbidProtounit(p, \"Temple\");");
code("trForbidProtounit(p, \"Settlement Level 1\");");
code("trForbidProtounit(p, \"Wall Connector\");");
code("trForbidProtounit(p, \"Wall Short\");");
code("trForbidProtounit(p, \"Wall Medium\");");
code("trForbidProtounit(p, \"Wall Long\");");
code("trQuestVarSet(\"P\"+p+\"DoneTutorial\", 0);");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 0);");
code("trPaintTerrain(5,((p*8)-2),35,((p*8+4)-2),4,32);");
code("PaintAtlantisArea(6,p*8-1,8,p*8+1,12,1);");
code("trChangeTerrainHeight(4,p*8+3,35+2,p*8-2,2,false);");
code("PaintAtlantisArea(34-1, p*8-1, 34+1, p*8+1,12,1);");
code("xAddDatabaseBlock(dTemp, true);");
code("xSetInt(dTemp, xUnitID, temp);");
code("xSetInt(dTemp, xExtra, p);");
code("CreateChicken(p,14,16*p,90);");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xPlayerUnitID, 1*trQuestVarGet(\"P\"+p+\"Unit\"));");
code("xSetInt(dPlayerData, xS5E, 1);");
code("modifyProtounitAbsolute(\"\"+ChickenProto, p, 0, 150);");
code("if(trCurrentPlayer() == p){");
code("trCounterAddTime(\"cdtutorial\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Use 'Q' to build a tower at the cursor\", -1);");
code("}");
code("trUnforbidProtounit(p, \"Tower\");");
code("trForbidProtounit(p, \"Armory\");");
code("}");
code("playSound(\"\cinematics\16_in\music.mp3\");");
code("refreshPassability();");
code("xsEnableRule(\"Animations\");");
code("xsEnableRule(\"FirstTower\");");
code("xsEnableRule(\"ChickenTutorialDone\");");
code("trDelayedRuleActivation(\"ChickenMechanicLoops\");");
code("trDelayedRuleActivation(\"ChickenTutorialLoops\");");
code("if(QuickStart == 0){");
code("startNPCDialog(14);");
code("}");
code("refreshPassability();");
code("uiZoomToProto(\"\"+ChickenProto);");
code("uiLookAtProto(\"\"+ChickenProto);");
code("xsDisableSelf();");
code("xsEnableRule(\"MissileCheckS5\");");
code("}");
code("}");
code("rule FirstTower");
code("inactive");
code("highFrequency");
code("{");
code("int temp = 0;");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((trPlayerUnitCountSpecific(p, \"Tower\") != 0) && (1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 0)){");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 1);");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(cNumberNonGaiaPlayers, \"Cinematic Block\", 34*2, p*16, 270);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Militia\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitMoveToPoint(2,2,p*16,-1,true);");
code("xAddDatabaseBlock(dEnemies, true);");
code("xSetInt(dEnemies, xUnitID, temp);");
code("if(trCurrentPlayer() == p){");
code("startNPCDialog(15);");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAddTime(\"cdtutorial\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Use 'W' to craft a relic at the cursor\", -1);");
code("}");
code("trUnforbidProtounit(p, \"Armory\");");
code("}");
code("}");
code("}");
code("rule MissileCheckS5");
code("inactive");
code("highFrequency");
code("{");
code("if(xGetDatabaseCount(dMissiles) > 0){");
code("DoMissileStage5();");
code("}");
code("}");
code("void ProcessFreeRelics(int count = 0){");
code("for (x=xsMin(count, xGetDatabaseCount(dFreeRelics)); > 0) {");
code("xDatabaseNext(dFreeRelics);");
code("xUnitSelect(dFreeRelics, xUnitID);");
code("if (trUnitGetIsContained(\"Unit\")) {");
code("for(p=1; < cNumberNonGaiaPlayers) {");
code("if (trUnitIsOwnedBy(p)) {");
code("trMutateSelected(relicProto(xGetInt(dFreeRelics, xRelicType)));");
code("trSetSelectedScale(0,0,-1);");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("if (trCurrentPlayer() == p) {");
code("ColouredChatToPlayer(p, \"1,0.5,0\", relicName(xGetInt(dFreeRelics, xUnitID)));");
code("trSoundPlayFN(\"researchcomplete.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("FunctionRelic(true, p);");
code("trUnitSelectClear();");
code("xUnitSelect(dFreeRelics, xSFXID);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("xAddDatabaseBlock(dHeldRelics, true);");
code("xSetInt(dHeldRelics, xUnitID, 1*xGetInt(dFreeRelics, xUnitID));");
code("xSetInt(dHeldRelics, xRelicType, 1*xGetInt(dFreeRelics, xRelicType));");
code("xSetFloat(dHeldRelics, xRelicStat, 1*xGetFloat(dFreeRelics, xRelicStat));");
code("xSetInt(dHeldRelics, xRelicLevel, xGetInt(dFreeRelics, xRelicLevel));");
code("xFreeDatabaseBlock(dFreeRelics);");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trMutateSelected(kbGetProtoUnitID(\"\"+ChickenProto));");
code("break;");
code("}");
code("}");
code("} else if (trUnitIsSelected()) {");
code("uiClearSelection();");
code("uiMessageBox(relicName(xGetInt(dFreeRelics, xUnitID)));");
code("}");
code("}");
code("}");
code("void ProcessHeldRelics(int count = 1) {");
code("int dropper = 0;");
code("for (x=xsMin(count, xGetDatabaseCount(dHeldRelics)); > 0) {");
code("xDatabaseNext(dHeldRelics);");
code("xUnitSelect(dHeldRelics, xUnitID);");
code("for(p=1; < cNumberNonGaiaPlayers) {");
code("if (trUnitIsOwnedBy(p)) {");
code("dropper = p;");
code("}");
code("}");
code("if (trUnitGetIsContained(\"Unit\") == false) {");
code("FunctionRelic(false, dropper);");
code("ColouredChatToPlayer(dropper, \"1,0.2,0\", relicName(xGetInt(dHeldRelics, xUnitID)) + \" dropped\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xUnitSelect(dHeldRelics, xUnitID);");
code("trUnitChangeProtoUnit(\"Titan Atlantean\");");
code("yFindLatestReverse(\"SFXUnit\", \"Titan Gate Dead\", 0);");
code("DoRelicSFX(1*trQuestVarGet(\"SFXUnit\"), xGetInt(dHeldRelics, xRelicType));");
code("xUnitSelect(dHeldRelics, xUnitID);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xUnitSelect(dHeldRelics, xUnitID);");
code("trSetScale(0.25*xGetInt(dHeldRelics, xRelicLevel)+0.75);");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics, xUnitID, 1*xGetInt(dHeldRelics, xUnitID));");
code("xSetInt(dFreeRelics, xRelicType, 1*xGetInt(dHeldRelics, xRelicType));");
code("xSetFloat(dFreeRelics, xRelicStat, 1*xGetFloat(dHeldRelics, xRelicStat));");
code("xSetInt(dFreeRelics, xSFXID, 1*trQuestVarGet(\"SFXUnit\"));");
code("xSetInt(dFreeRelics, xRelicLevel, 1*xGetInt(dHeldRelics, xRelicLevel));");
code("xFreeDatabaseBlock(dHeldRelics);");
code("break;");
code("}");
code("}");
code("}");
code("void ProcessTowers(int count = 1) {");
code("for (x=xsMin(count, xGetDatabaseCount(dTowers)); > 0) {");
code("xDatabaseNext(dTowers);");
code("if(xGetBool(dTowers, xConstructed) == false){");
code("xUnitSelect(dTowers, xUnitID);");
code("if(trUnitPercentComplete() == 100){");
code("xSetBool(dTowers, xConstructed, true);");
code("}");
code("}");
code("xUnitSelect(dTowers, xUnitID);");
code("if(trUnitAlive() == false){");
code("for(a = xGetDatabaseCount(dEnemyCollision); > 0){");
code("xDatabaseNext(dEnemyCollision);");
code("if(xGetInt(dEnemyCollision, xUnitID) == xGetInt(dTowers, xUnitID)){");
code("xFreeDatabaseBlock(dTowers);");
code("xFreeDatabaseBlock(dEnemyCollision);");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void ProcessMine(int count = 1) {");
code("int p = 0;");
code("if(xGetDatabaseCount(dMines) > 0){");
code("for(a = xGetDatabaseCount(dMines); > 0){");
code("xDatabaseNext(dMines);");
code("p = xGetInt(dMines, xOwner);");
code("xSetPointer(dPlayerData, p);");
code("if(trCountUnitsInArea(\"\"+xGetInt(dMines, xUnitID), cNumberNonGaiaPlayers, \"Unit\", xGetInt(dPlayerData,");
code("xLandmineRange)) > 0){");
code("if(trCountUnitsInArea(\"\"+xGetInt(dMines, xUnitID), cNumberNonGaiaPlayers, \"Dwarf\", xGetInt(dPlayerData,");
code("xLandmineRange)) == 0){");
code("if(trCountUnitsInArea(\"\"+xGetInt(dMines, xUnitID), p, \"Dwarf\", xGetInt(dPlayerData, xLandmineRange)) == 0){");
code("xUnitSelect(dMines, xUnitID);");
code("trDamageUnitsInArea(cNumberNonGaiaPlayers, \"All\", xGetInt(dPlayerData, xLandmineRange)+1, xGetInt(dPlayerData,");
code("xLandmineDamage));");
code("xUnitSelect(dMines, xUnitID);");
code("trUnitChangeProtoUnit(\"Meteor Impact Ground\");");
code("xUnitSelect(dMines, xMineSFX);");
code("trUnitChangeProtoUnit(\"Fire Giant\");");
code("xUnitSelect(dMines, xMineSFX);");
code("trSetScale(0.00001);");
code("xUnitSelect(dMines, xMineSFX);");
code("trDamageUnitPercent(100);");
code("xFreeDatabaseBlock(dMines);");
code("playSound(\"meteorsmallhit.wav\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("void ProcessEnemy(int count = 1) {");
code("int temp = 0;");
code("vector pos = vector(0,0,0);");
code("for (x=xsMin(count, xGetDatabaseCount(dEnemies)); > 0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelect(dEnemies, xUnitID);");
code("if((trUnitPercentDamaged() > 0) && (xGetBool(dEnemies, xMoved) == false)){");
code("xSetBool(dEnemies, xMoved, true);");
code("trUnitMoveToPoint(xsVectorGetX(MapCentre),1,xsVectorGetZ(MapCentre),-1,true);");
code("}");
code("xUnitSelect(dEnemies, xUnitID);");
code("if(trUnitAlive() == false){");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitID));");
code("if(iModulo((10+cNumberNonGaiaPlayers), trTimeMS()) == 0){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(1, \"Cinematic Block\", xsVectorGetX(pos), xsVectorGetZ(pos), 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Medusa\");");
code("xFreeDatabaseBlock(dEnemies);");
code("break;");
code("}");
code("}");
code("trUnitSelectClear();");
code("}");
code("}");
code("rule ChickenMechanicLoops");
code("highFrequency");
code("inactive");
code("{");
code("ProcessFreeRelics(5);");
code("ProcessHeldRelics(5);");
code("ProcessTowers(5);");
code("ProcessEnemy(10);");
code("ProcessMine(1);");
code("vector start = vector(0,0,0);");
code("vector dest = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(trPlayerUnitCountSpecific(p, \"Armory\") > 0){");
code("yFindLatestReverse(\"ArmoryP\"+p, \"Armory\", p);");
code("trUnitSelectByQV(\"ArmoryP\"+p);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectByQV(\"ArmoryP\"+p);");
code("trUnitConvert(0);");
code("if(TutorialMode == true){");
code("ForceRelic(1*trQuestVarGet(\"ArmoryP\"+p),RELIC_ATTACK,1);");
code("if(trCurrentPlayer() == p){");
code("npcDiag(16);");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAddTime(\"cdtutorial\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Pick up the relic\", -1);");
code("}");
code("}");
code("else{");
code("NewRelic(1*trQuestVarGet(\"ArmoryP\"+p));");
code("}");
code("for(a = xGetDatabaseCount(dEnemyCollision); > 0){");
code("xDatabaseNext(dEnemyCollision);");
code("if(xGetInt(dEnemyCollision, xUnitID) == 1*trQuestVarGet(\"ArmoryP\"+p)){");
code("xFreeDatabaseBlock(dEnemyCollision);");
code("}");
code("}");
code("}");
code("if(trPlayerUnitCountSpecific(p, \"Medusa\") != 0){");
code("yFindLatestReverse(\"MedusaP\"+p, \"Medusa\", p);");
code("trUnitSelectByQV(\"MedusaP\"+p);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectByQV(\"MedusaP\"+p);");
code("trUnitConvert(0);");
code("NewRelic(1*trQuestVarGet(\"MedusaP\"+p));");
code("}");
code("if((xGetInt(dPlayerData, xTowerDamage) > 5) && (1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 1)){");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 2);");
code("trUnforbidProtounit(p, \"Storehouse\");");
code("if(trCurrentPlayer() == p){");
code("npcDiag(17);");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAddTime(\"cdtutorial\", -100, -200, \"<color={PlayerColor(\"+p+\")}>Press 'E' for all towers to fire\", -1);");
code("}");
code("}");
code("if(trPlayerResourceCount(p, \"Food\") > 0){");
code("trPlayerGrantResources(p, \"Food\", -100000);");
code("trBlockAllAmbientSounds();");
code("trBlockAllSounds();");
code("if(xGetInt(dPlayerData, xS5E) > 0){");
code("for(a = xGetDatabaseCount(dTowers); > 0){");
code("xDatabaseNext(dTowers);");
code("if(xGetInt(dTowers, xOwner) == p){");
code("if(xGetBool(dTowers, xConstructed) == true){");
code("start = kbGetBlockPosition(\"\"+xGetInt(dTowers, xUnitID));");
code("dest = xGetVector(dPlayerData, xSpecialVector);");
code("dir = xsVectorNormalize(dest-start);");
code("IGUnit = true;");
code("IGName = xGetInt(dTowers, xUnitID);");
code("unitcheck = \"Tower\";");
code("xSetPointer(dPlayerData, xGetInt(dTowers, xOwner));");
code("ShootProjectile(dir, start, \"Lampades Bolt\", \"Wadjet Spit\", 0, xGetInt(dPlayerData, xTowerDamage), 5000, p);");
code("}");
code("}");
code("}");
code("trDelayedRuleActivation(\"UnblockSound\");");
code("xSetInt(dPlayerData, xS5E, xGetInt(dPlayerData, xS5E)-1);");
code("}");
code("else{");
code("if(trCurrentPlayer() == p){");
code("playSound(\"cantdothat.wav\");");
code("ColouredChatToPlayer(p, \"1,0,0\", \"This ability has not yet recharged!\");");
code("}");
code("}");
code("if(TutorialMode){");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 3);");
code("}");
code("}");
code("if(trPlayerUnitCountSpecific(p, ChickenProto) == 1){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if (trUnitIsSelected()) {");
code("gadgetReal(\"unitStatPanel-stat-Capacity\");");
code("gadgetReal(\"CapacityTextDisplay\");");
code("}");
code("trUnitSelectClear();");
code("}");
code("}");
code("}");
code("rule ChickenTutorialLoops");
code("highFrequency");
code("inactive");
code("{");
code("if(TutorialMode){");
code("int temp = 0;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"P\"+p+\"Pos\", kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("if((playerIsPlaying(p) == false) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("xSetBool(dPlayerData, xPlayerActive, false);");
code("PlayersActive = PlayersActive-1;");
code("trPaintTerrain(5,((p*8)-2),40,((p*8+4)-2),getTerrainType(\"black\"), getTerrainSubType(\"black\"));");
code("trUnitSelectClear();");
code("for(a = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("if(xGetInt(dTemp, xExtra) == p){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("}");
code("}");
code("if((1*trQuestVarGet(\"P\"+p+\"FountainMsg\") == 3) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("trQuestVarSet(\"P\"+p+\"DoneTutorial\", 1);");
code("trQuestVarModify(\"PlayersDoneTutorial\", \"+\", 1);");
code("temp = 1*trQuestVarGet(\"PlayersDoneTutorial\");");
code("trPaintTerrain(5,((p*8)-2),40,((p*8+4)-2),CliffType,CliffSubType);");
code("trUnitSelectClear();");
code("for(a = xGetDatabaseCount(dTemp) ; > 0){");
code("xDatabaseNext(dTemp);");
code("if(xGetInt(dTemp, xExtra) == p){");
code("xUnitSelect(dTemp, xUnitID);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTemp);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trClearCounterDisplay();");
code("trSetCounterDisplay(\"<color={PlayerColor(\" + GreenText() + \")}>Tutorial complete: \" + temp + \" / \" + PlayersActive);");
code("if((temp == 1) && (PlayersActive > 1)){");
code("xsEnableRule(\"TutorialTimeout\");");
code("}");
code("if(trCurrentPlayer() == p){");
code("playSound(\"ageadvance.wav\");");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAbort(\"cdtutoriala\");");
code("}");
code("}");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("if((trUnitAlive() == false) && (xGetBool(dPlayerData, xPlayerActive) == true) &&");
code("(1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("CreateChicken(p, 14, p*16, 90);");
code("}");
code("if((trPlayerUnitCountSpecific(p, ChickenProto) == 0) && (1*trQuestVarGet(\"P\"+p+\"DoneTutorial\") == 0)){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitChangeProtoUnit(\"Ragnorok SFX\");");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xSpyID));");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("CreateChicken(p, 14, p*16, 90);");
code("}");
code("}");
code("}");
code("}");
code("rule ChickenTutorialDone");
code("highFrequency");
code("inactive");
code("{");
code("if((PlayersActive == 1*trQuestVarGet(\"PlayersDoneTutorial\")) && (PlayersActive > 0)){");
code("xsDisableSelf();");
code("xsDisableRule(\"ChickenTutorialLoops\");");
code("xsDisableRule(\"FirstTower\");");
code("xsEnableRule(\"BuildChickenArea\");");
code("trClearCounterDisplay();");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAbort(\"cdtutoriala\");");
code("trCounterAbort(\"cdtutorialtimeout\");");
code("trQuestVarSet(\"PlayersDoneTutorial\", 0);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,1,1,true);");
code("Stage = 5;");
code("characterDialog(ActName(Stage), \" \", ActIcon(Stage));");
code("trSetFogAndBlackmap(true,true);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("xResetDatabase(dTemp);");
code("xResetDatabase(dMissiles);");
code("TutorialMode = false;");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("}");
code("}");
code("}");
}
void ActChicken() {
code("void ChickenWave1(int unused = 0){");
code("ActPart = 2;");
code("}");
code("void ChickenWave1End(int unused = 0){");
code("ActPart = 3;");
code("}");
code("void ChickenWave2(int unused = 0){");
code("ActPart = 4;");
code("}");
code("void ChickenWave2End(int unused = 0){");
code("ActPart = 5;");
code("}");
code("void ChickenWave3(int unused = 0){");
code("ActPart = 6;");
code("}");
code("void ChickenWave3End(int unused = 0){");
code("ActPart = 7;");
code("}");
code("rule BuildChickenArea");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("TutorialMode = false;");
code("createChickenArea();");
code("xsDisableSelf();");
code("trUIFadeToColor(0,0,0,100,800,false);");
code("xsEnableRule(\"ChickenLanding\");");
code("uiZoomToProto(\"\"+ChickenProto);");
code("uiLookAtProto(\"\"+ChickenProto);");
code("xsEnableRule(\"PlayMusic\");");
code("}");
code("}");
code("rule ChickenLanding");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("trLetterBox(false);");
code("uiZoomToProto(\"\"+ChickenProto);");
code("uiLookAtProto(\"\"+ChickenProto);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trDelayedRuleActivation(\"TEST\");");
code("trDelayedRuleActivation(\"ChickenAllDead\");");
code("ColouredIconChat(\"1,0.5,0\", ActIcon(Stage), \"<u>\" + ActName(Stage) + \"</u>\");");
code("ColouredChat(\"0.0,0.8,0.2\", \"Chickens are tasty and made out of food.\");");
code("ColouredChat(\"0.0,0.8,0.2\", \"The hordes are coming.\");");
code("trQuestVarSet(\"Time\", trTime());");
code("PlayersDead = 0;");
code("timediff = trTimeMS();");
code("timelast = trTimeMS();");
code("trDelayedRuleActivation(\"ChickenActLoops\");");
code("for(p = 1 ; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("xSetInt(dPlayerData, xS5E, 5);");
code("trUnforbidProtounit(p, \"Armory\");");
code("trUnforbidProtounit(p, \"Tower\");");
code("xSetPointer(dPlayerData, p);");
code("trQuestVarSet(\"P\"+p+\"FountainMsg\", 0);");
code("modifyProtounitAbsolute(\"Tower\", p, 10, xGetInt(dPlayerData, xTowerLimit));");
code("modifyProtounitAbsolute(\"Tower\", p, 4, 6);");
code("modifyProtounitAbsolute(\"Armory\", p, 10, 1);");
code("modifyProtounitAbsolute(\"Armory\", p, 4, 40);");
code("trTechGodPower(p, \"Animal Magnetism\", 1);");
code("trPlayerSetDiplomacy(p, 0, \"Neutral\");");
code("}");
code("trRateConstruction(1);");
code("if(QuickStart == 5){");
code("trRateConstruction(10);");
code("}");
code("ActPart = 1;");
code("trCounterAddTime(\"ChickenInfo\", 65-(QuickStart*9), 0, \"<color={PlayerColor(2)}>Attacks begin</color>\", 40);");
code("xsEnableRule(\"ChickenWave1Go\");");
code("modifyProtounitAbsolute(\"Toxotes\", cNumberNonGaiaPlayers, 0, 50);");
code("modifyProtounitAbsolute(\"Militia\", cNumberNonGaiaPlayers, 0, 50);");
code("modifyProtounitAbsolute(\"Toxotes\", cNumberNonGaiaPlayers, 31, 5);");
code("modifyProtounitAbsolute(\"Spearman\", cNumberNonGaiaPlayers, 0, 100);");
code("modifyProtounitAbsolute(\"Spearman\", cNumberNonGaiaPlayers, 27, 10);");
code("modifyProtounitAbsolute(\"Spearman\", cNumberNonGaiaPlayers, 34, 0);");
code("modifyProtounitAbsolute(\"Spearman\", cNumberNonGaiaPlayers, 39, 0);");
code("modifyProtounitAbsolute(\"Militia\", cNumberNonGaiaPlayers, 34, 0);");
code("modifyProtounitAbsolute(\"Militia\", cNumberNonGaiaPlayers, 39, 0);");
code("modifyProtounitAbsolute(\"Slinger\", cNumberNonGaiaPlayers, 0, 50);");
code("modifyProtounitAbsolute(\"Slinger\", cNumberNonGaiaPlayers, 11, 18);");
code("modifyProtounitAbsolute(\"Slinger\", cNumberNonGaiaPlayers, 2, 20);");
code("modifyProtounitAbsolute(\"Slinger\", cNumberNonGaiaPlayers, 31, 10);");
code("modifyProtounitAbsolute(\"Peltast\", cNumberNonGaiaPlayers, 0, 1000);");
code("modifyProtounitAbsolute(\"Peltast\", cNumberNonGaiaPlayers, 11, 20);");
code("modifyProtounitAbsolute(\"Peltast\", cNumberNonGaiaPlayers, 2, 250);");
code("modifyProtounitAbsolute(\"Peltast\", cNumberNonGaiaPlayers, 31, 20);");
code("modifyProtounitAbsolute(\"Bella\", cNumberNonGaiaPlayers, 0, 300);");
code("modifyProtounitAbsolute(\"Bella\", cNumberNonGaiaPlayers, 27, 10);");
code("modifyProtounitAbsolute(\"Bella\", cNumberNonGaiaPlayers, 28, 0);");
code("modifyProtounitAbsolute(\"Bella\", cNumberNonGaiaPlayers, 29, 0);");
code("for(q = 33; < 55){");
code("modifyProtounitAbsolute(\"Bella\", cNumberNonGaiaPlayers, q, 0);");
code("modifyProtounitAbsolute(\"Monkey King\", cNumberNonGaiaPlayers, q, 0);");
code("}");
code("modifyProtounitAbsolute(\"Monkey King\", cNumberNonGaiaPlayers, 0, 400);");
code("modifyProtounitAbsolute(\"Monkey King\", cNumberNonGaiaPlayers, 27, 30);");
code("modifyProtounitAbsolute(\"Monkey King\", cNumberNonGaiaPlayers, 28, 10);");
code("modifyProtounitAbsolute(\"Monkey King\", cNumberNonGaiaPlayers, 29, 10);");
code("modifyProtounitAbsolute(\"Bogsveigir\", cNumberNonGaiaPlayers, 0, 150);");
code("modifyProtounitAbsolute(\"Bogsveigir\", cNumberNonGaiaPlayers, 31, 25);");
code("modifyProtounitAbsolute(\"Toxotes\", cNumberNonGaiaPlayers, 2, 50);");
code("modifyProtounitAbsolute(\"Militia\", cNumberNonGaiaPlayers, 2, 50);");
code("modifyProtounitAbsolute(\"Spearman\", cNumberNonGaiaPlayers, 2, 50);");
code("modifyProtounitAbsolute(\"Slinger\", cNumberNonGaiaPlayers, 2, 50);");
code("modifyProtounitAbsolute(\"Peltast\", cNumberNonGaiaPlayers, 2, 50);");
code("modifyProtounitAbsolute(\"Bella\", cNumberNonGaiaPlayers, 2, 50);");
code("modifyProtounitAbsolute(\"Monkey King\", cNumberNonGaiaPlayers, 2, 50);");
code("modifyProtounitAbsolute(\"Bogsveigir\", cNumberNonGaiaPlayers, 2, 50);");
code("modifyProtounitAbsolute(\"Satyr\", cNumberNonGaiaPlayers, 0, 2500);");
code("modifyProtounitAbsolute(\"Satyr\", cNumberNonGaiaPlayers, 11, 20);");
code("modifyProtounitAbsolute(\"Satyr\", cNumberNonGaiaPlayers, 2, 400);");
code("modifyProtounitAbsolute(\"Satyr\", cNumberNonGaiaPlayers, 31, 40);");
code("modifyProtounitAbsolute(\"Satyr\", cNumberNonGaiaPlayers, 13, 1);");
code("modifyProtounitAbsolute(\"White Tiger\", cNumberNonGaiaPlayers, 0, 1000);");
code("modifyProtounitAbsolute(\"White Tiger\", cNumberNonGaiaPlayers, 27, 60);");
code("modifyProtounitAbsolute(\"Scarab\", cNumberNonGaiaPlayers, 0, 2000);");
code("modifyProtounitAbsolute(\"Scarab\", cNumberNonGaiaPlayers, 27, 110);");
code("modifyProtounitAbsolute(\"Manticore\", cNumberNonGaiaPlayers, 0, 2500);");
code("modifyProtounitAbsolute(\"Manticore\", cNumberNonGaiaPlayers, 11, 26);");
code("modifyProtounitAbsolute(\"Manticore\", cNumberNonGaiaPlayers, 2, 400);");
code("modifyProtounitAbsolute(\"Manticore\", cNumberNonGaiaPlayers, 31, 80);");
code("modifyProtounitAbsolute(\"Manticore\", cNumberNonGaiaPlayers, 13, 1);");
code("modifyProtounitAbsolute(\"Fenris Wolf\", cNumberNonGaiaPlayers, 0, 3000);");
code("modifyProtounitAbsolute(\"Fenris Wolf\", cNumberNonGaiaPlayers, 27, 160);");
code("trTechSetStatus(cNumberNonGaiaPlayers, 500, 4);");
code("modifyProtounitAbsolute(\"Titan Prometheus\", cNumberNonGaiaPlayers, 9, 0);");
code("if(QuickStart == 0){");
code("gadgetUnreal(\"GodPowers\");");
code("}");
code("trSetCounterDisplay(\"You will be able to hold more relics as the act progresses\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave1Go");
code("inactive");
code("highFrequency");
code("{");
code("if(ActPart == 2){");
code("R5Wave(2*(PlayersActive-PlayersDead), \"Militia\", 3000, 2000);");
code("xsEnableRule(\"ChickenWave1A\");");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("trCounterAddTime(\"ChickenInfo\", 330, 0, \"<color={PlayerColor(2)}>Ring 1 super poacher</color>\", 41);");
code("trClearCounterDisplay();");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave1A");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(3*(PlayersActive-PlayersDead), \"Militia\", 1800, 1600);");
code("xsEnableRule(\"ChickenWave1B\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave1B");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(2*(PlayersActive-PlayersDead), \"Toxotes\", 1900, 1700);");
code("xsEnableRule(\"ChickenWave1C\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave1C");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(2*(PlayersActive-PlayersDead), \"Toxotes\", 1900, 1700);");
code("R5Wave(3*(PlayersActive-PlayersDead), \"Militia\", 1800, 1600);");
code("xsEnableRule(\"ChickenWave1D\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave1D");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Militia\", 1900, 1600);");
code("R5Wave(1*(PlayersActive-PlayersDead), \"Slinger\", 2800, 2400);");
code("xsEnableRule(\"ChickenWave1E\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave1E");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(3*(PlayersActive-PlayersDead), \"Toxotes\", 1900, 1600);");
code("xsEnableRule(\"ChickenWave1F\");");
code("xsDisableSelf();");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("trModifyProtounit(ChickenProto, p, 5, 1);");
code("ColouredChatToPlayer(p, \"1,0.5,0\", \"<u>Relic hold capacity increased!</u>\");");
code("}");
code("ChickenLevel = 2;");
code("playSound(\"ageadvance.wav\");");
code("trClearCounterDisplay();");
code("trSetCounterDisplay(\"Use 'R' to convert unwanted relics to landmines\");");
code("}");
code("}");
code("rule ChickenWave1F");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(2*(PlayersActive-PlayersDead), \"Spearman\", 2000, 1700);");
code("xsEnableRule(\"ChickenWave1G\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave1G");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 40) {");
code("R5Wave(2*(PlayersActive-PlayersDead), \"Slinger\", 2800, 1600);");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Spearman\", 2100, 1800);");
code("xsEnableRule(\"ChickenWave1H\");");
code("trClearCounterDisplay();");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave1H");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Spearman\", 2500, 2000);");
code("xsEnableRule(\"ChickenWave1I\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave1I");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Slinger\", 3500, 2000);");
code("xsEnableRule(\"ChickenWave1Super\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave1Super");
code("inactive");
code("highFrequency");
code("{");
code("if (ActPart == 3) {");
code("R5Wave(1, \"Peltast\", 3500, 2500);");
code("R5Wave(2*(PlayersActive-PlayersDead), \"Spearman\", 3000, 2000);");
code("modifyProtounitAbsolute(\"Wadjet Spit\", cNumberNonGaiaPlayers, 1, 10);");
code("xsDisableSelf();");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("xsEnableRule(\"ChickenWave1Finish\");");
code("}");
code("}");
code("rule ChickenWave1Finish");
code("inactive");
code("highFrequency");
code("{");
code("if(trPlayerUnitCountSpecific(cNumberNonGaiaPlayers, \"Peltast\") == 0){");
code("modifyProtounitAbsolute(\"Wadjet Spit\", cNumberNonGaiaPlayers, 1, 6);");
code("vector tileForStart = MapCentre*0.5;");
code("int StartTileX = xsVectorGetX(tileForStart);");
code("int StartTileZ = xsVectorGetZ(tileForStart);");
code("int currentId = 0;");
code("playSound(\"xwin.wav\");");
code("trOverlayText(\"Ring 1 cleared!\", 5.0,-1,-1,600);");
code("ChickenLevel = 3;");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("trModifyProtounit(ChickenProto, p, 24, 0.25);");
code("trModifyProtounit(ChickenProto, p, 25, 0.25);");
code("trModifyProtounit(ChickenProto, p, 26, 0.25);");
code("trModifyProtounit(ChickenProto, p, 5, 1);");
code("xSetPointer(dPlayerData, p);");
code("if((xGetBool(dPlayerData, xPlayerDead) == true) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("CreateChicken(p, StartTileX*2, StartTileZ*2, 0);");
code("xSetBool(dPlayerData, xPlayerDead, false);");
code("PlayersDead = PlayersDead-1;");
code("trTechGodPower(p, \"Animal Magnetism\", 1);");
code("}");
code("}");
code("ColouredChat(\"1,0.5,0\", \"<u>Relic hold capacity increased!</u>\");");
code("replaceCircle(StartTileX,StartTileZ,32, \"BlackRock\", \"TundraRoadA\");");
code("replaceCircle(StartTileX,StartTileZ,130,\"IceC\",\"CliffGreekA\");");
code("refreshPassability();");
code("replaceCircle(StartTileX,StartTileZ,130,\"CliffGreekA\",\"IceC\");");
code("trVectorQuestVarSet(\"dir\", xsVectorSet(11, 0, 0));");
code("trVectorQuestVarSet(\"CentreMap\", xsVectorSet(StartTileX*2, 0, StartTileZ*2));");
code("float baseCos = xsCos(6.283185 / (cNumberNonGaiaPlayers-1));");
code("float baseSin = xsSin(6.283185 / (cNumberNonGaiaPlayers-1));");
code("int heading = 90;");
code("for(p=1; < cNumberNonGaiaPlayers) {");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"base\", trVectorQuestVarGet(\"CentreMap\") + trVectorQuestVarGet(\"dir\"));");
code("heading = heading-(360/(cNumberNonGaiaPlayers-1));");
code("if(heading > 360){");
code("heading = heading-360;");
code("}");
code("if(heading < 0){");
code("heading = heading+360;");
code("}");
code("if(xGetBool(dPlayerData, xPlayerActive) == true){");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Relic\", trVectorQuestVarGetX(\"base\"), trVectorQuestVarGetZ(\"base\"), heading);");
code("NewRelic(currentId, RELIC_NUMBER, 3);");
code("}");
code("trVectorQuestVarSet(\"dir\", rotationMatrix(trVectorQuestVarGet(\"dir\"), baseCos, baseSin));");
code("trUnitSelectClear();");
code("}");
code("trCounterAddTime(\"ChickenInfo\", 65-(QuickStart*9), 0, \"<color={PlayerColor(2)}>Ring 2 attacks begin</color>\", 42);");
code("xsEnableRule(\"ChickenWave2Go\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave2Go");
code("inactive");
code("highFrequency");
code("{");
code("if(ActPart == 4){");
code("R5Wave(2*(PlayersActive-PlayersDead), \"Bella\", 3900, 3600);");
code("xsEnableRule(\"ChickenWave2A\");");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("trCounterAddTime(\"ChickenInfo\", 360, 0, \"<color={PlayerColor(2)}>Ring 2 super poacher</color>\", 43);");
code("trClearCounterDisplay();");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave2A");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(2*(PlayersActive-PlayersDead), \"Bella\", 4000, 3600);");
code("xsEnableRule(\"ChickenWave2B\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave2B");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(3*(PlayersActive-PlayersDead), \"Bogsveigir\", 4300, 3900);");
code("xsEnableRule(\"ChickenWave2C\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave2C");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(3*(PlayersActive-PlayersDead), \"Bogsveigir\", 5000, 4400);");
code("R5Wave(2*(PlayersActive-PlayersDead), \"Bella\", 4400, 3600);");
code("xsEnableRule(\"ChickenWave2D\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave2D");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(3*(PlayersActive-PlayersDead), \"Bella\", 6000, 5000);");
code("R5Wave(1*(PlayersActive-PlayersDead), \"Monkey King\", 7000, 6000);");
code("xsEnableRule(\"ChickenWave2E\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave2E");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Bogsveigir\", 7500, 6000);");
code("xsEnableRule(\"ChickenWave2F\");");
code("xsDisableSelf();");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("trModifyProtounit(ChickenProto, p, 5, 1);");
code("ColouredChatToPlayer(p, \"1,0.5,0\", \"<u>Relic hold capacity increased!</u>\");");
code("}");
code("ChickenLevel = 4;");
code("playSound(\"ageadvance.wav\");");
code("}");
code("}");
code("rule ChickenWave2F");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 45) {");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Monkey King\", 8000, 6600);");
code("xsEnableRule(\"ChickenWave2G\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave2G");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Bogsveigir\", 8500, 7000);");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Monkey King\", 8700, 7200);");
code("xsEnableRule(\"ChickenWave2H\");");
code("trClearCounterDisplay();");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave2H");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(6*(PlayersActive-PlayersDead), \"Bella\", 9000, 7000);");
code("xsEnableRule(\"ChickenWave2I\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave2I");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(6*(PlayersActive-PlayersDead), \"Bogsveigir\", 9900, 7000);");
code("xsEnableRule(\"ChickenWave2Super\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave2Super");
code("inactive");
code("highFrequency");
code("{");
code("if (ActPart == 5) {");
code("R5Wave(1, \"Satyr\", 9900, 8000);");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Monkey King\", 9800, 8000);");
code("modifyProtounitAbsolute(\"Wadjet Spit\", cNumberNonGaiaPlayers, 1, 12);");
code("xsDisableSelf();");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("xsEnableRule(\"ChickenWave2Finish\");");
code("}");
code("}");
code("rule ChickenWave2Finish");
code("inactive");
code("highFrequency");
code("{");
code("if(trPlayerUnitCountSpecific(cNumberNonGaiaPlayers, \"Satyr\") == 0){");
code("modifyProtounitAbsolute(\"Wadjet Spit\", cNumberNonGaiaPlayers, 1, 6);");
code("vector tileForStart = MapCentre*0.5;");
code("int StartTileX = xsVectorGetX(tileForStart);");
code("int StartTileZ = xsVectorGetZ(tileForStart);");
code("int currentId = 0;");
code("playSound(\"xwin.wav\");");
code("trOverlayText(\"Ring 2 cleared!\", 5.0,-1,-1,600);");
code("ChickenLevel = 5;");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("trModifyProtounit(ChickenProto, p, 24, 0.25);");
code("trModifyProtounit(ChickenProto, p, 25, 0.25);");
code("trModifyProtounit(ChickenProto, p, 26, 0.25);");
code("trModifyProtounit(ChickenProto, p, 5, 1);");
code("xSetPointer(dPlayerData, p);");
code("if((xGetBool(dPlayerData, xPlayerDead) == true) && (xGetBool(dPlayerData, xPlayerActive) == true)){");
code("CreateChicken(p, StartTileX*2, StartTileZ*2, 0);");
code("xSetBool(dPlayerData, xPlayerDead, false);");
code("PlayersDead = PlayersDead-1;");
code("trTechGodPower(p, \"Animal Magnetism\", 1);");
code("}");
code("}");
code("ColouredChat(\"1,0.5,0\", \"<u>Relic hold capacity increased!</u>\");");
code("replaceCircle(StartTileX,StartTileZ,52, \"BlackRock\", \"RiverGrassyC\");");
code("replaceCircle(StartTileX,StartTileZ,130,\"UnderwaterIceC\",\"CliffGreekA\");");
code("refreshPassability();");
code("replaceCircle(StartTileX,StartTileZ,130,\"CliffGreekA\",\"UnderwaterIceC\");");
code("trVectorQuestVarSet(\"dir\", xsVectorSet(11, 0, 0));");
code("trVectorQuestVarSet(\"CentreMap\", xsVectorSet(StartTileX*2, 0, StartTileZ*2));");
code("float baseCos = xsCos(6.283185 / (cNumberNonGaiaPlayers-1));");
code("float baseSin = xsSin(6.283185 / (cNumberNonGaiaPlayers-1));");
code("int heading = 90;");
code("for(p=1; < cNumberNonGaiaPlayers) {");
code("xSetPointer(dPlayerData, p);");
code("trVectorQuestVarSet(\"base\", trVectorQuestVarGet(\"CentreMap\") + trVectorQuestVarGet(\"dir\"));");
code("heading = heading-(360/(cNumberNonGaiaPlayers-1));");
code("if(heading > 360){");
code("heading = heading-360;");
code("}");
code("if(heading < 0){");
code("heading = heading+360;");
code("}");
code("if(xGetBool(dPlayerData, xPlayerActive) == true){");
code("currentId = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Relic\", trVectorQuestVarGetX(\"base\"), trVectorQuestVarGetZ(\"base\"), heading);");
code("NewRelic(currentId, RELIC_NUMBER, 5);");
code("}");
code("trVectorQuestVarSet(\"dir\", rotationMatrix(trVectorQuestVarGet(\"dir\"), baseCos, baseSin));");
code("trUnitSelectClear();");
code("}");
code("trCounterAddTime(\"ChickenInfo\", 90-(QuickStart*15), 0, \"<color={PlayerColor(2)}>Final ring attacks begin</color>\", 44);");
code("xsEnableRule(\"ChickenWave3Go\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave3Go");
code("inactive");
code("highFrequency");
code("{");
code("if(ActPart == 6){");
code("R5Wave(8*(PlayersActive-PlayersDead), \"Bella\", 12000, 10000);");
code("xsEnableRule(\"ChickenWave3A\");");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("trClearCounterDisplay();");
code("trCounterAddTime(\"ChickenInfo\", 400, 0, \"<color={PlayerColor(2)}>Ultra poacher</color>\", 45);");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave3A");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(2*(PlayersActive-PlayersDead), \"White Tiger\", 12000, 10000);");
code("xsEnableRule(\"ChickenWave3B\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave3B");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(3*(PlayersActive-PlayersDead), \"White Tiger\", 13000, 10000);");
code("xsEnableRule(\"ChickenWave3C\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave3C");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(3*(PlayersActive-PlayersDead), \"Scarab\", 14000, 10000);");
code("R5Wave(2*(PlayersActive-PlayersDead), \"White Tiger\", 15000, 10000);");
code("xsEnableRule(\"ChickenWave3D\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave3D");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 35) {");
code("R5Wave(3*(PlayersActive-PlayersDead), \"Scarab\", 16000, 10000);");
code("R5Wave(1*(PlayersActive-PlayersDead), \"Manticore\", 16000, 10000);");
code("xsEnableRule(\"ChickenWave3E\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave3E");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 35) {");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Fenris Wolf\", 16000, 10000);");
code("xsEnableRule(\"ChickenWave3F\");");
code("xsDisableSelf();");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("trModifyProtounit(ChickenProto, p, 5, 1);");
code("ColouredChatToPlayer(p, \"1,0.5,0\", \"<u>Relic hold capacity increased!</u>\");");
code("}");
code("ChickenLevel = 6;");
code("playSound(\"ageadvance.wav\");");
code("}");
code("}");
code("rule ChickenWave3F");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 45) {");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Manticore\", 16000, 6600);");
code("xsEnableRule(\"ChickenWave3G\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave3G");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 35) {");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Fenris Wolf\", 16000, 7000);");
code("R5Wave(4*(PlayersActive-PlayersDead), \"Scarab\", 16000, 7200);");
code("xsEnableRule(\"ChickenWave3H\");");
code("trClearCounterDisplay();");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave3H");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 30) {");
code("R5Wave(6*(PlayersActive-PlayersDead), \"Fenris Wolf\", 16000, 7000);");
code("xsEnableRule(\"ChickenWave3I\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave3I");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 40) {");
code("R5Wave(6*(PlayersActive-PlayersDead), \"Manticore\", 16000, 7000);");
code("R5Wave(1*(PlayersActive-PlayersDead), \"Fenris Wolf\", 16000, 7000);");
code("xsEnableRule(\"ChickenWave3Super\");");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("trModifyProtounit(ChickenProto, p, 5, 1);");
code("ColouredChatToPlayer(p, \"1,0.5,0\", \"<u>Relic hold capacity increased to maximum!</u>\");");
code("}");
code("ChickenLevel = 7;");
code("playSound(\"ageadvance.wav\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule ChickenWave3Super");
code("inactive");
code("highFrequency");
code("{");
code("if (ActPart == 7) {");
code("R5Wave(1, \"Titan Prometheus\", 14000, 10000);");
code("R5Wave(4*(PlayersActive-PlayersDead), \"White Tiger\", 12000, 10000);");
code("modifyProtounitAbsolute(\"Wadjet Spit\", cNumberNonGaiaPlayers, 1, 12);");
code("xsDisableSelf();");
code("playSound(\"\cinematics\04_in\armyarrive.wav\");");
code("trSetLighting(\"Night\", 6);");
code("xsEnableRule(\"ChickenWave3Finish\");");
code("}");
code("}");
code("rule ChickenActLoops");
code("highFrequency");
code("inactive");
code("{");
code("if(Stage == 5){");
code("timediff = 0.001 * (trTimeMS() - timelast);");
code("timelast = trTimeMS();");
code("if(trTime() > 1*trQuestVarGet(\"Time\")){");
code("trQuestVarModify(\"Time\", \"+\", 1);");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("if(1*trQuestVarGet(\"P\"+p+\"ChickenRegen\") > 0){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trDamageUnit(-1*trQuestVarGet(\"P\"+p+\"ChickenRegen\"));");
code("}");
code("if(1*trQuestVarGet(\"P\"+p+\"TowerRegen\") > 0){");
code("trUnitSelectByQV(\"P\"+p+\"Unit\");");
code("trDamageUnitsInArea(p, \"Tower\", 500, -1*trQuestVarGet(\"P\"+p+\"TowerRegen\"));");
code("}");
code("}");
code("}");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if((xGetBool(dPlayerData, xStopDeath) == false) && (trPlayerUnitCountSpecific(p, \"\"+ChickenProto) == 0) &&");
code("(trPlayerUnitCountSpecific(p, \"Prisoner\") == 0) && (xGetBool(dPlayerData, xPlayerActive) == true) &&");
code("(xGetBool(dPlayerData, xPlayerDead) == false) && (InMinigame == false)){");
code("PlayersDead = PlayersDead+1;");
code("xSetBool(dPlayerData, xPlayerDead, true);");
code("PlayerColouredChat(p, trStringQuestVarGet(\"p\"+p+\"name\") + \" is dead!\");");
code("PlayerColouredChat(p, \"They will respawn once the super poacher is dead!\");");
code("xSetVector(dPlayerData, xDeathVector, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"P\"+p+\"Unit\")));");
code("trPlayerKillAllGodPowers(p);");
code("trPlayerKillAllBuildings(p);");
code("trPlayerKillAllUnits(p);");
code("gadgetReal(\"GodPowers\");");
code("trTechGodPower(1, \"Rain\", 1);");
code("if(iModulo(2, trTime()) == 0){");
code("playSound(\"\dialog\es\skul062.mp3\");");
code("}");
code("else{");
code("playSound(\"\xpack\xdialog\es\xkri075.mp3\");");
code("}");
code("}");
code("if((trTime() > 1*trQuestVarGet(\"P\"+p+\"ERecharge\")) && (xGetInt(dPlayerData, xS5E) == 0)){");
code("trQuestVarSet(\"P\"+p+\"ERecharge\", trTime()+xGetInt(dPlayerData, xS5ERecharge));");
code("xSetInt(dPlayerData, xS5E, -1);");
code("}");
code("if((trTime() >= 1*trQuestVarGet(\"P\"+p+\"ERecharge\")) && (xGetInt(dPlayerData, xS5E) < 0)){");
code("xSetInt(dPlayerData, xS5E, 5);");
code("}");
code("if(xGetInt(dPlayerData, xS5E) > 0){");
code("if(trCurrentPlayer() == p){");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAddTime(\"cdtutorial\", -100, -200, \"</color>E - All towers fire at cursor | \" + xGetInt(dPlayerData, xS5E), -1);");
code("}");
code("}");
code("else if((1*trQuestVarGet(\"P\"+p+\"ERecharge\") > trTime()) && (xGetInt(dPlayerData, xS5E) == -1)){");
code("if(trCurrentPlayer() == p){");
code("trCounterAbort(\"cdtutorial\");");
code("trCounterAddTime(\"cdtutorial\", xGetInt(dPlayerData, xS5ERecharge), 0, \"</color>E recharging\", -1);");
code("}");
code("xSetInt(dPlayerData, xS5E, -2);");
code("}");
code("}");
code("}");
code("}");
code("rule ChickenAllDead");
code("inactive");
code("minInterval 5");
code("{");
code("if((Stage == 5) && (PlayersDead == PlayersActive)){");
code("trShowWinLose(\"All players are dead\", \"xlose.wav\");");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("trSetPlayerDefeated(p);");
code("}");
code("xsDisableSelf();");
code("trEndGame();");
code("}");
code("}");
}
void cinematic() {
code("void CineGo(int unused = 0){");
code("xsEnableRule(\"RemoveCineTimers\");");
code("xsEnableRule(\"Cine_START\");");
code("xsDisableRule(\"SkipCine\");");
code("}");
code("rule BuildCineScene");
code("inactive");
code("highFrequency");
code("{");
code("int temp = 0;");
code("trRenderSky(true, \"SkySunset\");");
code("clearMap(\"black\", 0);");
code("trPaintTerrain(100,59,104,63,2,11);");
code("trPaintTerrain(90,40,110,86,0,1);");
code("trPaintTerrain(102,40,110,86,0,0);");
code("PaintAtlantisArea(101,60,103,62,0,53);");
code("trQuestVarSet(\"Yeeb\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(0, \"Cinematic Block\", 101*2+2, 60*2+2, 270);");
code("trQuestVarSet(\"YeebEgg\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(0, \"Cinematic Block\", 101*2+2, 60*2+2, 292);");
code("trQuestVarSet(\"YeebSFX1\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(0, \"Cinematic Block\", 101*2+2, 60*2+2, 315);");
code("trQuestVarSet(\"YeebSFX2\", trGetNextUnitScenarioNameNumber());");
code("UnitCreate(0, \"Cinematic Block\", 101*2+2, 60*2+2, 315);");
code("trChangeTerrainHeight(101,60,104,63, 14);");
code("trUnitSelectByQV(\"Yeeb\");");
code("trUnitChangeProtoUnit(\"Pharaoh of Osiris XP\");");
code("trUnitSelectByQV(\"YeebEgg\");");
code("trUnitChangeProtoUnit(\"Phoenix Egg\");");
code("trUnitSelectByQV(\"YeebEgg\");");
code("trSetScale(2.5);");
code("trUnitSelectByQV(\"YeebSFX1\");");
code("trUnitChangeProtoUnit(\"Imperial Examination\");");
code("PaintAtlantisArea(95,60,97,62,0,53);");
code("UnitCreate(0, \"Chicken\", 95*2+2, 60*2+2, 270);");
code("trChangeTerrainHeight(95,60,98,63, 3);");
code("PaintAtlantisArea(97,53,99,55,0,53);");
code("UnitCreate(0, \"Rhinocerous\", 97*2+2, 53*2+2, 270);");
code("trChangeTerrainHeight(97,53,100,56, 6);");
code("PaintAtlantisArea(97,67,99,69,0,53);");
code("UnitCreate(0, \"Crocodile\", 97*2+2, 67*2+2, 270);");
code("trChangeTerrainHeight(97,67,100,70, 6);");
code("PaintAtlantisArea(92,48,94,50,0,53);");
code("UnitCreate(0, \"Goat\", 92*2+2, 48*2+2, 270);");
code("trChangeTerrainHeight(92,48,95,51, 5);");
code("PaintAtlantisArea(92,72,94,74,0,53);");
code("UnitCreate(0, \"Gazelle\", 92*2+2, 72*2+2, 270);");
code("trChangeTerrainHeight(92,72,95,75, 5);");
code("modifyProtounitAbsolute(\"Chicken\", 0, 1,0);");
code("modifyProtounitAbsolute(\"Goat\", 0, 1,0);");
code("modifyProtounitAbsolute(\"Crocodile\", 0, 1,0);");
code("modifyProtounitAbsolute(\"Rhinocerous\", 0, 1,0);");
code("modifyProtounitAbsolute(\"Gazelle\", 0, 1,0);");
code("replaceTerrainAtMinSteepness(\"GrassB\", \"CliffGreekA\", 2);");
code("trCameraCut(vector(109.101425,39.023849,122.402161), vector(0.932531,-0.361055,0.005034), vector(0.361050,0.932545,");
code("0.001949), vector(0.005398,0.000000,-0.999985));");
code("paintTrees2(\"GrassA\", \"Pine\");");
code("paintTrees2(\"GrassB\", \"Bush Short\");");
code("int b = 0;");
code("for(a = 0; < 20){");
code("b = b+1;");
code("if(b > cNumberNonGaiaPlayers){");
code("b = 0;");
code("}");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(b, \"Dwarf\", 230, 70+a*5, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Hesperides Tree\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetSelectedScale(1,1.4,1);");
code("}");
code("for(a = 0; < 20){");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 220, 70+a*5, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Tamarisk Tree\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetSelectedScale(1.4,1,1.4);");
code("}");
code("temp = trGetNextUnitScenarioNameNumber();");
code("UnitCreate(0, \"Dwarf\", 240, 80, 90);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeProtoUnit(\"Elephant\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trSetSelectedScale(2,2,2);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitMoveToPoint(230,1,180,-1,false);");
code("trSetObscuredUnits(false);");
code("SkipRequired = PlayersActive-1;");
code("if(PlayersActive == 1){");
code("SkipRequired = PlayersActive;");
code("}");
code("trSetCounterDisplay(\"</color>Votes to skip: \" + 1*trQuestVarGet(\"SkipVotes\") +\"/\" + SkipRequired);");
code("trCounterAddTime(\"cdcine\", 13, 0, \"<color={PlayerColor(\"+ cNumberNonGaiaPlayers +\")}>Cinematic begins\", 46);");
code("for(p=1 ; < cNumberNonGaiaPlayers){");
code("PlayerChoice(p, \"Skip Cinematic?\", \"Yes\", 3, \"No\", 0, 12900);");
code("}");
code("xsEnableRule(\"SkipCine\");");
code("xsDisableSelf();");
code("}");
code("rule SkipCine");
code("inactive");
code("highFrequency");
code("{");
code("if(1*trQuestVarGet(\"SkipVotes\") >= SkipRequired){");
code("xsEnableRule(\"RemoveCineTimers\");");
code("xsDisableSelf();");
code("xsDisableRule(\"Cine_START\");");
code("xsEnableRule(\"CineStartSkip\");");
code("SkipRequired = 47;");
code("trSetObscuredUnits(true);");
code("}");
code("}");
code("rule RemoveCineTimers");
code("inactive");
code("highFrequency");
code("{");
code("trCounterAbort(\"cdcine\");");
code("trClearCounterDisplay();");
code("xsDisableSelf();");
code("xsDisableRule(\"SkipCine\");");
code("}");
code("rule Cine_START");
code("inactive");
code("highFrequency");
code("{");
code("xsEnableRule(\"RemoveCineTimers\");");
code("trLetterBox(true);");
code("trSetFogAndBlackmap(false,false);");
code("trRenderSky(true, \"SkyBlue\");");
code("trSetObscuredUnits(false);");
code("createCinematicMap();");
code("replaceTerrainAboveHeightMax(\"GaiaCreepA\", \"GrassB\", 0.0);");
code("replaceTerrainAboveHeightMax(\"CoralA\", \"GrassB\", 0.0);");
code("createCameraTrack(5000);");
code("trCameraCut(vector(-4.191484,31.823811,-23.344259), vector(0.512498,-0.420865,0.748477), vector(0.237777,0.907123,");
code("0.347260), vector(0.825111,-0.000000,-0.564971));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(-23.063557,31.823811,-1.844474), vector(0.808599,-0.420865,0.411146), vector(0.375154,0.907123,");
code("0.190752), vector(0.453241,-0.000001,-0.891388));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(-29.122383,31.823811,19.313332), vector(0.903661,-0.420865,0.079180), vector(0.419259,0.907123,");
code("0.036735), vector(0.087286,-0.000001,-0.996183));");
code("addCameraTrackWaypoint();");
code("playCameraTrack();");
code("characterDialog(\"Yeebaagooon\", \"In Zoo Quest, you will play as various animals over five acts.\",");
code("\"icons\special e son of osiris icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Cine_002\");");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("playSound(\"\music\interface\gank sneakin'.mp3\");");
code("}");
code("rule Cine_002");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("createCameraTrack(12000);");
code("trCameraCut(vector(-29.122383,31.823811,19.313332), vector(0.903661,-0.420865,0.079180), vector(0.419259,0.907123,");
code("0.036735), vector(0.087286,-0.000001,-0.996183));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(8.596761,49.823807,6.115839), vector(0.864105,-0.359189,0.352569), vector(0.332572,0.933265,");
code("0.135694), vector(0.377780,-0.000001,-0.925895));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(137.518402,63.803802,23.713142), vector(0.347379,-0.359189,0.866205), vector(0.133698,0.933265,");
code("0.333379), vector(0.928145,-0.000001,-0.372219));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(191.856720,63.803802,148.407471), vector(0.300016,-0.591888,0.748104), vector(0.220313,0.806020,");
code("0.549357), vector(0.928145,-0.000001,-0.372219));");
code("addCameraTrackWaypoint();");
code("playCameraTrack();");
code("characterDialog(\"Yeebaagooon\", \"In each act, there will be specific objectives relating to your animal.\",");
code("\"icons\special e son of osiris icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Cine_025\");");
code("xsEnableRule(\"Cine_003\");");
code("}");
code("}");
code("rule Cine_0025");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 3) {");
code("xsDisableSelf();");
code("}");
code("}");
code("rule Cine_003");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("characterDialog(\"Yeebaagooon\", \"When you explore the map, you will find an ice zone with a flag, like this one.\",");
code("\"icons\special e son of osiris icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Cine_004\");");
code("}");
code("}");
code("rule Cine_004");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("characterDialog(\"Yeebaagooon\", \"This is the extraction zone.\", \"icons\special e son of osiris icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Cine_005\");");
code("}");
code("}");
code("rule Cine_005");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 3) {");
code("characterDialog(\"Yeebaagooon\", \"When all surviving players are here, the act will end.\",");
code("\"icons\special e son of osiris icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Cine_006\");");
code("}");
code("}");
code("rule Cine_006");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Yeebaagooon\", \"Depending on your performance, you then advance to the next act.\",");
code("\"icons\special e son of osiris icon 64\");");
code("xsEnableRule(\"Cine_007\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule Cine_007");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("characterDialog(\"Yeebaagooon\", \"You may also find some secrets when you are exploring.\",");
code("\"icons\special e son of osiris icon 64\");");
code("xsDisableSelf();");
code("createCameraTrack(12000);");
code("trCameraCut(vector(199.871262,13.335322,178.271561), vector(-0.932545,-0.354518,0.068379), vector(-0.353569,0.935049,");
code("0.025925), vector(0.073129,0.000001,0.997322));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(194.912292,13.335322,165.898911), vector(-0.721632,-0.354518,0.594612), vector(-0.273603,0.935049,");
code("0.225443), vector(0.635915,0.000000,0.771759));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(182.261459,13.335322,158.322586), vector(-0.183567,-0.354518,0.916853), vector(-0.069599,0.935049,");
code("0.347619), vector(0.980540,0.000000,0.196319));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(178.096512,13.335322,170.524948), vector(0.158200,-0.679734,0.716195), vector(0.146612,0.733459,");
code("0.663734), vector(0.976462,-0.000000,-0.215690));");
code("addCameraTrackWaypoint();");
code("playCameraTrack();");
code("xsEnableRule(\"Cine_008\");");
code("}");
code("}");
code("rule Cine_008");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Yeebaagooon\", \"Such as these chests.\", \"icons\special e son of osiris icon 64\");");
code("xsEnableRule(\"Cine_009\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule Cine_009");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 3) {");
code("characterDialog(\"Yeebaagooon\", \"They will grant you a stat bonus when you walk up to them.\",");
code("\"icons\special e son of osiris icon 64\");");
code("xsEnableRule(\"Cine_010\");");
code("xsDisableSelf();");
code("}");
code("}");
code("rule Cine_010");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Yeebaagooon\", \"There are also minigames in each act.\", \"icons\special e son of osiris icon 64\");");
code("xsEnableRule(\"Cine_011\");");
code("createCameraTrack(12000);");
code("trCameraCut(vector(45.501041,68.355316,11.553124), vector(0.220021,-0.713443,0.665275), vector(0.224017,0.700714,");
code("0.677360), vector(0.949425,0.000001,-0.313995));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(99.999657,68.355316,19.155584), vector(-0.393685,-0.713443,0.579665), vector(-0.400838,0.700714,");
code("0.590194), vector(0.827249,0.000001,0.561836));");
code("addCameraTrackWaypoint();");
code("playCameraTrack();");
code("xsDisableSelf();");
code("}");
code("}");
code("rule Cine_011");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 3) {");
code("characterDialog(\"Yeebaagooon\", \"You cannot die in a minigame.\", \"icons\special e son of osiris icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Cine_012\");");
code("}");
code("}");
code("rule Cine_012");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 2) {");
code("characterDialog(\"Yeebaagooon\", \"Complete them for bonus points.\", \"icons\special e son of osiris icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Cine_013\");");
code("}");
code("}");
code("rule Cine_013");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 3) {");
code("characterDialog(\"Yeebaagooon\", \"A final cautionary note - watch out for poachers.\",");
code("\"icons\special e son of osiris icon 64\");");
code("createCameraTrack(3800);");
code("trCameraCut(vector(44.548786,68.355316,86.877846), vector(0.095280,-0.713443,0.694206), vector(0.097010,0.700714,");
code("0.706816), vector(0.990712,0.000000,-0.135975));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(46.055031,37.558235,109.633667), vector(0.113962,-0.545501,0.830326), vector(0.074174,0.838110,");
code("0.540435), vector(0.990712,0.000000,-0.135975));");
code("addCameraTrackWaypoint();");
code("trCameraCut(vector(48.570820,11.835312,137.803925), vector(0.125484,-0.385176,0.914272), vector(0.052374,0.922843,");
code("0.381599), vector(0.990712,0.000000,-0.135975));");
code("addCameraTrackWaypoint();");
code("playCameraTrack();");
code("xsDisableSelf();");
code("xsEnableRule(\"Cine_014\");");
code("}");
code("}");
code("rule Cine_014");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Yeebaagooon\", \"If you're ever unsure what to do - type 'HELP'.\",");
code("\"icons\special e son of osiris icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Cine_END\");");
code("int temp = trGetNextUnitScenarioNameNumber()-1;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+temp);");
code("trUnitChangeInArea(0,0,\"Great Box\",\"Cinematic Block\", 600);");
code("}");
code("}");
code("rule Cine_END");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("xsDisableSelf();");
code("xsDisableRule(\"TutorialLoops\");");
code("xsEnableRule(\"BuildDeerArea\");");
code("trUIFadeToColor(0,0,0,1,1,true);");
code("Stage = 1;");
code("characterDialog(ActName(Stage), \" \", ActIcon(Stage));");
code("trSetFogAndBlackmap(true,true);");
code("trSetObscuredUnits(true);");
code("trDelayedRuleActivation(\"ResetBlackmap\");");
code("trFadeOutAllSounds(3);");
code("trFadeOutMusic(3);");
code("}");
code("}");
code("rule C_Cine_000");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("characterDialog(\"Chicken Gameplay\", \"Build towers to defend yourselves against the hordes.\",");
code("\"icons\animal chicken icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"C_Cine_001\");");
code("}");
code("}");
code("rule C_Cine_001");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Chicken Gameplay\", \"You can only build 10, this may increase later.\", \"icons\animal chicken icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"C_Cine_002\");");
code("}");
code("}");
code("rule C_Cine_002");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Chicken Gameplay\", \"Relics give stat bonuses, you can only hold one at the start.\",");
code("\"icons\animal chicken icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"C_Cine_003\");");
code("}");
code("}");
code("rule C_Cine_003");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Chicken Powers\", \"Unwanted relics can be turned into landmines with 'R'\",");
code("\"icons\animal chicken icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"C_Cine_004\");");
code("}");
code("}");
code("rule C_Cine_004");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Chicken Powers\", \"Use 'E' to command every tower to fire at the cursor (chicken must be selected)\",");
code("\"icons\animal chicken icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"C_Cine_005\");");
code("}");
code("}");
code("rule C_Cine_005");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 4) {");
code("characterDialog(\"Chicken Powers\", \"E will recharge after all charges are spent.\", \"icons\animal chicken icon 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"ChickenLanding\");");
code("}");
code("}");
}
void helpchat() {
code("rule Help_Chat");
code("inactive");
code("highFrequency");
code("{");
code("for(p = 1; < cNumberNonGaiaPlayers){");
code("xSetPointer(dPlayerData, p);");
code("if(trCurrentPlayer() == p){");
code("if(trChatHistoryContains(\"HELP\", p)){");
code("trChatHistoryClear();");
code("ColouredIconChat(\"1,0.5,0\", ActIcon(Stage), \"<u>\" + ActName(Stage) + \"</u>\");");
code("ColouredChat(\"1,1,1\", \"<u>ABILITIES:</u>\");");
code("switch(Stage)");
code("{");
code("case 1:");
code("{");
code("ColouredChat(\"1,1,0\", \"<u>Q:</u> Jump forward\");");
code("ColouredChat(\"0.8,0.8,0\", \"You must move after each jump before jumping again\");");
code("if(InMinigame == false){");
code("if(1*trQuestVarGet(\"BerriesEaten\") < BerryTarget){");
code("trMessageSetText(\"OBJECTIVE: Eat the required number of berries by moving near them. Then enter the extraction zone.\",");
code("12000);");
code("}");
code("else{");
code("trMessageSetText(\"OBJECTIVE: All players must enter the extraction zone.\", 10000);");
code("}");
code("}");
code("else{");
code("if(xGetBool(dPlayerData, xStopDeath) == true){");
code("trMessageSetText(\"MINIGAME: Reach the flag by jumping over the lava.\", 10000);");
code("}");
code("else{");
code("trMessageSetText(\"You were not on the white tile when the minigame started, so are not counted as playing.\", 10000);");
code("}");
code("}");
code("}");
code("case 2:");
code("{");
code("ColouredChat(\"1,1,0\", \"<u>Q:</u> Toggle charge\");");
code("ColouredChat(\"0.8,0.8,0\", \"Use this ability when walking to toggle charge\");");
code("ColouredChat(\"1,1,0\", \"<u>W:</u> Drink\");");
code("ColouredChat(\"0.8,0.8,0\", \"Use when near water to drink, giving stamina to charge\");");
code("if(InMinigame == false){");
code("if(ActPart == 1){");
code("trMessageSetText(\"OBJECTIVE: Break one fence in all of the 8 large fence lines.\", 10000);");
code("}");
code("if(ActPart == 2){");
code("trMessageSetText(\"OBJECTIVE: Kill the required number of poachers. Then enter the extraction zone.\", 10000);");
code("}");
code("if(ActPart == 3){");
code("trMessageSetText(\"OBJECTIVE: All players must enter the extraction zone.\", 10000);");
code("}");
code("}");
code("else{");
code("if(xGetBool(dPlayerData, xStopDeath) == true){");
code("trMessageSetText(\"MINIGAME: Fling all villagers into the firey pit.\", 10000);");
code("}");
code("else{");
code("trMessageSetText(\"You were not on the white tile when the minigame started, so are not counted as playing.\", 10000);");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("ColouredChat(\"1,1,0\", \"<u>Q:</u> Jump\");");
code("ColouredChat(\"0.8,0.8,0\", \"Jump towards the cursor\");");
code("ColouredChat(\"1,1,0\", \"<u>W:</u> Interract\");");
code("ColouredChat(\"0.8,0.8,0\", \"Interract with a world object, try it!\");");
code("trChatSend(0, \"Collect relics (W) to buy god powers\");");
code("if(InMinigame == false){");
code("trMessageSetText(\"OBJECTIVE: Activate shrines (W) and then make your way to the zone.\", 10000);");
code("}");
code("else{");
code("if(xGetBool(dPlayerData, xStopDeath) == true){");
code("trMessageSetText(\"MINIGAME: Sink 6 squares. Interract (W) with columns to do this.\", 10000);");
code("}");
code("else{");
code("trMessageSetText(\"You were not on the white tile when the minigame started, so are not counted as playing.\", 10000);");
code("}");
code("}");
code("}");
code("case 4:");
code("{");
code("ColouredChat(\"1,1,0\", \"<u>Q:</u> Sprint\");");
code("ColouredChat(\"0.8,0.8,0\", \"Gain a temporary speed boost\");");
code("ColouredChat(\"1,1,0\", \"<u>W:</u> Eat\");");
code("ColouredChat(\"0.8,0.8,0\", \"Eat a Zebra if close enough\");");
code("ColouredChat(\"0.8,0.8,0\", \"You can also eat other world objects\");");
code("ColouredChat(\"1,1,0\", \"<u>E:</u> Ranged attack\");");
code("ColouredChat(\"0.8,0.8,0\", \"Temporary ranged attack (requires relics)\");");
code("if(InMinigame == false){");
code("trMessageSetText(\"OBJECTIVE: Eat zebras to grow in size. Grow to level 7.\", 10000);");
code("}");
code("else{");
code("if(xGetBool(dPlayerData, xStopDeath) == false){");
code("trMessageSetText(\"You were not on the white tile when the minigame started, so are not counted as playing.\", 10000);");
code("}");
code("}");
code("}");
code("case 5:");
code("{");
code("ColouredChat(\"1,1,0\", \"<u>E:</u> All towers shoot\");");
code("ColouredChat(\"0.8,0.8,0\", \"All towers fire at the cursor, ignoring range\");");
code("ColouredChat(\"0.8,0.8,0\", \"After you expend your charges, they recharge\");");
code("ColouredChat(\"1,1,0\", \"<u>R:</u> Convert relics\");");
code("ColouredChat(\"0.8,0.8,0\", \"Changes nearby relics to landmines\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
}
void main(void) {
rmSetStatusText("",0.01);
int MapSize = 252;
rmSetMapSize(252, 252);
rmSetSeaLevel(0);
rmSetSeaType("greek river");
rmTerrainInitialize("GrassB",5);
rmSetLightingSet("Default");
rmSetGaiaCiv(cCivIsis);
rmSwitchToTrigger(rmCreateTrigger("zenowashere"));
rmSetTriggerPriority(4);
rmSetTriggerActive(false);
rmSetTriggerLoop(false);
rmSetTriggerRunImmediately(true);
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");}}/*");
zshared();
voids();
globals();
intsstrings();
databases();
relicschicken();
gamefunctions();
ysearch();
nottud();
choice();
text();
setup();
techstat();
tutorialdeer();
ActDeer();
scorescreen();
tutorialrhino();
actrhino();
tutorialgoat();
ActGoat();
tutorialcrocodile();
ActCrocodile();
tutorialchicken();
ActChicken();
cinematic();
helpchat();
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/rule _zenowashereagain inactive {if(true){xsDisableSelf();//");
rmSetStatusText("", 0.99);}